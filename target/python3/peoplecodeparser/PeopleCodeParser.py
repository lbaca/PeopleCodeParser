# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3}")
        buf.write("\u0450\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\3\2\7\2\u0096\n")
        buf.write("\2\f\2\16\2\u0099\13\2\3\2\3\2\6\2\u009d\n\2\r\2\16\2")
        buf.write("\u009e\3\2\7\2\u00a2\n\2\f\2\16\2\u00a5\13\2\3\2\7\2\u00a8")
        buf.write("\n\2\f\2\16\2\u00ab\13\2\3\2\5\2\u00ae\n\2\3\2\7\2\u00b1")
        buf.write("\n\2\f\2\16\2\u00b4\13\2\3\2\3\2\3\2\7\2\u00b9\n\2\f\2")
        buf.write("\16\2\u00bc\13\2\3\2\3\2\7\2\u00c0\n\2\f\2\16\2\u00c3")
        buf.write("\13\2\3\2\3\2\5\2\u00c7\n\2\3\3\7\3\u00ca\n\3\f\3\16\3")
        buf.write("\u00cd\13\3\3\3\5\3\u00d0\n\3\3\3\7\3\u00d3\n\3\f\3\16")
        buf.write("\3\u00d6\13\3\3\3\5\3\u00d9\n\3\3\3\7\3\u00dc\n\3\f\3")
        buf.write("\16\3\u00df\13\3\3\3\3\3\3\4\3\4\3\4\5\4\u00e6\n\4\3\4")
        buf.write("\6\4\u00e9\n\4\r\4\16\4\u00ea\3\5\3\5\3\5\3\5\3\6\3\6")
        buf.write("\5\6\u00f3\n\6\3\6\3\6\3\6\3\6\5\6\u00f9\n\6\5\6\u00fb")
        buf.write("\n\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\7\b\u0106\n\b")
        buf.write("\f\b\16\b\u0109\13\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\3\b\7")
        buf.write("\b\u0113\n\b\f\b\16\b\u0116\13\b\3\b\3\b\3\b\3\b\3\b\3")
        buf.write("\b\7\b\u011e\n\b\f\b\16\b\u0121\13\b\3\b\3\b\3\b\5\b\u0126")
        buf.write("\n\b\3\t\3\t\3\t\3\t\3\t\7\t\u012d\n\t\f\t\16\t\u0130")
        buf.write("\13\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u0138\n\t\f\t\16\t\u013b")
        buf.write("\13\t\3\t\3\t\3\t\5\t\u0140\n\t\3\n\3\n\3\n\5\n\u0145")
        buf.write("\n\n\3\13\5\13\u0148\n\13\3\13\3\13\7\13\u014c\n\13\f")
        buf.write("\13\16\13\u014f\13\13\3\13\5\13\u0152\n\13\5\13\u0154")
        buf.write("\n\13\3\13\3\13\7\13\u0158\n\13\f\13\16\13\u015b\13\13")
        buf.write("\3\13\5\13\u015e\n\13\5\13\u0160\n\13\3\f\3\f\6\f\u0164")
        buf.write("\n\f\r\f\16\f\u0165\3\f\7\f\u0169\n\f\f\f\16\f\u016c\13")
        buf.write("\f\3\f\7\f\u016f\n\f\f\f\16\f\u0172\13\f\3\r\3\r\3\16")
        buf.write("\3\16\3\17\3\17\6\17\u017a\n\17\r\17\16\17\u017b\3\17")
        buf.write("\7\17\u017f\n\17\f\17\16\17\u0182\13\17\3\17\7\17\u0185")
        buf.write("\n\17\f\17\16\17\u0188\13\17\3\20\3\20\5\20\u018c\n\20")
        buf.write("\3\21\3\21\3\21\5\21\u0191\n\21\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u0197\n\22\3\22\3\22\3\22\5\22\u019c\n\22\3\22\5\22")
        buf.write("\u019f\n\22\3\23\3\23\3\23\7\23\u01a4\n\23\f\23\16\23")
        buf.write("\u01a7\13\23\3\23\5\23\u01aa\n\23\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u01b0\n\24\3\25\3\25\5\25\u01b4\n\25\3\26\3\26\3")
        buf.write("\27\3\27\3\27\7\27\u01bb\n\27\f\27\16\27\u01be\13\27\3")
        buf.write("\27\3\27\5\27\u01c2\n\27\3\27\3\27\3\27\5\27\u01c7\n\27")
        buf.write("\3\30\3\30\3\30\3\30\3\30\5\30\u01ce\n\30\3\30\3\30\3")
        buf.write("\30\3\30\5\30\u01d4\n\30\3\30\5\30\u01d7\n\30\5\30\u01d9")
        buf.write("\n\30\3\31\3\31\3\31\3\31\3\31\7\31\u01e0\n\31\f\31\16")
        buf.write("\31\u01e3\13\31\3\31\5\31\u01e6\n\31\3\31\3\31\5\31\u01ea")
        buf.write("\n\31\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\34\3\34\5\34")
        buf.write("\u01f5\n\34\3\35\3\35\6\35\u01f9\n\35\r\35\16\35\u01fa")
        buf.write("\3\35\7\35\u01fe\n\35\f\35\16\35\u0201\13\35\3\36\3\36")
        buf.write("\3\36\3\36\3\36\5\36\u0208\n\36\3\37\3\37\5\37\u020c\n")
        buf.write("\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\5\"\u0220\n\"\3\"\5\"\u0223\n\"\3\"\3\"\5\"")
        buf.write("\u0227\n\"\3#\3#\3#\3#\7#\u022d\n#\f#\16#\u0230\13#\3")
        buf.write("#\3#\3$\3$\5$\u0236\n$\3$\3$\5$\u023a\n$\3%\3%\3%\3%\3")
        buf.write("%\5%\u0241\n%\3&\3&\3&\3&\3&\7&\u0248\n&\f&\16&\u024b")
        buf.write("\13&\3&\5&\u024e\n&\3&\3&\5&\u0252\n&\3\'\3\'\6\'\u0256")
        buf.write("\n\'\r\'\16\'\u0257\3\'\7\'\u025b\n\'\f\'\16\'\u025e\13")
        buf.write("\'\3(\3(\3(\5(\u0263\n(\3)\3)\3)\7)\u0268\n)\f)\16)\u026b")
        buf.write("\13)\3)\5)\u026e\n)\3)\3)\3*\3*\3*\7*\u0275\n*\f*\16*")
        buf.write("\u0278\13*\3*\3*\3*\3+\3+\3+\7+\u0280\n+\f+\16+\u0283")
        buf.write("\13+\3+\5+\u0286\n+\3+\3+\3,\3,\6,\u028c\n,\r,\16,\u028d")
        buf.write("\3,\7,\u0291\n,\f,\16,\u0294\13,\3,\7,\u0297\n,\f,\16")
        buf.write(",\u029a\13,\3-\3-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.")
        buf.write("\5.\u02aa\n.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u02b4\n.\3.\3")
        buf.write(".\3.\5.\u02b9\n.\3/\3/\5/\u02bd\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\7\60\u02c4\n\60\f\60\16\60\u02c7\13\60\3\60\5\60")
        buf.write("\u02ca\n\60\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3")
        buf.write("\62\3\62\7\62\u02d6\n\62\f\62\16\62\u02d9\13\62\3\62\5")
        buf.write("\62\u02dc\n\62\3\62\3\62\7\62\u02e0\n\62\f\62\16\62\u02e3")
        buf.write("\13\62\3\62\5\62\u02e6\n\62\5\62\u02e8\n\62\3\62\3\62")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u02f4\n")
        buf.write("\63\3\63\7\63\u02f7\n\63\f\63\16\63\u02fa\13\63\3\63\5")
        buf.write("\63\u02fd\n\63\3\63\3\63\3\64\3\64\3\64\7\64\u0304\n\64")
        buf.write("\f\64\16\64\u0307\13\64\3\64\5\64\u030a\n\64\3\64\3\64")
        buf.write("\3\65\3\65\7\65\u0310\n\65\f\65\16\65\u0313\13\65\3\65")
        buf.write("\5\65\u0316\n\65\3\65\3\65\3\65\3\66\3\66\3\66\7\66\u031e")
        buf.write("\n\66\f\66\16\66\u0321\13\66\3\66\5\66\u0324\n\66\3\66")
        buf.write("\5\66\u0327\n\66\3\66\3\66\3\67\3\67\7\67\u032d\n\67\f")
        buf.write("\67\16\67\u0330\13\67\3\67\7\67\u0333\n\67\f\67\16\67")
        buf.write("\u0336\13\67\38\38\58\u033a\n8\38\38\78\u033e\n8\f8\16")
        buf.write("8\u0341\138\38\58\u0344\n8\39\39\79\u0348\n9\f9\169\u034b")
        buf.write("\139\39\59\u034e\n9\3:\3:\3;\3;\7;\u0354\n;\f;\16;\u0357")
        buf.write("\13;\3;\5;\u035a\n;\3;\5;\u035d\n;\3;\7;\u0360\n;\f;\16")
        buf.write(";\u0363\13;\3;\3;\3<\3<\7<\u0369\n<\f<\16<\u036c\13<\3")
        buf.write("<\7<\u036f\n<\f<\16<\u0372\13<\3=\3=\3=\5=\u0377\n=\3")
        buf.write("=\3=\7=\u037b\n=\f=\16=\u037e\13=\3=\5=\u0381\n=\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u0393\n")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u03a0\n>\3>\3>\3")
        buf.write(">\3>\5>\u03a6\n>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5")
        buf.write(">\u03b4\n>\3>\3>\3>\3>\3>\3>\3>\6>\u03bd\n>\r>\16>\u03be")
        buf.write("\3>\3>\3>\3>\3>\3>\3>\3>\7>\u03c9\n>\f>\16>\u03cc\13>")
        buf.write("\3?\3?\3?\5?\u03d1\n?\3?\3?\3@\3@\3@\3@\5@\u03d9\n@\3")
        buf.write("@\5@\u03dc\n@\3A\3A\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3")
        buf.write("B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u03f7\nB\3C\3C\3")
        buf.write("C\3C\3C\5C\u03fe\nC\3D\3D\3D\7D\u0403\nD\fD\16D\u0406")
        buf.write("\13D\3E\3E\3E\3E\5E\u040c\nE\3E\3E\3F\3F\3F\7F\u0413\n")
        buf.write("F\fF\16F\u0416\13F\3G\3G\6G\u041a\nG\rG\16G\u041b\3G\7")
        buf.write("G\u041f\nG\fG\16G\u0422\13G\3H\3H\3H\3H\5H\u0428\nH\3")
        buf.write("H\5H\u042b\nH\3H\3H\5H\u042f\nH\3H\3H\5H\u0433\nH\3H\7")
        buf.write("H\u0436\nH\fH\16H\u0439\13H\3H\5H\u043c\nH\3H\3H\3I\3")
        buf.write("I\3I\7I\u0443\nI\fI\16I\u0446\13I\3I\5I\u0449\nI\3J\3")
        buf.write("J\3J\5J\u044e\nJ\3J\2\3zK\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\2\r\4\2>>gn\4\2HHqt\4\2RRbb\4\2\30")
        buf.write("\30\67\67\b\2++\65\6588@@DDFF\4\2\36\36YY\4\2\r\r[[\6")
        buf.write("\2\65\6588@@DD\4\2++FF\4\2\17\17JJ\f\2\20\20\30\31\35")
        buf.write("\35..IIZZghjluuxy\2\u04da\2\u00c6\3\2\2\2\4\u00cb\3\2")
        buf.write("\2\2\6\u00e2\3\2\2\2\b\u00ec\3\2\2\2\n\u00f2\3\2\2\2\f")
        buf.write("\u00fc\3\2\2\2\16\u0125\3\2\2\2\20\u013f\3\2\2\2\22\u0144")
        buf.write("\3\2\2\2\24\u0147\3\2\2\2\26\u0161\3\2\2\2\30\u0173\3")
        buf.write("\2\2\2\32\u0175\3\2\2\2\34\u0177\3\2\2\2\36\u018b\3\2")
        buf.write("\2\2 \u0190\3\2\2\2\"\u0192\3\2\2\2$\u01a0\3\2\2\2&\u01ab")
        buf.write("\3\2\2\2(\u01b3\3\2\2\2*\u01b5\3\2\2\2,\u01c6\3\2\2\2")
        buf.write(".\u01d8\3\2\2\2\60\u01e9\3\2\2\2\62\u01eb\3\2\2\2\64\u01f0")
        buf.write("\3\2\2\2\66\u01f4\3\2\2\28\u01f6\3\2\2\2:\u0207\3\2\2")
        buf.write("\2<\u020b\3\2\2\2>\u020d\3\2\2\2@\u0214\3\2\2\2B\u0218")
        buf.write("\3\2\2\2D\u0228\3\2\2\2F\u0233\3\2\2\2H\u0240\3\2\2\2")
        buf.write("J\u0251\3\2\2\2L\u0253\3\2\2\2N\u0262\3\2\2\2P\u0264\3")
        buf.write("\2\2\2R\u0271\3\2\2\2T\u027c\3\2\2\2V\u0289\3\2\2\2X\u029b")
        buf.write("\3\2\2\2Z\u02b8\3\2\2\2\\\u02bc\3\2\2\2^\u02be\3\2\2\2")
        buf.write("`\u02cb\3\2\2\2b\u02d1\3\2\2\2d\u02eb\3\2\2\2f\u0300\3")
        buf.write("\2\2\2h\u030d\3\2\2\2j\u031a\3\2\2\2l\u032a\3\2\2\2n\u0337")
        buf.write("\3\2\2\2p\u0345\3\2\2\2r\u034f\3\2\2\2t\u0351\3\2\2\2")
        buf.write("v\u0366\3\2\2\2x\u0373\3\2\2\2z\u0392\3\2\2\2|\u03cd\3")
        buf.write("\2\2\2~\u03d4\3\2\2\2\u0080\u03dd\3\2\2\2\u0082\u03f6")
        buf.write("\3\2\2\2\u0084\u03fd\3\2\2\2\u0086\u03ff\3\2\2\2\u0088")
        buf.write("\u0407\3\2\2\2\u008a\u040f\3\2\2\2\u008c\u0417\3\2\2\2")
        buf.write("\u008e\u0423\3\2\2\2\u0090\u043f\3\2\2\2\u0092\u044a\3")
        buf.write("\2\2\2\u0094\u0096\5\6\4\2\u0095\u0094\3\2\2\2\u0096\u0099")
        buf.write("\3\2\2\2\u0097\u0095\3\2\2\2\u0097\u0098\3\2\2\2\u0098")
        buf.write("\u009a\3\2\2\2\u0099\u0097\3\2\2\2\u009a\u00a3\5\16\b")
        buf.write("\2\u009b\u009d\7W\2\2\u009c\u009b\3\2\2\2\u009d\u009e")
        buf.write("\3\2\2\2\u009e\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f")
        buf.write("\u00a0\3\2\2\2\u00a0\u00a2\5\66\34\2\u00a1\u009c\3\2\2")
        buf.write("\2\u00a2\u00a5\3\2\2\2\u00a3\u00a1\3\2\2\2\u00a3\u00a4")
        buf.write("\3\2\2\2\u00a4\u00ad\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a6")
        buf.write("\u00a8\7W\2\2\u00a7\u00a6\3\2\2\2\u00a8\u00ab\3\2\2\2")
        buf.write("\u00a9\u00a7\3\2\2\2\u00a9\u00aa\3\2\2\2\u00aa\u00ac\3")
        buf.write("\2\2\2\u00ab\u00a9\3\2\2\2\u00ac\u00ae\5L\'\2\u00ad\u00a9")
        buf.write("\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00b2\3\2\2\2\u00af")
        buf.write("\u00b1\7W\2\2\u00b0\u00af\3\2\2\2\u00b1\u00b4\3\2\2\2")
        buf.write("\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2\u00b3\u00b5\3")
        buf.write("\2\2\2\u00b4\u00b2\3\2\2\2\u00b5\u00b6\7\2\2\3\u00b6\u00c7")
        buf.write("\3\2\2\2\u00b7\u00b9\5\6\4\2\u00b8\u00b7\3\2\2\2\u00b9")
        buf.write("\u00bc\3\2\2\2\u00ba\u00b8\3\2\2\2\u00ba\u00bb\3\2\2\2")
        buf.write("\u00bb\u00bd\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00c1\5")
        buf.write("\20\t\2\u00be\u00c0\7W\2\2\u00bf\u00be\3\2\2\2\u00c0\u00c3")
        buf.write("\3\2\2\2\u00c1\u00bf\3\2\2\2\u00c1\u00c2\3\2\2\2\u00c2")
        buf.write("\u00c4\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c4\u00c5\7\2\2\3")
        buf.write("\u00c5\u00c7\3\2\2\2\u00c6\u0097\3\2\2\2\u00c6\u00ba\3")
        buf.write("\2\2\2\u00c7\3\3\2\2\2\u00c8\u00ca\5\6\4\2\u00c9\u00c8")
        buf.write("\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2\u00cb")
        buf.write("\u00cc\3\2\2\2\u00cc\u00cf\3\2\2\2\u00cd\u00cb\3\2\2\2")
        buf.write("\u00ce\u00d0\58\35\2\u00cf\u00ce\3\2\2\2\u00cf\u00d0\3")
        buf.write("\2\2\2\u00d0\u00d4\3\2\2\2\u00d1\u00d3\7W\2\2\u00d2\u00d1")
        buf.write("\3\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4")
        buf.write("\u00d5\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3\2\2\2")
        buf.write("\u00d7\u00d9\5V,\2\u00d8\u00d7\3\2\2\2\u00d8\u00d9\3\2")
        buf.write("\2\2\u00d9\u00dd\3\2\2\2\u00da\u00dc\7W\2\2\u00db\u00da")
        buf.write("\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd\u00db\3\2\2\2\u00dd")
        buf.write("\u00de\3\2\2\2\u00de\u00e0\3\2\2\2\u00df\u00dd\3\2\2\2")
        buf.write("\u00e0\u00e1\7\2\2\3\u00e1\5\3\2\2\2\u00e2\u00e5\7;\2")
        buf.write("\2\u00e3\u00e6\5\b\5\2\u00e4\u00e6\5\f\7\2\u00e5\u00e3")
        buf.write("\3\2\2\2\u00e5\u00e4\3\2\2\2\u00e6\u00e8\3\2\2\2\u00e7")
        buf.write("\u00e9\7W\2\2\u00e8\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2")
        buf.write("\u00ea\u00e8\3\2\2\2\u00ea\u00eb\3\2\2\2\u00eb\7\3\2\2")
        buf.write("\2\u00ec\u00ed\5\n\6\2\u00ed\u00ee\7\26\2\2\u00ee\u00ef")
        buf.write("\7Y\2\2\u00ef\t\3\2\2\2\u00f0\u00f3\7p\2\2\u00f1\u00f3")
        buf.write("\5\u0082B\2\u00f2\u00f0\3\2\2\2\u00f2\u00f1\3\2\2\2\u00f3")
        buf.write("\u00fa\3\2\2\2\u00f4\u00f5\7\26\2\2\u00f5\u00f8\5\u0082")
        buf.write("B\2\u00f6\u00f7\7\26\2\2\u00f7\u00f9\5\u0082B\2\u00f8")
        buf.write("\u00f6\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9\u00fb\3\2\2\2")
        buf.write("\u00fa\u00f4\3\2\2\2\u00fa\u00fb\3\2\2\2\u00fb\13\3\2")
        buf.write("\2\2\u00fc\u00fd\5\n\6\2\u00fd\u00fe\7\26\2\2\u00fe\u00ff")
        buf.write("\5\u0082B\2\u00ff\r\3\2\2\2\u0100\u0101\7\25\2\2\u0101")
        buf.write("\u0102\5\u0082B\2\u0102\u0103\7\61\2\2\u0103\u0107\5\22")
        buf.write("\n\2\u0104\u0106\7W\2\2\u0105\u0104\3\2\2\2\u0106\u0109")
        buf.write("\3\2\2\2\u0107\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u010a\3\2\2\2\u0109\u0107\3\2\2\2\u010a\u010b\5\24\13")
        buf.write("\2\u010b\u010c\7!\2\2\u010c\u0126\3\2\2\2\u010d\u010e")
        buf.write("\7\25\2\2\u010e\u010f\5\u0082B\2\u010f\u0110\7:\2\2\u0110")
        buf.write("\u0114\5\f\7\2\u0111\u0113\7W\2\2\u0112\u0111\3\2\2\2")
        buf.write("\u0113\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114\u0115\3")
        buf.write("\2\2\2\u0115\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0118")
        buf.write("\5\24\13\2\u0118\u0119\7!\2\2\u0119\u0126\3\2\2\2\u011a")
        buf.write("\u011b\7\25\2\2\u011b\u011f\5\u0082B\2\u011c\u011e\7W")
        buf.write("\2\2\u011d\u011c\3\2\2\2\u011e\u0121\3\2\2\2\u011f\u011d")
        buf.write("\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122\3\2\2\2\u0121")
        buf.write("\u011f\3\2\2\2\u0122\u0123\5\24\13\2\u0123\u0124\7!\2")
        buf.write("\2\u0124\u0126\3\2\2\2\u0125\u0100\3\2\2\2\u0125\u010d")
        buf.write("\3\2\2\2\u0125\u011a\3\2\2\2\u0126\17\3\2\2\2\u0127\u0128")
        buf.write("\7=\2\2\u0128\u0129\5\u0082B\2\u0129\u012a\7\61\2\2\u012a")
        buf.write("\u012e\5\22\n\2\u012b\u012d\7W\2\2\u012c\u012b\3\2\2\2")
        buf.write("\u012d\u0130\3\2\2\2\u012e\u012c\3\2\2\2\u012e\u012f\3")
        buf.write("\2\2\2\u012f\u0131\3\2\2\2\u0130\u012e\3\2\2\2\u0131\u0132")
        buf.write("\5\24\13\2\u0132\u0133\7&\2\2\u0133\u0140\3\2\2\2\u0134")
        buf.write("\u0135\7=\2\2\u0135\u0139\5\u0082B\2\u0136\u0138\7W\2")
        buf.write("\2\u0137\u0136\3\2\2\2\u0138\u013b\3\2\2\2\u0139\u0137")
        buf.write("\3\2\2\2\u0139\u013a\3\2\2\2\u013a\u013c\3\2\2\2\u013b")
        buf.write("\u0139\3\2\2\2\u013c\u013d\5\24\13\2\u013d\u013e\7&\2")
        buf.write("\2\u013e\u0140\3\2\2\2\u013f\u0127\3\2\2\2\u013f\u0134")
        buf.write("\3\2\2\2\u0140\21\3\2\2\2\u0141\u0145\7.\2\2\u0142\u0145")
        buf.write("\5\f\7\2\u0143\u0145\5(\25\2\u0144\u0141\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0144\u0143\3\2\2\2\u0145\23\3\2\2\2\u0146")
        buf.write("\u0148\5\30\r\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2")
        buf.write("\2\u0148\u0153\3\2\2\2\u0149\u014d\7O\2\2\u014a\u014c")
        buf.write("\7W\2\2\u014b\u014a\3\2\2\2\u014c\u014f\3\2\2\2\u014d")
        buf.write("\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e\u0151\3\2\2\2")
        buf.write("\u014f\u014d\3\2\2\2\u0150\u0152\5\32\16\2\u0151\u0150")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u0154\3\2\2\2\u0153")
        buf.write("\u0149\3\2\2\2\u0153\u0154\3\2\2\2\u0154\u015f\3\2\2\2")
        buf.write("\u0155\u0159\7M\2\2\u0156\u0158\7W\2\2\u0157\u0156\3\2")
        buf.write("\2\2\u0158\u015b\3\2\2\2\u0159\u0157\3\2\2\2\u0159\u015a")
        buf.write("\3\2\2\2\u015a\u015d\3\2\2\2\u015b\u0159\3\2\2\2\u015c")
        buf.write("\u015e\5\34\17\2\u015d\u015c\3\2\2\2\u015d\u015e\3\2\2")
        buf.write("\2\u015e\u0160\3\2\2\2\u015f\u0155\3\2\2\2\u015f\u0160")
        buf.write("\3\2\2\2\u0160\25\3\2\2\2\u0161\u016a\5\36\20\2\u0162")
        buf.write("\u0164\7W\2\2\u0163\u0162\3\2\2\2\u0164\u0165\3\2\2\2")
        buf.write("\u0165\u0163\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0167\3")
        buf.write("\2\2\2\u0167\u0169\5\36\20\2\u0168\u0163\3\2\2\2\u0169")
        buf.write("\u016c\3\2\2\2\u016a\u0168\3\2\2\2\u016a\u016b\3\2\2\2")
        buf.write("\u016b\u0170\3\2\2\2\u016c\u016a\3\2\2\2\u016d\u016f\7")
        buf.write("W\2\2\u016e\u016d\3\2\2\2\u016f\u0172\3\2\2\2\u0170\u016e")
        buf.write("\3\2\2\2\u0170\u0171\3\2\2\2\u0171\27\3\2\2\2\u0172\u0170")
        buf.write("\3\2\2\2\u0173\u0174\5\26\f\2\u0174\31\3\2\2\2\u0175\u0176")
        buf.write("\5\26\f\2\u0176\33\3\2\2\2\u0177\u0180\5 \21\2\u0178\u017a")
        buf.write("\7W\2\2\u0179\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b")
        buf.write("\u0179\3\2\2\2\u017b\u017c\3\2\2\2\u017c\u017d\3\2\2\2")
        buf.write("\u017d\u017f\5 \21\2\u017e\u0179\3\2\2\2\u017f\u0182\3")
        buf.write("\2\2\2\u0180\u017e\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0186")
        buf.write("\3\2\2\2\u0182\u0180\3\2\2\2\u0183\u0185\7W\2\2\u0184")
        buf.write("\u0183\3\2\2\2\u0185\u0188\3\2\2\2\u0186\u0184\3\2\2\2")
        buf.write("\u0186\u0187\3\2\2\2\u0187\35\3\2\2\2\u0188\u0186\3\2")
        buf.write("\2\2\u0189\u018c\5\"\22\2\u018a\u018c\5.\30\2\u018b\u0189")
        buf.write("\3\2\2\2\u018b\u018a\3\2\2\2\u018c\37\3\2\2\2\u018d\u0191")
        buf.write("\5\"\22\2\u018e\u0191\5\60\31\2\u018f\u0191\5\62\32\2")
        buf.write("\u0190\u018d\3\2\2\2\u0190\u018e\3\2\2\2\u0190\u018f\3")
        buf.write("\2\2\2\u0191!\3\2\2\2\u0192\u0193\7E\2\2\u0193\u0194\5")
        buf.write("\u0082B\2\u0194\u0196\7C\2\2\u0195\u0197\5$\23\2\u0196")
        buf.write("\u0195\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\3\2\2\2")
        buf.write("\u0198\u019b\7V\2\2\u0199\u019a\7U\2\2\u019a\u019c\5,")
        buf.write("\27\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c\u019e")
        buf.write("\3\2\2\2\u019d\u019f\7\f\2\2\u019e\u019d\3\2\2\2\u019e")
        buf.write("\u019f\3\2\2\2\u019f#\3\2\2\2\u01a0\u01a5\5&\24\2\u01a1")
        buf.write("\u01a2\7\27\2\2\u01a2\u01a4\5&\24\2\u01a3\u01a1\3\2\2")
        buf.write("\2\u01a4\u01a7\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a6")
        buf.write("\3\2\2\2\u01a6\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a8")
        buf.write("\u01aa\7\27\2\2\u01a9\u01a8\3\2\2\2\u01a9\u01aa\3\2\2")
        buf.write("\2\u01aa%\3\2\2\2\u01ab\u01ac\7z\2\2\u01ac\u01ad\7\21")
        buf.write("\2\2\u01ad\u01af\5,\27\2\u01ae\u01b0\7K\2\2\u01af\u01ae")
        buf.write("\3\2\2\2\u01af\u01b0\3\2\2\2\u01b0\'\3\2\2\2\u01b1\u01b4")
        buf.write("\5*\26\2\u01b2\u01b4\7x\2\2\u01b3\u01b1\3\2\2\2\u01b3")
        buf.write("\u01b2\3\2\2\2\u01b4)\3\2\2\2\u01b5\u01b6\t\2\2\2\u01b6")
        buf.write("+\3\2\2\2\u01b7\u01bc\7\20\2\2\u01b8\u01b9\7I\2\2\u01b9")
        buf.write("\u01bb\7\20\2\2\u01ba\u01b8\3\2\2\2\u01bb\u01be\3\2\2")
        buf.write("\2\u01bc\u01ba\3\2\2\2\u01bc\u01bd\3\2\2\2\u01bd\u01c1")
        buf.write("\3\2\2\2\u01be\u01bc\3\2\2\2\u01bf\u01c0\7I\2\2\u01c0")
        buf.write("\u01c2\5,\27\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2")
        buf.write("\u01c2\u01c7\3\2\2\2\u01c3\u01c7\7.\2\2\u01c4\u01c7\5")
        buf.write("\f\7\2\u01c5\u01c7\5(\25\2\u01c6\u01b7\3\2\2\2\u01c6\u01c3")
        buf.write("\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c6\u01c5\3\2\2\2\u01c7")
        buf.write("-\3\2\2\2\u01c8\u01c9\7N\2\2\u01c9\u01ca\5,\27\2\u01ca")
        buf.write("\u01cb\5\u0082B\2\u01cb\u01cd\7\66\2\2\u01cc\u01ce\7X")
        buf.write("\2\2\u01cd\u01cc\3\2\2\2\u01cd\u01ce\3\2\2\2\u01ce\u01d9")
        buf.write("\3\2\2\2\u01cf\u01d0\7N\2\2\u01d0\u01d1\5,\27\2\u01d1")
        buf.write("\u01d3\5\u0082B\2\u01d2\u01d4\7\f\2\2\u01d3\u01d2\3\2")
        buf.write("\2\2\u01d3\u01d4\3\2\2\2\u01d4\u01d6\3\2\2\2\u01d5\u01d7")
        buf.write("\7Q\2\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7")
        buf.write("\u01d9\3\2\2\2\u01d8\u01c8\3\2\2\2\u01d8\u01cf\3\2\2\2")
        buf.write("\u01d9/\3\2\2\2\u01da\u01db\7<\2\2\u01db\u01dc\5,\27\2")
        buf.write("\u01dc\u01e1\7z\2\2\u01dd\u01de\7\27\2\2\u01de\u01e0\7")
        buf.write("z\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e3\3\2\2\2\u01e1\u01df")
        buf.write("\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u01e5\3\2\2\2\u01e3")
        buf.write("\u01e1\3\2\2\2\u01e4\u01e6\7\27\2\2\u01e5\u01e4\3\2\2")
        buf.write("\2\u01e5\u01e6\3\2\2\2\u01e6\u01ea\3\2\2\2\u01e7\u01e8")
        buf.write("\7<\2\2\u01e8\u01ea\5,\27\2\u01e9\u01da\3\2\2\2\u01e9")
        buf.write("\u01e7\3\2\2\2\u01ea\61\3\2\2\2\u01eb\u01ec\7\31\2\2\u01ec")
        buf.write("\u01ed\7z\2\2\u01ed\u01ee\7+\2\2\u01ee\u01ef\5\64\33\2")
        buf.write("\u01ef\63\3\2\2\2\u01f0\u01f1\t\3\2\2\u01f1\65\3\2\2\2")
        buf.write("\u01f2\u01f5\5<\37\2\u01f3\u01f5\5J&\2\u01f4\u01f2\3\2")
        buf.write("\2\2\u01f4\u01f3\3\2\2\2\u01f5\67\3\2\2\2\u01f6\u01ff")
        buf.write("\5:\36\2\u01f7\u01f9\7W\2\2\u01f8\u01f7\3\2\2\2\u01f9")
        buf.write("\u01fa\3\2\2\2\u01fa\u01f8\3\2\2\2\u01fa\u01fb\3\2\2\2")
        buf.write("\u01fb\u01fc\3\2\2\2\u01fc\u01fe\5:\36\2\u01fd\u01f8\3")
        buf.write("\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff\u0200")
        buf.write("\3\2\2\2\u02009\3\2\2\2\u0201\u01ff\3\2\2\2\u0202\u0208")
        buf.write("\5<\37\2\u0203\u0208\5J&\2\u0204\u0208\5\62\32\2\u0205")
        buf.write("\u0208\5^\60\2\u0206\u0208\5\u008eH\2\u0207\u0202\3\2")
        buf.write("\2\2\u0207\u0203\3\2\2\2\u0207\u0204\3\2\2\2\u0207\u0205")
        buf.write("\3\2\2\2\u0207\u0206\3\2\2\2\u0208;\3\2\2\2\u0209\u020c")
        buf.write("\5> \2\u020a\u020c\5B\"\2\u020b\u0209\3\2\2\2\u020b\u020a")
        buf.write("\3\2\2\2\u020c=\3\2\2\2\u020d\u020e\7\34\2\2\u020e\u020f")
        buf.write("\7\63\2\2\u020f\u0210\5\u0082B\2\u0210\u0211\7L\2\2\u0211")
        buf.write("\u0212\5@!\2\u0212\u0213\7u\2\2\u0213?\3\2\2\2\u0214\u0215")
        buf.write("\5\u0082B\2\u0215\u0216\7\37\2\2\u0216\u0217\5\u0082B")
        buf.write("\2\u0217A\3\2\2\2\u0218\u0219\7\34\2\2\u0219\u021a\7\63")
        buf.write("\2\2\u021a\u021b\5\u0082B\2\u021b\u021c\7A\2\2\u021c\u021f")
        buf.write("\7s\2\2\u021d\u021e\7\16\2\2\u021e\u0220\7s\2\2\u021f")
        buf.write("\u021d\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0222\3\2\2\2")
        buf.write("\u0221\u0223\5D#\2\u0222\u0221\3\2\2\2\u0222\u0223\3\2")
        buf.write("\2\2\u0223\u0226\3\2\2\2\u0224\u0225\7U\2\2\u0225\u0227")
        buf.write("\5H%\2\u0226\u0224\3\2\2\2\u0226\u0227\3\2\2\2\u0227C")
        buf.write("\3\2\2\2\u0228\u0229\7C\2\2\u0229\u022e\5F$\2\u022a\u022b")
        buf.write("\7\27\2\2\u022b\u022d\5F$\2\u022c\u022a\3\2\2\2\u022d")
        buf.write("\u0230\3\2\2\2\u022e\u022c\3\2\2\2\u022e\u022f\3\2\2\2")
        buf.write("\u022f\u0231\3\2\2\2\u0230\u022e\3\2\2\2\u0231\u0232\7")
        buf.write("V\2\2\u0232E\3\2\2\2\u0233\u0235\5\u0082B\2\u0234\u0236")
        buf.write("\t\4\2\2\u0235\u0234\3\2\2\2\u0235\u0236\3\2\2\2\u0236")
        buf.write("\u0239\3\2\2\2\u0237\u0238\7\21\2\2\u0238\u023a\5*\26")
        buf.write("\2\u0239\u0237\3\2\2\2\u0239\u023a\3\2\2\2\u023aG\3\2")
        buf.write("\2\2\u023b\u023c\5\u0082B\2\u023c\u023d\7\21\2\2\u023d")
        buf.write("\u023e\5*\26\2\u023e\u0241\3\2\2\2\u023f\u0241\5*\26\2")
        buf.write("\u0240\u023b\3\2\2\2\u0240\u023f\3\2\2\2\u0241I\3\2\2")
        buf.write("\2\u0242\u0243\t\5\2\2\u0243\u0244\5,\27\2\u0244\u0249")
        buf.write("\7z\2\2\u0245\u0246\7\27\2\2\u0246\u0248\7z\2\2\u0247")
        buf.write("\u0245\3\2\2\2\u0248\u024b\3\2\2\2\u0249\u0247\3\2\2\2")
        buf.write("\u0249\u024a\3\2\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3")
        buf.write("\2\2\2\u024c\u024e\7\27\2\2\u024d\u024c\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024e\u0252\3\2\2\2\u024f\u0250\t\5\2\2")
        buf.write("\u0250\u0252\5,\27\2\u0251\u0242\3\2\2\2\u0251\u024f\3")
        buf.write("\2\2\2\u0252K\3\2\2\2\u0253\u025c\5N(\2\u0254\u0256\7")
        buf.write("W\2\2\u0255\u0254\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0255")
        buf.write("\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0259\3\2\2\2\u0259")
        buf.write("\u025b\5N(\2\u025a\u0255\3\2\2\2\u025b\u025e\3\2\2\2\u025c")
        buf.write("\u025a\3\2\2\2\u025c\u025d\3\2\2\2\u025dM\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025f\u0263\5P)\2\u0260\u0263\5R*\2\u0261")
        buf.write("\u0263\5T+\2\u0262\u025f\3\2\2\2\u0262\u0260\3\2\2\2\u0262")
        buf.write("\u0261\3\2\2\2\u0263O\3\2\2\2\u0264\u0265\7E\2\2\u0265")
        buf.write("\u0269\5\u0082B\2\u0266\u0268\7W\2\2\u0267\u0266\3\2\2")
        buf.write("\2\u0268\u026b\3\2\2\2\u0269\u0267\3\2\2\2\u0269\u026a")
        buf.write("\3\2\2\2\u026a\u026d\3\2\2\2\u026b\u0269\3\2\2\2\u026c")
        buf.write("\u026e\5V,\2\u026d\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e")
        buf.write("\u026f\3\2\2\2\u026f\u0270\7\'\2\2\u0270Q\3\2\2\2\u0271")
        buf.write("\u0272\7\66\2\2\u0272\u0276\5\u0082B\2\u0273\u0275\7W")
        buf.write("\2\2\u0274\u0273\3\2\2\2\u0275\u0278\3\2\2\2\u0276\u0274")
        buf.write("\3\2\2\2\u0276\u0277\3\2\2\2\u0277\u0279\3\2\2\2\u0278")
        buf.write("\u0276\3\2\2\2\u0279\u027a\5V,\2\u027a\u027b\7$\2\2\u027b")
        buf.write("S\3\2\2\2\u027c\u027d\7X\2\2\u027d\u0281\5\u0082B\2\u027e")
        buf.write("\u0280\7W\2\2\u027f\u027e\3\2\2\2\u0280\u0283\3\2\2\2")
        buf.write("\u0281\u027f\3\2\2\2\u0281\u0282\3\2\2\2\u0282\u0285\3")
        buf.write("\2\2\2\u0283\u0281\3\2\2\2\u0284\u0286\5V,\2\u0285\u0284")
        buf.write("\3\2\2\2\u0285\u0286\3\2\2\2\u0286\u0287\3\2\2\2\u0287")
        buf.write("\u0288\7(\2\2\u0288U\3\2\2\2\u0289\u0292\5Z.\2\u028a\u028c")
        buf.write("\7W\2\2\u028b\u028a\3\2\2\2\u028c\u028d\3\2\2\2\u028d")
        buf.write("\u028b\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f\3\2\2\2")
        buf.write("\u028f\u0291\5Z.\2\u0290\u028b\3\2\2\2\u0291\u0294\3\2")
        buf.write("\2\2\u0292\u0290\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0298")
        buf.write("\3\2\2\2\u0294\u0292\3\2\2\2\u0295\u0297\7W\2\2\u0296")
        buf.write("\u0295\3\2\2\2\u0297\u029a\3\2\2\2\u0298\u0296\3\2\2\2")
        buf.write("\u0298\u0299\3\2\2\2\u0299W\3\2\2\2\u029a\u0298\3\2\2")
        buf.write("\2\u029b\u029c\5V,\2\u029cY\3\2\2\2\u029d\u029e\7\\\2")
        buf.write("\2\u029e\u029f\7+\2\2\u029f\u02b9\5z>\2\u02a0\u02b9\5")
        buf.write("\\/\2\u02a1\u02b9\5b\62\2\u02a2\u02b9\5d\63\2\u02a3\u02b9")
        buf.write("\5f\64\2\u02a4\u02b9\5h\65\2\u02a5\u02b9\5j\66\2\u02a6")
        buf.write("\u02b9\5t;\2\u02a7\u02a9\7/\2\2\u02a8\u02aa\5z>\2\u02a9")
        buf.write("\u02a8\3\2\2\2\u02a9\u02aa\3\2\2\2\u02aa\u02b9\3\2\2\2")
        buf.write("\u02ab\u02b9\7\23\2\2\u02ac\u02b9\7\32\2\2\u02ad\u02ae")
        buf.write("\7,\2\2\u02ae\u02b9\5z>\2\u02af\u02b0\7c\2\2\u02b0\u02b9")
        buf.write("\5z>\2\u02b1\u02b3\7T\2\2\u02b2\u02b4\5z>\2\u02b3\u02b2")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b9\3\2\2\2\u02b5")
        buf.write("\u02b6\7^\2\2\u02b6\u02b9\5z>\2\u02b7\u02b9\5z>\2\u02b8")
        buf.write("\u029d\3\2\2\2\u02b8\u02a0\3\2\2\2\u02b8\u02a1\3\2\2\2")
        buf.write("\u02b8\u02a2\3\2\2\2\u02b8\u02a3\3\2\2\2\u02b8\u02a4\3")
        buf.write("\2\2\2\u02b8\u02a5\3\2\2\2\u02b8\u02a6\3\2\2\2\u02b8\u02a7")
        buf.write("\3\2\2\2\u02b8\u02ab\3\2\2\2\u02b8\u02ac\3\2\2\2\u02b8")
        buf.write("\u02ad\3\2\2\2\u02b8\u02af\3\2\2\2\u02b8\u02b1\3\2\2\2")
        buf.write("\u02b8\u02b5\3\2\2\2\u02b8\u02b7\3\2\2\2\u02b9[\3\2\2")
        buf.write("\2\u02ba\u02bd\5^\60\2\u02bb\u02bd\5`\61\2\u02bc\u02ba")
        buf.write("\3\2\2\2\u02bc\u02bb\3\2\2\2\u02bd]\3\2\2\2\u02be\u02bf")
        buf.write("\7B\2\2\u02bf\u02c0\5,\27\2\u02c0\u02c5\7z\2\2\u02c1\u02c2")
        buf.write("\7\27\2\2\u02c2\u02c4\7z\2\2\u02c3\u02c1\3\2\2\2\u02c4")
        buf.write("\u02c7\3\2\2\2\u02c5\u02c3\3\2\2\2\u02c5\u02c6\3\2\2\2")
        buf.write("\u02c6\u02c9\3\2\2\2\u02c7\u02c5\3\2\2\2\u02c8\u02ca\7")
        buf.write("\27\2\2\u02c9\u02c8\3\2\2\2\u02c9\u02ca\3\2\2\2\u02ca")
        buf.write("_\3\2\2\2\u02cb\u02cc\7B\2\2\u02cc\u02cd\5,\27\2\u02cd")
        buf.write("\u02ce\7z\2\2\u02ce\u02cf\7+\2\2\u02cf\u02d0\5z>\2\u02d0")
        buf.write("a\3\2\2\2\u02d1\u02d2\79\2\2\u02d2\u02d3\5z>\2\u02d3\u02d7")
        buf.write("\7]\2\2\u02d4\u02d6\7W\2\2\u02d5\u02d4\3\2\2\2\u02d6\u02d9")
        buf.write("\3\2\2\2\u02d7\u02d5\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8")
        buf.write("\u02db\3\2\2\2\u02d9\u02d7\3\2\2\2\u02da\u02dc\5X-\2\u02db")
        buf.write("\u02da\3\2\2\2\u02db\u02dc\3\2\2\2\u02dc\u02e7\3\2\2\2")
        buf.write("\u02dd\u02e1\7 \2\2\u02de\u02e0\7W\2\2\u02df\u02de\3\2")
        buf.write("\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df\3\2\2\2\u02e1\u02e2")
        buf.write("\3\2\2\2\u02e2\u02e5\3\2\2\2\u02e3\u02e1\3\2\2\2\u02e4")
        buf.write("\u02e6\5X-\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2\2\2\u02e6")
        buf.write("\u02e8\3\2\2\2\u02e7\u02dd\3\2\2\2\u02e7\u02e8\3\2\2\2")
        buf.write("\u02e8\u02e9\3\2\2\2\u02e9\u02ea\7%\2\2\u02eac\3\2\2\2")
        buf.write("\u02eb\u02ec\7\62\2\2\u02ec\u02ed\7z\2\2\u02ed\u02ee\7")
        buf.write("+\2\2\u02ee\u02ef\5z>\2\u02ef\u02f0\7_\2\2\u02f0\u02f3")
        buf.write("\5z>\2\u02f1\u02f2\7Z\2\2\u02f2\u02f4\5z>\2\u02f3\u02f1")
        buf.write("\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f8\3\2\2\2\u02f5")
        buf.write("\u02f7\7W\2\2\u02f6\u02f5\3\2\2\2\u02f7\u02fa\3\2\2\2")
        buf.write("\u02f8\u02f6\3\2\2\2\u02f8\u02f9\3\2\2\2\u02f9\u02fc\3")
        buf.write("\2\2\2\u02fa\u02f8\3\2\2\2\u02fb\u02fd\5X-\2\u02fc\u02fb")
        buf.write("\3\2\2\2\u02fc\u02fd\3\2\2\2\u02fd\u02fe\3\2\2\2\u02fe")
        buf.write("\u02ff\7#\2\2\u02ffe\3\2\2\2\u0300\u0301\7f\2\2\u0301")
        buf.write("\u0305\5z>\2\u0302\u0304\7W\2\2\u0303\u0302\3\2\2\2\u0304")
        buf.write("\u0307\3\2\2\2\u0305\u0303\3\2\2\2\u0305\u0306\3\2\2\2")
        buf.write("\u0306\u0309\3\2\2\2\u0307\u0305\3\2\2\2\u0308\u030a\5")
        buf.write("X-\2\u0309\u0308\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u030b")
        buf.write("\3\2\2\2\u030b\u030c\7*\2\2\u030cg\3\2\2\2\u030d\u0311")
        buf.write("\7S\2\2\u030e\u0310\7W\2\2\u030f\u030e\3\2\2\2\u0310\u0313")
        buf.write("\3\2\2\2\u0311\u030f\3\2\2\2\u0311\u0312\3\2\2\2\u0312")
        buf.write("\u0315\3\2\2\2\u0313\u0311\3\2\2\2\u0314\u0316\5X-\2\u0315")
        buf.write("\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317\3\2\2\2")
        buf.write("\u0317\u0318\7a\2\2\u0318\u0319\5z>\2\u0319i\3\2\2\2\u031a")
        buf.write("\u031b\7-\2\2\u031b\u031f\5z>\2\u031c\u031e\7W\2\2\u031d")
        buf.write("\u031c\3\2\2\2\u031e\u0321\3\2\2\2\u031f\u031d\3\2\2\2")
        buf.write("\u031f\u0320\3\2\2\2\u0320\u0323\3\2\2\2\u0321\u031f\3")
        buf.write("\2\2\2\u0322\u0324\5l\67\2\u0323\u0322\3\2\2\2\u0323\u0324")
        buf.write("\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0327\5p9\2\u0326\u0325")
        buf.write("\3\2\2\2\u0326\u0327\3\2\2\2\u0327\u0328\3\2\2\2\u0328")
        buf.write("\u0329\7\"\2\2\u0329k\3\2\2\2\u032a\u0334\5n8\2\u032b")
        buf.write("\u032d\7W\2\2\u032c\u032b\3\2\2\2\u032d\u0330\3\2\2\2")
        buf.write("\u032e\u032c\3\2\2\2\u032e\u032f\3\2\2\2\u032f\u0331\3")
        buf.write("\2\2\2\u0330\u032e\3\2\2\2\u0331\u0333\5n8\2\u0332\u032e")
        buf.write("\3\2\2\2\u0333\u0336\3\2\2\2\u0334\u0332\3\2\2\2\u0334")
        buf.write("\u0335\3\2\2\2\u0335m\3\2\2\2\u0336\u0334\3\2\2\2\u0337")
        buf.write("\u0339\7d\2\2\u0338\u033a\5r:\2\u0339\u0338\3\2\2\2\u0339")
        buf.write("\u033a\3\2\2\2\u033a\u033b\3\2\2\2\u033b\u033f\5z>\2\u033c")
        buf.write("\u033e\7W\2\2\u033d\u033c\3\2\2\2\u033e\u0341\3\2\2\2")
        buf.write("\u033f\u033d\3\2\2\2\u033f\u0340\3\2\2\2\u0340\u0343\3")
        buf.write("\2\2\2\u0341\u033f\3\2\2\2\u0342\u0344\5X-\2\u0343\u0342")
        buf.write("\3\2\2\2\u0343\u0344\3\2\2\2\u0344o\3\2\2\2\u0345\u0349")
        buf.write("\7e\2\2\u0346\u0348\7W\2\2\u0347\u0346\3\2\2\2\u0348\u034b")
        buf.write("\3\2\2\2\u0349\u0347\3\2\2\2\u0349\u034a\3\2\2\2\u034a")
        buf.write("\u034d\3\2\2\2\u034b\u0349\3\2\2\2\u034c\u034e\5X-\2\u034d")
        buf.write("\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034eq\3\2\2\2\u034f")
        buf.write("\u0350\t\6\2\2\u0350s\3\2\2\2\u0351\u0355\7`\2\2\u0352")
        buf.write("\u0354\7W\2\2\u0353\u0352\3\2\2\2\u0354\u0357\3\2\2\2")
        buf.write("\u0355\u0353\3\2\2\2\u0355\u0356\3\2\2\2\u0356\u0359\3")
        buf.write("\2\2\2\u0357\u0355\3\2\2\2\u0358\u035a\5X-\2\u0359\u0358")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b")
        buf.write("\u035d\5v<\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("\u0361\3\2\2\2\u035e\u0360\7W\2\2\u035f\u035e\3\2\2\2")
        buf.write("\u0360\u0363\3\2\2\2\u0361\u035f\3\2\2\2\u0361\u0362\3")
        buf.write("\2\2\2\u0362\u0364\3\2\2\2\u0363\u0361\3\2\2\2\u0364\u0365")
        buf.write("\7)\2\2\u0365u\3\2\2\2\u0366\u0370\5x=\2\u0367\u0369\7")
        buf.write("W\2\2\u0368\u0367\3\2\2\2\u0369\u036c\3\2\2\2\u036a\u0368")
        buf.write("\3\2\2\2\u036a\u036b\3\2\2\2\u036b\u036d\3\2\2\2\u036c")
        buf.write("\u036a\3\2\2\2\u036d\u036f\5x=\2\u036e\u036a\3\2\2\2\u036f")
        buf.write("\u0372\3\2\2\2\u0370\u036e\3\2\2\2\u0370\u0371\3\2\2\2")
        buf.write("\u0371w\3\2\2\2\u0372\u0370\3\2\2\2\u0373\u0376\7\24\2")
        buf.write("\2\u0374\u0377\7.\2\2\u0375\u0377\5\f\7\2\u0376\u0374")
        buf.write("\3\2\2\2\u0376\u0375\3\2\2\2\u0377\u0378\3\2\2\2\u0378")
        buf.write("\u037c\7z\2\2\u0379\u037b\7W\2\2\u037a\u0379\3\2\2\2\u037b")
        buf.write("\u037e\3\2\2\2\u037c\u037a\3\2\2\2\u037c\u037d\3\2\2\2")
        buf.write("\u037d\u0380\3\2\2\2\u037e\u037c\3\2\2\2\u037f\u0381\5")
        buf.write("X-\2\u0380\u037f\3\2\2\2\u0380\u0381\3\2\2\2\u0381y\3")
        buf.write("\2\2\2\u0382\u0383\b>\1\2\u0383\u0384\7C\2\2\u0384\u0385")
        buf.write("\5z>\2\u0385\u0386\7V\2\2\u0386\u0393\3\2\2\2\u0387\u0388")
        buf.write("\7\22\2\2\u0388\u0393\5z>\26\u0389\u0393\5\u0088E\2\u038a")
        buf.write("\u0393\5|?\2\u038b\u038c\7[\2\2\u038c\u0393\5z>\16\u038d")
        buf.write("\u038e\7G\2\2\u038e\u0393\5z>\n\u038f\u0393\5\64\33\2")
        buf.write("\u0390\u0393\5\u0084C\2\u0391\u0393\5\f\7\2\u0392\u0382")
        buf.write("\3\2\2\2\u0392\u0387\3\2\2\2\u0392\u0389\3\2\2\2\u0392")
        buf.write("\u038a\3\2\2\2\u0392\u038b\3\2\2\2\u0392\u038d\3\2\2\2")
        buf.write("\u0392\u038f\3\2\2\2\u0392\u0390\3\2\2\2\u0392\u0391\3")
        buf.write("\2\2\2\u0393\u03ca\3\2\2\2\u0394\u0395\f\r\2\2\u0395\u0396")
        buf.write("\7\60\2\2\u0396\u03c9\5z>\r\u0397\u0398\f\f\2\2\u0398")
        buf.write("\u0399\t\7\2\2\u0399\u03c9\5z>\r\u039a\u039b\f\13\2\2")
        buf.write("\u039b\u039c\t\b\2\2\u039c\u03c9\5z>\f\u039d\u039f\f\t")
        buf.write("\2\2\u039e\u03a0\7G\2\2\u039f\u039e\3\2\2\2\u039f\u03a0")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\t\t\2\2\u03a2")
        buf.write("\u03c9\5z>\n\u03a3\u03a5\f\b\2\2\u03a4\u03a6\7G\2\2\u03a5")
        buf.write("\u03a4\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7\3\2\2\2")
        buf.write("\u03a7\u03a8\t\n\2\2\u03a8\u03c9\5z>\t\u03a9\u03aa\f\7")
        buf.write("\2\2\u03aa\u03ab\t\13\2\2\u03ab\u03c9\5z>\b\u03ac\u03ad")
        buf.write("\f\6\2\2\u03ad\u03ae\7o\2\2\u03ae\u03c9\5z>\7\u03af\u03b0")
        buf.write("\f\24\2\2\u03b0\u03b3\7\21\2\2\u03b1\u03b4\5\f\7\2\u03b2")
        buf.write("\u03b4\5\u0082B\2\u03b3\u03b1\3\2\2\2\u03b3\u03b2\3\2")
        buf.write("\2\2\u03b4\u03c9\3\2\2\2\u03b5\u03b6\f\23\2\2\u03b6\u03b7")
        buf.write("\7?\2\2\u03b7\u03b8\5\u0086D\2\u03b8\u03b9\7P\2\2\u03b9")
        buf.write("\u03c9\3\2\2\2\u03ba\u03bc\f\21\2\2\u03bb\u03bd\5~@\2")
        buf.write("\u03bc\u03bb\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03bc\3")
        buf.write("\2\2\2\u03be\u03bf\3\2\2\2\u03bf\u03c9\3\2\2\2\u03c0\u03c1")
        buf.write("\f\20\2\2\u03c1\u03c2\7\37\2\2\u03c2\u03c9\7s\2\2\u03c3")
        buf.write("\u03c4\f\17\2\2\u03c4\u03c5\7C\2\2\u03c5\u03c6\5z>\2\u03c6")
        buf.write("\u03c7\7V\2\2\u03c7\u03c9\3\2\2\2\u03c8\u0394\3\2\2\2")
        buf.write("\u03c8\u0397\3\2\2\2\u03c8\u039a\3\2\2\2\u03c8\u039d\3")
        buf.write("\2\2\2\u03c8\u03a3\3\2\2\2\u03c8\u03a9\3\2\2\2\u03c8\u03ac")
        buf.write("\3\2\2\2\u03c8\u03af\3\2\2\2\u03c8\u03b5\3\2\2\2\u03c8")
        buf.write("\u03ba\3\2\2\2\u03c8\u03c0\3\2\2\2\u03c8\u03c3\3\2\2\2")
        buf.write("\u03c9\u03cc\3\2\2\2\u03ca\u03c8\3\2\2\2\u03ca\u03cb\3")
        buf.write("\2\2\2\u03cb{\3\2\2\2\u03cc\u03ca\3\2\2\2\u03cd\u03ce")
        buf.write("\5\u0082B\2\u03ce\u03d0\7C\2\2\u03cf\u03d1\5\u008aF\2")
        buf.write("\u03d0\u03cf\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d2\3")
        buf.write("\2\2\2\u03d2\u03d3\7V\2\2\u03d3}\3\2\2\2\u03d4\u03d5\7")
        buf.write("\37\2\2\u03d5\u03db\5\u0082B\2\u03d6\u03d8\7C\2\2\u03d7")
        buf.write("\u03d9\5\u008aF\2\u03d8\u03d7\3\2\2\2\u03d8\u03d9\3\2")
        buf.write("\2\2\u03d9\u03da\3\2\2\2\u03da\u03dc\7V\2\2\u03db\u03d6")
        buf.write("\3\2\2\2\u03db\u03dc\3\2\2\2\u03dc\177\3\2\2\2\u03dd\u03de")
        buf.write("\t\f\2\2\u03de\u0081\3\2\2\2\u03df\u03f7\7\24\2\2\u03e0")
        buf.write("\u03f7\7\25\2\2\u03e1\u03f7\7\32\2\2\u03e2\u03f7\7\33")
        buf.write("\2\2\u03e3\u03f7\7i\2\2\u03e4\u03f7\7\61\2\2\u03e5\u03f7")
        buf.write("\7\66\2\2\u03e6\u03f7\7;\2\2\u03e7\u03f7\7<\2\2\u03e8")
        buf.write("\u03f7\7>\2\2\u03e9\u03f7\7=\2\2\u03ea\u03f7\7E\2\2\u03eb")
        buf.write("\u03f7\7K\2\2\u03ec\u03f7\7M\2\2\u03ed\u03f7\7N\2\2\u03ee")
        buf.write("\u03f7\7Q\2\2\u03ef\u03f7\7X\2\2\u03f0\u03f7\7m\2\2\u03f1")
        buf.write("\u03f7\7^\2\2\u03f2\u03f7\7n\2\2\u03f3\u03f7\7`\2\2\u03f4")
        buf.write("\u03f7\7b\2\2\u03f5\u03f7\5\u0080A\2\u03f6\u03df\3\2\2")
        buf.write("\2\u03f6\u03e0\3\2\2\2\u03f6\u03e1\3\2\2\2\u03f6\u03e2")
        buf.write("\3\2\2\2\u03f6\u03e3\3\2\2\2\u03f6\u03e4\3\2\2\2\u03f6")
        buf.write("\u03e5\3\2\2\2\u03f6\u03e6\3\2\2\2\u03f6\u03e7\3\2\2\2")
        buf.write("\u03f6\u03e8\3\2\2\2\u03f6\u03e9\3\2\2\2\u03f6\u03ea\3")
        buf.write("\2\2\2\u03f6\u03eb\3\2\2\2\u03f6\u03ec\3\2\2\2\u03f6\u03ed")
        buf.write("\3\2\2\2\u03f6\u03ee\3\2\2\2\u03f6\u03ef\3\2\2\2\u03f6")
        buf.write("\u03f0\3\2\2\2\u03f6\u03f1\3\2\2\2\u03f6\u03f2\3\2\2\2")
        buf.write("\u03f6\u03f3\3\2\2\2\u03f6\u03f4\3\2\2\2\u03f6\u03f5\3")
        buf.write("\2\2\2\u03f7\u0083\3\2\2\2\u03f8\u03fe\7\\\2\2\u03f9\u03fe")
        buf.write("\7v\2\2\u03fa\u03fe\7w\2\2\u03fb\u03fe\7z\2\2\u03fc\u03fe")
        buf.write("\5\u0082B\2\u03fd\u03f8\3\2\2\2\u03fd\u03f9\3\2\2\2\u03fd")
        buf.write("\u03fa\3\2\2\2\u03fd\u03fb\3\2\2\2\u03fd\u03fc\3\2\2\2")
        buf.write("\u03fe\u0085\3\2\2\2\u03ff\u0404\5z>\2\u0400\u0401\7\27")
        buf.write("\2\2\u0401\u0403\5z>\2\u0402\u0400\3\2\2\2\u0403\u0406")
        buf.write("\3\2\2\2\u0404\u0402\3\2\2\2\u0404\u0405\3\2\2\2\u0405")
        buf.write("\u0087\3\2\2\2\u0406\u0404\3\2\2\2\u0407\u0408\7\33\2")
        buf.write("\2\u0408\u0409\5\f\7\2\u0409\u040b\7C\2\2\u040a\u040c")
        buf.write("\5\u008aF\2\u040b\u040a\3\2\2\2\u040b\u040c\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d\u040e\7V\2\2\u040e\u0089\3\2\2\2")
        buf.write("\u040f\u0414\5z>\2\u0410\u0411\7\27\2\2\u0411\u0413\5")
        buf.write("z>\2\u0412\u0410\3\2\2\2\u0413\u0416\3\2\2\2\u0414\u0412")
        buf.write("\3\2\2\2\u0414\u0415\3\2\2\2\u0415\u008b\3\2\2\2\u0416")
        buf.write("\u0414\3\2\2\2\u0417\u0420\5\u008eH\2\u0418\u041a\7W\2")
        buf.write("\2\u0419\u0418\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u0419")
        buf.write("\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\3\2\2\2\u041d")
        buf.write("\u041f\5\u008eH\2\u041e\u0419\3\2\2\2\u041f\u0422\3\2")
        buf.write("\2\2\u0420\u041e\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u008d")
        buf.write("\3\2\2\2\u0422\u0420\3\2\2\2\u0423\u0424\7\63\2\2\u0424")
        buf.write("\u042a\5\u0080A\2\u0425\u0427\7C\2\2\u0426\u0428\5\u0090")
        buf.write("I\2\u0427\u0426\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429")
        buf.write("\3\2\2\2\u0429\u042b\7V\2\2\u042a\u0425\3\2\2\2\u042a")
        buf.write("\u042b\3\2\2\2\u042b\u042e\3\2\2\2\u042c\u042d\7U\2\2")
        buf.write("\u042d\u042f\5,\27\2\u042e\u042c\3\2\2\2\u042e\u042f\3")
        buf.write("\2\2\2\u042f\u0432\3\2\2\2\u0430\u0431\7\35\2\2\u0431")
        buf.write("\u0433\7s\2\2\u0432\u0430\3\2\2\2\u0432\u0433\3\2\2\2")
        buf.write("\u0433\u0437\3\2\2\2\u0434\u0436\7W\2\2\u0435\u0434\3")
        buf.write("\2\2\2\u0436\u0439\3\2\2\2\u0437\u0435\3\2\2\2\u0437\u0438")
        buf.write("\3\2\2\2\u0438\u043b\3\2\2\2\u0439\u0437\3\2\2\2\u043a")
        buf.write("\u043c\5V,\2\u043b\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c")
        buf.write("\u043d\3\2\2\2\u043d\u043e\7\64\2\2\u043e\u008f\3\2\2")
        buf.write("\2\u043f\u0444\5\u0092J\2\u0440\u0441\7\27\2\2\u0441\u0443")
        buf.write("\5\u0092J\2\u0442\u0440\3\2\2\2\u0443\u0446\3\2\2\2\u0444")
        buf.write("\u0442\3\2\2\2\u0444\u0445\3\2\2\2\u0445\u0448\3\2\2\2")
        buf.write("\u0446\u0444\3\2\2\2\u0447\u0449\7\27\2\2\u0448\u0447")
        buf.write("\3\2\2\2\u0448\u0449\3\2\2\2\u0449\u0091\3\2\2\2\u044a")
        buf.write("\u044d\7z\2\2\u044b\u044c\7\21\2\2\u044c\u044e\5,\27\2")
        buf.write("\u044d\u044b\3\2\2\2\u044d\u044e\3\2\2\2\u044e\u0093\3")
        buf.write("\2\2\2\u0096\u0097\u009e\u00a3\u00a9\u00ad\u00b2\u00ba")
        buf.write("\u00c1\u00c6\u00cb\u00cf\u00d4\u00d8\u00dd\u00e5\u00ea")
        buf.write("\u00f2\u00f8\u00fa\u0107\u0114\u011f\u0125\u012e\u0139")
        buf.write("\u013f\u0144\u0147\u014d\u0151\u0153\u0159\u015d\u015f")
        buf.write("\u0165\u016a\u0170\u017b\u0180\u0186\u018b\u0190\u0196")
        buf.write("\u019b\u019e\u01a5\u01a9\u01af\u01b3\u01bc\u01c1\u01c6")
        buf.write("\u01cd\u01d3\u01d6\u01d8\u01e1\u01e5\u01e9\u01f4\u01fa")
        buf.write("\u01ff\u0207\u020b\u021f\u0222\u0226\u022e\u0235\u0239")
        buf.write("\u0240\u0249\u024d\u0251\u0257\u025c\u0262\u0269\u026d")
        buf.write("\u0276\u0281\u0285\u028d\u0292\u0298\u02a9\u02b3\u02b8")
        buf.write("\u02bc\u02c5\u02c9\u02d7\u02db\u02e1\u02e5\u02e7\u02f3")
        buf.write("\u02f8\u02fc\u0305\u0309\u0311\u0315\u031f\u0323\u0326")
        buf.write("\u032e\u0334\u0339\u033f\u0343\u0349\u034d\u0355\u0359")
        buf.write("\u035c\u0361\u036a\u0370\u0376\u037c\u0380\u0392\u039f")
        buf.write("\u03a5\u03b3\u03be\u03c8\u03ca\u03d0\u03d8\u03db\u03f6")
        buf.write("\u03fd\u0404\u040b\u0414\u041b\u0420\u0427\u042a\u042e")
        buf.write("\u0432\u0437\u043b\u0444\u0448\u044d")
        return buf.getvalue()


class PeopleCodeParser ( Parser ):

    grammarFileName = "PeopleCodeParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'@'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':'", "','", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'/'", "'.'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'='", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'**'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'>='", "<INVALID>", "<INVALID>", "'>'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'['", "'<='", "<INVALID>", 
                     "<INVALID>", "'('", "'<'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "']'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "')'", "';'", "<INVALID>", 
                     "'*'", "<INVALID>", "'-'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'|'" ]

    symbolicNames = [ "<INVALID>", "BLOCK_COMMENT_SLASH", "API_COMMENT", 
                      "WS", "BLOCK_COMMENT_NEST", "BLOCK_COMMENT_PLUS", 
                      "LINE_COMMENT", "DIR_IF", "DIR_ELSE", "DIR_END_IF", 
                      "ABSTRACT", "ADD", "ALIAS", "AND", "ARRAY", "AS", 
                      "AT", "BREAK", "CATCH", "CLASS", "COLON", "COMMA", 
                      "COMPONENT", "CONSTANT", "CONTINUE", "CREATE", "DECLARE", 
                      "DOC", "DIV", "DOT", "ELSE", "END_CLASS", "END_EVALUATE", 
                      "END_FOR", "END_GET", "END_IF", "END_INTERFACE", "END_METHOD", 
                      "END_SET", "END_TRY", "END_WHILE", "EQ", "ERROR", 
                      "EVALUATE", "EXCEPTION", "EXIT", "EXP", "EXTENDS", 
                      "FOR", "FUNCTION", "END_FUNCTION", "GE", "GET", "GLOBAL", 
                      "GT", "IF", "IMPLEMENTS", "IMPORT", "INSTANCE", "INTERFACE", 
                      "INTEGER", "LBRACKET", "LE", "LIBRARY", "LOCAL", "LPAREN", 
                      "LT", "METHOD", "NEQ", "NOT", "NULL", "OF", "OR", 
                      "OUT", "PEOPLECODE", "PRIVATE", "PROPERTY", "PROTECTED", 
                      "RBRACKET", "READONLY", "REF", "REPEAT", "RETURN", 
                      "RETURNS", "RPAREN", "SEMI", "SET", "STAR", "STEP", 
                      "SUBTR", "SUPER", "THEN", "THROW", "TO", "TRY", "UNTIL", 
                      "VALUE", "WARNING", "WHEN", "WHEN_OTHER", "WHILE", 
                      "ANY", "BOOLEAN", "DATE", "DATETIME", "FLOAT", "NUMBER", 
                      "STRING", "TIME", "PIPE", "METADATA", "DecimalLiteral", 
                      "IntegerLiteral", "StringLiteral", "BooleanLiteral", 
                      "RecordEvent", "SYSTEM_VARIABLE", "SYSTEM_CONSTANT", 
                      "GENERIC_ID_LIMITED", "GENERIC_ID", "USER_VARIABLE", 
                      "DIR_WS", "DIR_THEN", "DIR_ATOM" ]

    RULE_appClass = 0
    RULE_program = 1
    RULE_importDeclaration = 2
    RULE_appPackageAll = 3
    RULE_appPackagePath = 4
    RULE_appClassPath = 5
    RULE_classDeclaration = 6
    RULE_interfaceDeclaration = 7
    RULE_superclass = 8
    RULE_classHeader = 9
    RULE_nonPrivateHeader = 10
    RULE_publicHeader = 11
    RULE_protectedHeader = 12
    RULE_privateHeader = 13
    RULE_nonPrivateMember = 14
    RULE_privateMember = 15
    RULE_methodHeader = 16
    RULE_methodArguments = 17
    RULE_methodArgument = 18
    RULE_simpleType = 19
    RULE_builtInType = 20
    RULE_typeT = 21
    RULE_propertyDeclaration = 22
    RULE_instanceDeclaration = 23
    RULE_constantDeclaration = 24
    RULE_literal = 25
    RULE_classExternalDeclaration = 26
    RULE_programPreambles = 27
    RULE_programPreamble = 28
    RULE_functionDeclaration = 29
    RULE_functionDeclarationPCode = 30
    RULE_recordField = 31
    RULE_functionDeclarationDLL = 32
    RULE_dllArguments = 33
    RULE_dllArgument = 34
    RULE_dllReturnType = 35
    RULE_nonLocalVarDeclaration = 36
    RULE_classBody = 37
    RULE_classMember = 38
    RULE_method = 39
    RULE_getter = 40
    RULE_setter = 41
    RULE_statements = 42
    RULE_statementBlock = 43
    RULE_statement = 44
    RULE_localVariableDeclaration = 45
    RULE_localVariableDefinition = 46
    RULE_localVariableDeclAssignment = 47
    RULE_ifStatement = 48
    RULE_forStatement = 49
    RULE_whileStatement = 50
    RULE_repeatStatement = 51
    RULE_evaluateStatement = 52
    RULE_whenClauses = 53
    RULE_whenClause = 54
    RULE_whenOther = 55
    RULE_comparisonOperator = 56
    RULE_tryCatchBlock = 57
    RULE_catchClauses = 58
    RULE_catchClause = 59
    RULE_expression = 60
    RULE_simpleFunctionCall = 61
    RULE_dotAccess = 62
    RULE_allowableFunctionName = 63
    RULE_genericID = 64
    RULE_ident = 65
    RULE_expressionList = 66
    RULE_objectCreate = 67
    RULE_functionCallArguments = 68
    RULE_functionDefinitions = 69
    RULE_functionDefinition = 70
    RULE_functionArguments = 71
    RULE_functionArgument = 72

    ruleNames =  [ "appClass", "program", "importDeclaration", "appPackageAll", 
                   "appPackagePath", "appClassPath", "classDeclaration", 
                   "interfaceDeclaration", "superclass", "classHeader", 
                   "nonPrivateHeader", "publicHeader", "protectedHeader", 
                   "privateHeader", "nonPrivateMember", "privateMember", 
                   "methodHeader", "methodArguments", "methodArgument", 
                   "simpleType", "builtInType", "typeT", "propertyDeclaration", 
                   "instanceDeclaration", "constantDeclaration", "literal", 
                   "classExternalDeclaration", "programPreambles", "programPreamble", 
                   "functionDeclaration", "functionDeclarationPCode", "recordField", 
                   "functionDeclarationDLL", "dllArguments", "dllArgument", 
                   "dllReturnType", "nonLocalVarDeclaration", "classBody", 
                   "classMember", "method", "getter", "setter", "statements", 
                   "statementBlock", "statement", "localVariableDeclaration", 
                   "localVariableDefinition", "localVariableDeclAssignment", 
                   "ifStatement", "forStatement", "whileStatement", "repeatStatement", 
                   "evaluateStatement", "whenClauses", "whenClause", "whenOther", 
                   "comparisonOperator", "tryCatchBlock", "catchClauses", 
                   "catchClause", "expression", "simpleFunctionCall", "dotAccess", 
                   "allowableFunctionName", "genericID", "ident", "expressionList", 
                   "objectCreate", "functionCallArguments", "functionDefinitions", 
                   "functionDefinition", "functionArguments", "functionArgument" ]

    EOF = Token.EOF
    BLOCK_COMMENT_SLASH=1
    API_COMMENT=2
    WS=3
    BLOCK_COMMENT_NEST=4
    BLOCK_COMMENT_PLUS=5
    LINE_COMMENT=6
    DIR_IF=7
    DIR_ELSE=8
    DIR_END_IF=9
    ABSTRACT=10
    ADD=11
    ALIAS=12
    AND=13
    ARRAY=14
    AS=15
    AT=16
    BREAK=17
    CATCH=18
    CLASS=19
    COLON=20
    COMMA=21
    COMPONENT=22
    CONSTANT=23
    CONTINUE=24
    CREATE=25
    DECLARE=26
    DOC=27
    DIV=28
    DOT=29
    ELSE=30
    END_CLASS=31
    END_EVALUATE=32
    END_FOR=33
    END_GET=34
    END_IF=35
    END_INTERFACE=36
    END_METHOD=37
    END_SET=38
    END_TRY=39
    END_WHILE=40
    EQ=41
    ERROR=42
    EVALUATE=43
    EXCEPTION=44
    EXIT=45
    EXP=46
    EXTENDS=47
    FOR=48
    FUNCTION=49
    END_FUNCTION=50
    GE=51
    GET=52
    GLOBAL=53
    GT=54
    IF=55
    IMPLEMENTS=56
    IMPORT=57
    INSTANCE=58
    INTERFACE=59
    INTEGER=60
    LBRACKET=61
    LE=62
    LIBRARY=63
    LOCAL=64
    LPAREN=65
    LT=66
    METHOD=67
    NEQ=68
    NOT=69
    NULL=70
    OF=71
    OR=72
    OUT=73
    PEOPLECODE=74
    PRIVATE=75
    PROPERTY=76
    PROTECTED=77
    RBRACKET=78
    READONLY=79
    REF=80
    REPEAT=81
    RETURN=82
    RETURNS=83
    RPAREN=84
    SEMI=85
    SET=86
    STAR=87
    STEP=88
    SUBTR=89
    SUPER=90
    THEN=91
    THROW=92
    TO=93
    TRY=94
    UNTIL=95
    VALUE=96
    WARNING=97
    WHEN=98
    WHEN_OTHER=99
    WHILE=100
    ANY=101
    BOOLEAN=102
    DATE=103
    DATETIME=104
    FLOAT=105
    NUMBER=106
    STRING=107
    TIME=108
    PIPE=109
    METADATA=110
    DecimalLiteral=111
    IntegerLiteral=112
    StringLiteral=113
    BooleanLiteral=114
    RecordEvent=115
    SYSTEM_VARIABLE=116
    SYSTEM_CONSTANT=117
    GENERIC_ID_LIMITED=118
    GENERIC_ID=119
    USER_VARIABLE=120
    DIR_WS=121
    DIR_THEN=122
    DIR_ATOM=123

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class AppClassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_appClass

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AppClassProgramContext(AppClassContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.AppClassContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassDeclarationContext,0)

        def EOF(self):
            return self.getToken(PeopleCodeParser.EOF, 0)
        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ImportDeclarationContext,i)

        def classExternalDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ClassExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ClassExternalDeclarationContext,i)

        def classBody(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassBodyContext,0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppClassProgram" ):
                listener.enterAppClassProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppClassProgram" ):
                listener.exitAppClassProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppClassProgram" ):
                return visitor.visitAppClassProgram(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceProgramContext(AppClassContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.AppClassContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def interfaceDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.InterfaceDeclarationContext,0)

        def EOF(self):
            return self.getToken(PeopleCodeParser.EOF, 0)
        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ImportDeclarationContext,i)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceProgram" ):
                listener.enterInterfaceProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceProgram" ):
                listener.exitInterfaceProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceProgram" ):
                return visitor.visitInterfaceProgram(self)
            else:
                return visitor.visitChildren(self)



    def appClass(self):

        localctx = PeopleCodeParser.AppClassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_appClass)
        self._la = 0 # Token type
        try:
            self.state = 196
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.AppClassProgramContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.IMPORT:
                    self.state = 146
                    self.importDeclaration()
                    self.state = 151
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 152
                self.classDeclaration()
                self.state = 161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 154 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 153
                            self.match(PeopleCodeParser.SEMI)
                            self.state = 156 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not (_la==PeopleCodeParser.SEMI):
                                break

                        self.state = 158
                        self.classExternalDeclaration() 
                    self.state = 163
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

                self.state = 171
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PeopleCodeParser.SEMI:
                        self.state = 164
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 169
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 170
                    self.classBody()


                self.state = 176
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 173
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 178
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 179
                self.match(PeopleCodeParser.EOF)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.InterfaceProgramContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 184
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.IMPORT:
                    self.state = 181
                    self.importDeclaration()
                    self.state = 186
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 187
                self.interfaceDeclaration()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 188
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 194
                self.match(PeopleCodeParser.EOF)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PeopleCodeParser.EOF, 0)

        def importDeclaration(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ImportDeclarationContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ImportDeclarationContext,i)


        def programPreambles(self):
            return self.getTypedRuleContext(PeopleCodeParser.ProgramPreamblesContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_program

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgram" ):
                listener.enterProgram(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgram" ):
                listener.exitProgram(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgram" ):
                return visitor.visitProgram(self)
            else:
                return visitor.visitChildren(self)




    def program(self):

        localctx = PeopleCodeParser.ProgramContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_program)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 198
                    self.importDeclaration() 
                self.state = 203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

            self.state = 205
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.state = 204
                self.programPreambles()


            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 207
                    self.match(PeopleCodeParser.SEMI) 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 213
                self.statements()


            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 216
                self.match(PeopleCodeParser.SEMI)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(PeopleCodeParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ImportDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IMPORT(self):
            return self.getToken(PeopleCodeParser.IMPORT, 0)

        def appPackageAll(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppPackageAllContext,0)


        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_importDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImportDeclaration" ):
                listener.enterImportDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImportDeclaration" ):
                listener.exitImportDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImportDeclaration" ):
                return visitor.visitImportDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def importDeclaration(self):

        localctx = PeopleCodeParser.ImportDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_importDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(PeopleCodeParser.IMPORT)
            self.state = 227
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.state = 225
                self.appPackageAll()
                pass

            elif la_ == 2:
                self.state = 226
                self.appClassPath()
                pass


            self.state = 230 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 229
                    self.match(PeopleCodeParser.SEMI)

                else:
                    raise NoViableAltException(self)
                self.state = 232 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppPackageAllContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def appPackagePath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppPackagePathContext,0)


        def COLON(self):
            return self.getToken(PeopleCodeParser.COLON, 0)

        def STAR(self):
            return self.getToken(PeopleCodeParser.STAR, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_appPackageAll

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppPackageAll" ):
                listener.enterAppPackageAll(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppPackageAll" ):
                listener.exitAppPackageAll(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppPackageAll" ):
                return visitor.visitAppPackageAll(self)
            else:
                return visitor.visitChildren(self)




    def appPackageAll(self):

        localctx = PeopleCodeParser.AppPackageAllContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_appPackageAll)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.appPackagePath()
            self.state = 235
            self.match(PeopleCodeParser.COLON)
            self.state = 236
            self.match(PeopleCodeParser.STAR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppPackagePathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METADATA(self):
            return self.getToken(PeopleCodeParser.METADATA, 0)

        def genericID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.GenericIDContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COLON)
            else:
                return self.getToken(PeopleCodeParser.COLON, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_appPackagePath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppPackagePath" ):
                listener.enterAppPackagePath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppPackagePath" ):
                listener.exitAppPackagePath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppPackagePath" ):
                return visitor.visitAppPackagePath(self)
            else:
                return visitor.visitChildren(self)




    def appPackagePath(self):

        localctx = PeopleCodeParser.AppPackagePathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_appPackagePath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.METADATA]:
                self.state = 238
                self.match(PeopleCodeParser.METADATA)
                pass
            elif token in [PeopleCodeParser.ARRAY, PeopleCodeParser.CATCH, PeopleCodeParser.CLASS, PeopleCodeParser.COMPONENT, PeopleCodeParser.CONSTANT, PeopleCodeParser.CONTINUE, PeopleCodeParser.CREATE, PeopleCodeParser.DOC, PeopleCodeParser.EXCEPTION, PeopleCodeParser.EXTENDS, PeopleCodeParser.GET, PeopleCodeParser.IMPORT, PeopleCodeParser.INSTANCE, PeopleCodeParser.INTERFACE, PeopleCodeParser.INTEGER, PeopleCodeParser.METHOD, PeopleCodeParser.OF, PeopleCodeParser.OUT, PeopleCodeParser.PRIVATE, PeopleCodeParser.PROPERTY, PeopleCodeParser.READONLY, PeopleCodeParser.SET, PeopleCodeParser.STEP, PeopleCodeParser.THROW, PeopleCodeParser.TRY, PeopleCodeParser.VALUE, PeopleCodeParser.ANY, PeopleCodeParser.BOOLEAN, PeopleCodeParser.DATE, PeopleCodeParser.DATETIME, PeopleCodeParser.FLOAT, PeopleCodeParser.NUMBER, PeopleCodeParser.STRING, PeopleCodeParser.TIME, PeopleCodeParser.RecordEvent, PeopleCodeParser.GENERIC_ID_LIMITED, PeopleCodeParser.GENERIC_ID]:
                self.state = 239
                self.genericID()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 248
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 242
                self.match(PeopleCodeParser.COLON)
                self.state = 243
                self.genericID()
                self.state = 246
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                if la_ == 1:
                    self.state = 244
                    self.match(PeopleCodeParser.COLON)
                    self.state = 245
                    self.genericID()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AppClassPathContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def appPackagePath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppPackagePathContext,0)


        def COLON(self):
            return self.getToken(PeopleCodeParser.COLON, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_appClassPath

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppClassPath" ):
                listener.enterAppClassPath(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppClassPath" ):
                listener.exitAppClassPath(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppClassPath" ):
                return visitor.visitAppClassPath(self)
            else:
                return visitor.visitChildren(self)




    def appClassPath(self):

        localctx = PeopleCodeParser.AppClassPathContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_appClassPath)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.appPackagePath()
            self.state = 251
            self.match(PeopleCodeParser.COLON)
            self.state = 252
            self.genericID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_classDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ClassDeclarationPlainContext(ClassDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLASS(self):
            return self.getToken(PeopleCodeParser.CLASS, 0)
        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def classHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassHeaderContext,0)

        def END_CLASS(self):
            return self.getToken(PeopleCodeParser.END_CLASS, 0)
        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclarationPlain" ):
                listener.enterClassDeclarationPlain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclarationPlain" ):
                listener.exitClassDeclarationPlain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclarationPlain" ):
                return visitor.visitClassDeclarationPlain(self)
            else:
                return visitor.visitChildren(self)


    class ClassDeclarationImplementationContext(ClassDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLASS(self):
            return self.getToken(PeopleCodeParser.CLASS, 0)
        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def IMPLEMENTS(self):
            return self.getToken(PeopleCodeParser.IMPLEMENTS, 0)
        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)

        def classHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassHeaderContext,0)

        def END_CLASS(self):
            return self.getToken(PeopleCodeParser.END_CLASS, 0)
        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclarationImplementation" ):
                listener.enterClassDeclarationImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclarationImplementation" ):
                listener.exitClassDeclarationImplementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclarationImplementation" ):
                return visitor.visitClassDeclarationImplementation(self)
            else:
                return visitor.visitChildren(self)


    class ClassDeclarationExtensionContext(ClassDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLASS(self):
            return self.getToken(PeopleCodeParser.CLASS, 0)
        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def EXTENDS(self):
            return self.getToken(PeopleCodeParser.EXTENDS, 0)
        def superclass(self):
            return self.getTypedRuleContext(PeopleCodeParser.SuperclassContext,0)

        def classHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassHeaderContext,0)

        def END_CLASS(self):
            return self.getToken(PeopleCodeParser.END_CLASS, 0)
        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassDeclarationExtension" ):
                listener.enterClassDeclarationExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassDeclarationExtension" ):
                listener.exitClassDeclarationExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassDeclarationExtension" ):
                return visitor.visitClassDeclarationExtension(self)
            else:
                return visitor.visitChildren(self)



    def classDeclaration(self):

        localctx = PeopleCodeParser.ClassDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_classDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,22,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.ClassDeclarationExtensionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 254
                self.match(PeopleCodeParser.CLASS)
                self.state = 255
                self.genericID()
                self.state = 256
                self.match(PeopleCodeParser.EXTENDS)
                self.state = 257
                self.superclass()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 258
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 264
                self.classHeader()
                self.state = 265
                self.match(PeopleCodeParser.END_CLASS)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.ClassDeclarationImplementationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 267
                self.match(PeopleCodeParser.CLASS)
                self.state = 268
                self.genericID()
                self.state = 269
                self.match(PeopleCodeParser.IMPLEMENTS)
                self.state = 270
                self.appClassPath()
                self.state = 274
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 271
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 277
                self.classHeader()
                self.state = 278
                self.match(PeopleCodeParser.END_CLASS)
                pass

            elif la_ == 3:
                localctx = PeopleCodeParser.ClassDeclarationPlainContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 280
                self.match(PeopleCodeParser.CLASS)
                self.state = 281
                self.genericID()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 282
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self.classHeader()
                self.state = 289
                self.match(PeopleCodeParser.END_CLASS)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InterfaceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_interfaceDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InterfaceDeclarationExtensionContext(InterfaceDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.InterfaceDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERFACE(self):
            return self.getToken(PeopleCodeParser.INTERFACE, 0)
        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def EXTENDS(self):
            return self.getToken(PeopleCodeParser.EXTENDS, 0)
        def superclass(self):
            return self.getTypedRuleContext(PeopleCodeParser.SuperclassContext,0)

        def classHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassHeaderContext,0)

        def END_INTERFACE(self):
            return self.getToken(PeopleCodeParser.END_INTERFACE, 0)
        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclarationExtension" ):
                listener.enterInterfaceDeclarationExtension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclarationExtension" ):
                listener.exitInterfaceDeclarationExtension(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclarationExtension" ):
                return visitor.visitInterfaceDeclarationExtension(self)
            else:
                return visitor.visitChildren(self)


    class InterfaceDeclarationPlainContext(InterfaceDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.InterfaceDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERFACE(self):
            return self.getToken(PeopleCodeParser.INTERFACE, 0)
        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def classHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ClassHeaderContext,0)

        def END_INTERFACE(self):
            return self.getToken(PeopleCodeParser.END_INTERFACE, 0)
        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInterfaceDeclarationPlain" ):
                listener.enterInterfaceDeclarationPlain(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInterfaceDeclarationPlain" ):
                listener.exitInterfaceDeclarationPlain(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInterfaceDeclarationPlain" ):
                return visitor.visitInterfaceDeclarationPlain(self)
            else:
                return visitor.visitChildren(self)



    def interfaceDeclaration(self):

        localctx = PeopleCodeParser.InterfaceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_interfaceDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 317
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.InterfaceDeclarationExtensionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 293
                self.match(PeopleCodeParser.INTERFACE)
                self.state = 294
                self.genericID()
                self.state = 295
                self.match(PeopleCodeParser.EXTENDS)
                self.state = 296
                self.superclass()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 297
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self.classHeader()
                self.state = 304
                self.match(PeopleCodeParser.END_INTERFACE)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.InterfaceDeclarationPlainContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 306
                self.match(PeopleCodeParser.INTERFACE)
                self.state = 307
                self.genericID()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 308
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 313
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 314
                self.classHeader()
                self.state = 315
                self.match(PeopleCodeParser.END_INTERFACE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuperclassContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_superclass

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AppClassSuperClassContext(SuperclassContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.SuperclassContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppClassSuperClass" ):
                listener.enterAppClassSuperClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppClassSuperClass" ):
                listener.exitAppClassSuperClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppClassSuperClass" ):
                return visitor.visitAppClassSuperClass(self)
            else:
                return visitor.visitChildren(self)


    class ExceptionSuperClassContext(SuperclassContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.SuperclassContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCEPTION(self):
            return self.getToken(PeopleCodeParser.EXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionSuperClass" ):
                listener.enterExceptionSuperClass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionSuperClass" ):
                listener.exitExceptionSuperClass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionSuperClass" ):
                return visitor.visitExceptionSuperClass(self)
            else:
                return visitor.visitChildren(self)


    class SimpleTypeSuperclassContext(SuperclassContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.SuperclassContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleType(self):
            return self.getTypedRuleContext(PeopleCodeParser.SimpleTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeSuperclass" ):
                listener.enterSimpleTypeSuperclass(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeSuperclass" ):
                listener.exitSimpleTypeSuperclass(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTypeSuperclass" ):
                return visitor.visitSimpleTypeSuperclass(self)
            else:
                return visitor.visitChildren(self)



    def superclass(self):

        localctx = PeopleCodeParser.SuperclassContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_superclass)
        try:
            self.state = 322
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.ExceptionSuperClassContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.match(PeopleCodeParser.EXCEPTION)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.AppClassSuperClassContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 320
                self.appClassPath()
                pass

            elif la_ == 3:
                localctx = PeopleCodeParser.SimpleTypeSuperclassContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 321
                self.simpleType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def publicHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.PublicHeaderContext,0)


        def PROTECTED(self):
            return self.getToken(PeopleCodeParser.PROTECTED, 0)

        def PRIVATE(self):
            return self.getToken(PeopleCodeParser.PRIVATE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def protectedHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.ProtectedHeaderContext,0)


        def privateHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.PrivateHeaderContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_classHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassHeader" ):
                listener.enterClassHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassHeader" ):
                listener.exitClassHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassHeader" ):
                return visitor.visitClassHeader(self)
            else:
                return visitor.visitChildren(self)




    def classHeader(self):

        localctx = PeopleCodeParser.ClassHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_classHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.METHOD or _la==PeopleCodeParser.PROPERTY:
                self.state = 324
                self.publicHeader()


            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.PROTECTED:
                self.state = 327
                self.match(PeopleCodeParser.PROTECTED)
                self.state = 331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 328
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.METHOD or _la==PeopleCodeParser.PROPERTY:
                    self.state = 334
                    self.protectedHeader()




            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.PRIVATE:
                self.state = 339
                self.match(PeopleCodeParser.PRIVATE)
                self.state = 343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 340
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 345
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 23)) & ~0x3f) == 0 and ((1 << (_la - 23)) & ((1 << (PeopleCodeParser.CONSTANT - 23)) | (1 << (PeopleCodeParser.INSTANCE - 23)) | (1 << (PeopleCodeParser.METHOD - 23)))) != 0):
                    self.state = 346
                    self.privateHeader()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonPrivateHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonPrivateMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.NonPrivateMemberContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.NonPrivateMemberContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_nonPrivateHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonPrivateHeader" ):
                listener.enterNonPrivateHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonPrivateHeader" ):
                listener.exitNonPrivateHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonPrivateHeader" ):
                return visitor.visitNonPrivateHeader(self)
            else:
                return visitor.visitChildren(self)




    def nonPrivateHeader(self):

        localctx = PeopleCodeParser.NonPrivateHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_nonPrivateHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.nonPrivateMember()
            self.state = 360
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,35,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 353 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 352
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 355 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PeopleCodeParser.SEMI):
                            break

                    self.state = 357
                    self.nonPrivateMember() 
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,35,self._ctx)

            self.state = 366
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 363
                self.match(PeopleCodeParser.SEMI)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PublicHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonPrivateHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.NonPrivateHeaderContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_publicHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPublicHeader" ):
                listener.enterPublicHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPublicHeader" ):
                listener.exitPublicHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPublicHeader" ):
                return visitor.visitPublicHeader(self)
            else:
                return visitor.visitChildren(self)




    def publicHeader(self):

        localctx = PeopleCodeParser.PublicHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_publicHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.nonPrivateHeader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProtectedHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nonPrivateHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.NonPrivateHeaderContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_protectedHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProtectedHeader" ):
                listener.enterProtectedHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProtectedHeader" ):
                listener.exitProtectedHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProtectedHeader" ):
                return visitor.visitProtectedHeader(self)
            else:
                return visitor.visitChildren(self)




    def protectedHeader(self):

        localctx = PeopleCodeParser.ProtectedHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_protectedHeader)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 371
            self.nonPrivateHeader()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privateMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.PrivateMemberContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.PrivateMemberContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_privateHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateHeader" ):
                listener.enterPrivateHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateHeader" ):
                listener.exitPrivateHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateHeader" ):
                return visitor.visitPrivateHeader(self)
            else:
                return visitor.visitChildren(self)




    def privateHeader(self):

        localctx = PeopleCodeParser.PrivateHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_privateHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 373
            self.privateMember()
            self.state = 382
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,38,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 375 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 374
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 377 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PeopleCodeParser.SEMI):
                            break

                    self.state = 379
                    self.privateMember() 
                self.state = 384
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,38,self._ctx)

            self.state = 388
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 385
                self.match(PeopleCodeParser.SEMI)
                self.state = 390
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonPrivateMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_nonPrivateMember

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class NonPrivateMethodHeaderContext(NonPrivateMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.NonPrivateMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.MethodHeaderContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonPrivateMethodHeader" ):
                listener.enterNonPrivateMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonPrivateMethodHeader" ):
                listener.exitNonPrivateMethodHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonPrivateMethodHeader" ):
                return visitor.visitNonPrivateMethodHeader(self)
            else:
                return visitor.visitChildren(self)


    class NonPrivatePropertyContext(NonPrivateMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.NonPrivateMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def propertyDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.PropertyDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonPrivateProperty" ):
                listener.enterNonPrivateProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonPrivateProperty" ):
                listener.exitNonPrivateProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonPrivateProperty" ):
                return visitor.visitNonPrivateProperty(self)
            else:
                return visitor.visitChildren(self)



    def nonPrivateMember(self):

        localctx = PeopleCodeParser.NonPrivateMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_nonPrivateMember)
        try:
            self.state = 393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.METHOD]:
                localctx = PeopleCodeParser.NonPrivateMethodHeaderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 391
                self.methodHeader()
                pass
            elif token in [PeopleCodeParser.PROPERTY]:
                localctx = PeopleCodeParser.NonPrivatePropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 392
                self.propertyDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivateMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_privateMember

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PrivateConstantContext(PrivateMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.PrivateMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constantDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.ConstantDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateConstant" ):
                listener.enterPrivateConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateConstant" ):
                listener.exitPrivateConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateConstant" ):
                return visitor.visitPrivateConstant(self)
            else:
                return visitor.visitChildren(self)


    class PrivatePropertyContext(PrivateMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.PrivateMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def instanceDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.InstanceDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateProperty" ):
                listener.enterPrivateProperty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateProperty" ):
                listener.exitPrivateProperty(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateProperty" ):
                return visitor.visitPrivateProperty(self)
            else:
                return visitor.visitChildren(self)


    class PrivateMethodHeaderContext(PrivateMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.PrivateMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def methodHeader(self):
            return self.getTypedRuleContext(PeopleCodeParser.MethodHeaderContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivateMethodHeader" ):
                listener.enterPrivateMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivateMethodHeader" ):
                listener.exitPrivateMethodHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrivateMethodHeader" ):
                return visitor.visitPrivateMethodHeader(self)
            else:
                return visitor.visitChildren(self)



    def privateMember(self):

        localctx = PeopleCodeParser.PrivateMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_privateMember)
        try:
            self.state = 398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.METHOD]:
                localctx = PeopleCodeParser.PrivateMethodHeaderContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 395
                self.methodHeader()
                pass
            elif token in [PeopleCodeParser.INSTANCE]:
                localctx = PeopleCodeParser.PrivatePropertyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 396
                self.instanceDeclaration()
                pass
            elif token in [PeopleCodeParser.CONSTANT]:
                localctx = PeopleCodeParser.PrivateConstantContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 397
                self.constantDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodHeaderContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(PeopleCodeParser.METHOD, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def methodArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.MethodArgumentsContext,0)


        def RETURNS(self):
            return self.getToken(PeopleCodeParser.RETURNS, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def ABSTRACT(self):
            return self.getToken(PeopleCodeParser.ABSTRACT, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_methodHeader

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodHeader" ):
                listener.enterMethodHeader(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodHeader" ):
                listener.exitMethodHeader(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodHeader" ):
                return visitor.visitMethodHeader(self)
            else:
                return visitor.visitChildren(self)




    def methodHeader(self):

        localctx = PeopleCodeParser.MethodHeaderContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_methodHeader)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(PeopleCodeParser.METHOD)
            self.state = 401
            self.genericID()
            self.state = 402
            self.match(PeopleCodeParser.LPAREN)
            self.state = 404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.USER_VARIABLE:
                self.state = 403
                self.methodArguments()


            self.state = 406
            self.match(PeopleCodeParser.RPAREN)
            self.state = 409
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.RETURNS:
                self.state = 407
                self.match(PeopleCodeParser.RETURNS)
                self.state = 408
                self.typeT()


            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.ABSTRACT:
                self.state = 411
                self.match(PeopleCodeParser.ABSTRACT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def methodArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.MethodArgumentContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.MethodArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_methodArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodArguments" ):
                listener.enterMethodArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodArguments" ):
                listener.exitMethodArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodArguments" ):
                return visitor.visitMethodArguments(self)
            else:
                return visitor.visitChildren(self)




    def methodArguments(self):

        localctx = PeopleCodeParser.MethodArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_methodArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 414
            self.methodArgument()
            self.state = 419
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,45,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 415
                    self.match(PeopleCodeParser.COMMA)
                    self.state = 416
                    self.methodArgument() 
                self.state = 421
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,45,self._ctx)

            self.state = 423
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.COMMA:
                self.state = 422
                self.match(PeopleCodeParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def AS(self):
            return self.getToken(PeopleCodeParser.AS, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def OUT(self):
            return self.getToken(PeopleCodeParser.OUT, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_methodArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodArgument" ):
                listener.enterMethodArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodArgument" ):
                listener.exitMethodArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodArgument" ):
                return visitor.visitMethodArgument(self)
            else:
                return visitor.visitChildren(self)




    def methodArgument(self):

        localctx = PeopleCodeParser.MethodArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_methodArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 426
            self.match(PeopleCodeParser.AS)
            self.state = 427
            self.typeT()
            self.state = 429
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.OUT:
                self.state = 428
                self.match(PeopleCodeParser.OUT)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_simpleType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleBuiltInTypeContext(SimpleTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.SimpleTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def builtInType(self):
            return self.getTypedRuleContext(PeopleCodeParser.BuiltInTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleBuiltInType" ):
                listener.enterSimpleBuiltInType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleBuiltInType" ):
                listener.exitSimpleBuiltInType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleBuiltInType" ):
                return visitor.visitSimpleBuiltInType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleGenericIDContext(SimpleTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.SimpleTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GENERIC_ID_LIMITED(self):
            return self.getToken(PeopleCodeParser.GENERIC_ID_LIMITED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleGenericID" ):
                listener.enterSimpleGenericID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleGenericID" ):
                listener.exitSimpleGenericID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleGenericID" ):
                return visitor.visitSimpleGenericID(self)
            else:
                return visitor.visitChildren(self)



    def simpleType(self):

        localctx = PeopleCodeParser.SimpleTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_simpleType)
        try:
            self.state = 433
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.INTEGER, PeopleCodeParser.ANY, PeopleCodeParser.BOOLEAN, PeopleCodeParser.DATE, PeopleCodeParser.DATETIME, PeopleCodeParser.FLOAT, PeopleCodeParser.NUMBER, PeopleCodeParser.STRING, PeopleCodeParser.TIME]:
                localctx = PeopleCodeParser.SimpleBuiltInTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 431
                self.builtInType()
                pass
            elif token in [PeopleCodeParser.GENERIC_ID_LIMITED]:
                localctx = PeopleCodeParser.SimpleGenericIDContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(PeopleCodeParser.GENERIC_ID_LIMITED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BuiltInTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(PeopleCodeParser.ANY, 0)

        def BOOLEAN(self):
            return self.getToken(PeopleCodeParser.BOOLEAN, 0)

        def DATE(self):
            return self.getToken(PeopleCodeParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(PeopleCodeParser.DATETIME, 0)

        def FLOAT(self):
            return self.getToken(PeopleCodeParser.FLOAT, 0)

        def INTEGER(self):
            return self.getToken(PeopleCodeParser.INTEGER, 0)

        def NUMBER(self):
            return self.getToken(PeopleCodeParser.NUMBER, 0)

        def STRING(self):
            return self.getToken(PeopleCodeParser.STRING, 0)

        def TIME(self):
            return self.getToken(PeopleCodeParser.TIME, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_builtInType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBuiltInType" ):
                listener.enterBuiltInType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBuiltInType" ):
                listener.exitBuiltInType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBuiltInType" ):
                return visitor.visitBuiltInType(self)
            else:
                return visitor.visitChildren(self)




    def builtInType(self):

        localctx = PeopleCodeParser.BuiltInTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_builtInType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            _la = self._input.LA(1)
            if not(((((_la - 60)) & ~0x3f) == 0 and ((1 << (_la - 60)) & ((1 << (PeopleCodeParser.INTEGER - 60)) | (1 << (PeopleCodeParser.ANY - 60)) | (1 << (PeopleCodeParser.BOOLEAN - 60)) | (1 << (PeopleCodeParser.DATE - 60)) | (1 << (PeopleCodeParser.DATETIME - 60)) | (1 << (PeopleCodeParser.FLOAT - 60)) | (1 << (PeopleCodeParser.NUMBER - 60)) | (1 << (PeopleCodeParser.STRING - 60)) | (1 << (PeopleCodeParser.TIME - 60)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeTContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_typeT

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ArrayTypeContext(TypeTContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.TypeTContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ARRAY(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.ARRAY)
            else:
                return self.getToken(PeopleCodeParser.ARRAY, i)
        def OF(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.OF)
            else:
                return self.getToken(PeopleCodeParser.OF, i)
        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayType" ):
                listener.enterArrayType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayType" ):
                listener.exitArrayType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayType" ):
                return visitor.visitArrayType(self)
            else:
                return visitor.visitChildren(self)


    class BaseExceptionTypeContext(TypeTContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.TypeTContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXCEPTION(self):
            return self.getToken(PeopleCodeParser.EXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseExceptionType" ):
                listener.enterBaseExceptionType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseExceptionType" ):
                listener.exitBaseExceptionType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseExceptionType" ):
                return visitor.visitBaseExceptionType(self)
            else:
                return visitor.visitChildren(self)


    class AppClassTypeContext(TypeTContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.TypeTContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAppClassType" ):
                listener.enterAppClassType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAppClassType" ):
                listener.exitAppClassType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAppClassType" ):
                return visitor.visitAppClassType(self)
            else:
                return visitor.visitChildren(self)


    class SimpleTypeTypeContext(TypeTContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.TypeTContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleType(self):
            return self.getTypedRuleContext(PeopleCodeParser.SimpleTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleTypeType" ):
                listener.enterSimpleTypeType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleTypeType" ):
                listener.exitSimpleTypeType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleTypeType" ):
                return visitor.visitSimpleTypeType(self)
            else:
                return visitor.visitChildren(self)



    def typeT(self):

        localctx = PeopleCodeParser.TypeTContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_typeT)
        try:
            self.state = 452
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.ArrayTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.match(PeopleCodeParser.ARRAY)
                self.state = 442
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 438
                        self.match(PeopleCodeParser.OF)
                        self.state = 439
                        self.match(PeopleCodeParser.ARRAY) 
                    self.state = 444
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

                self.state = 447
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,50,self._ctx)
                if la_ == 1:
                    self.state = 445
                    self.match(PeopleCodeParser.OF)
                    self.state = 446
                    self.typeT()


                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.BaseExceptionTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 449
                self.match(PeopleCodeParser.EXCEPTION)
                pass

            elif la_ == 3:
                localctx = PeopleCodeParser.AppClassTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.appClassPath()
                pass

            elif la_ == 4:
                localctx = PeopleCodeParser.SimpleTypeTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.simpleType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PropertyDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_propertyDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PropertyGetSetContext(PropertyDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.PropertyDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY(self):
            return self.getToken(PeopleCodeParser.PROPERTY, 0)
        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def GET(self):
            return self.getToken(PeopleCodeParser.GET, 0)
        def SET(self):
            return self.getToken(PeopleCodeParser.SET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyGetSet" ):
                listener.enterPropertyGetSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyGetSet" ):
                listener.exitPropertyGetSet(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyGetSet" ):
                return visitor.visitPropertyGetSet(self)
            else:
                return visitor.visitChildren(self)


    class PropertyDirectContext(PropertyDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.PropertyDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PROPERTY(self):
            return self.getToken(PeopleCodeParser.PROPERTY, 0)
        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)

        def ABSTRACT(self):
            return self.getToken(PeopleCodeParser.ABSTRACT, 0)
        def READONLY(self):
            return self.getToken(PeopleCodeParser.READONLY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPropertyDirect" ):
                listener.enterPropertyDirect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPropertyDirect" ):
                listener.exitPropertyDirect(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPropertyDirect" ):
                return visitor.visitPropertyDirect(self)
            else:
                return visitor.visitChildren(self)



    def propertyDeclaration(self):

        localctx = PeopleCodeParser.PropertyDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_propertyDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.PropertyGetSetContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(PeopleCodeParser.PROPERTY)
                self.state = 455
                self.typeT()
                self.state = 456
                self.genericID()
                self.state = 457
                self.match(PeopleCodeParser.GET)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.SET:
                    self.state = 458
                    self.match(PeopleCodeParser.SET)


                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.PropertyDirectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 461
                self.match(PeopleCodeParser.PROPERTY)
                self.state = 462
                self.typeT()
                self.state = 463
                self.genericID()
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.ABSTRACT:
                    self.state = 464
                    self.match(PeopleCodeParser.ABSTRACT)


                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.READONLY:
                    self.state = 467
                    self.match(PeopleCodeParser.READONLY)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstanceDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_instanceDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class EmptyInstanceDeclContext(InstanceDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.InstanceDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSTANCE(self):
            return self.getToken(PeopleCodeParser.INSTANCE, 0)
        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyInstanceDecl" ):
                listener.enterEmptyInstanceDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyInstanceDecl" ):
                listener.exitEmptyInstanceDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptyInstanceDecl" ):
                return visitor.visitEmptyInstanceDecl(self)
            else:
                return visitor.visitChildren(self)


    class InstanceDeclContext(InstanceDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.InstanceDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INSTANCE(self):
            return self.getToken(PeopleCodeParser.INSTANCE, 0)
        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)

        def USER_VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.USER_VARIABLE)
            else:
                return self.getToken(PeopleCodeParser.USER_VARIABLE, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstanceDecl" ):
                listener.enterInstanceDecl(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstanceDecl" ):
                listener.exitInstanceDecl(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInstanceDecl" ):
                return visitor.visitInstanceDecl(self)
            else:
                return visitor.visitChildren(self)



    def instanceDeclaration(self):

        localctx = PeopleCodeParser.InstanceDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_instanceDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 487
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.InstanceDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                self.match(PeopleCodeParser.INSTANCE)
                self.state = 473
                self.typeT()
                self.state = 474
                self.match(PeopleCodeParser.USER_VARIABLE)
                self.state = 479
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,56,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 475
                        self.match(PeopleCodeParser.COMMA)
                        self.state = 476
                        self.match(PeopleCodeParser.USER_VARIABLE) 
                    self.state = 481
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,56,self._ctx)

                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.COMMA:
                    self.state = 482
                    self.match(PeopleCodeParser.COMMA)


                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.EmptyInstanceDeclContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(PeopleCodeParser.INSTANCE)
                self.state = 486
                self.typeT()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONSTANT(self):
            return self.getToken(PeopleCodeParser.CONSTANT, 0)

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)

        def literal(self):
            return self.getTypedRuleContext(PeopleCodeParser.LiteralContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_constantDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantDeclaration" ):
                listener.enterConstantDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantDeclaration" ):
                listener.exitConstantDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantDeclaration" ):
                return visitor.visitConstantDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def constantDeclaration(self):

        localctx = PeopleCodeParser.ConstantDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_constantDeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(PeopleCodeParser.CONSTANT)
            self.state = 490
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 491
            self.match(PeopleCodeParser.EQ)
            self.state = 492
            self.literal()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL(self):
            return self.getToken(PeopleCodeParser.NULL, 0)

        def DecimalLiteral(self):
            return self.getToken(PeopleCodeParser.DecimalLiteral, 0)

        def IntegerLiteral(self):
            return self.getToken(PeopleCodeParser.IntegerLiteral, 0)

        def StringLiteral(self):
            return self.getToken(PeopleCodeParser.StringLiteral, 0)

        def BooleanLiteral(self):
            return self.getToken(PeopleCodeParser.BooleanLiteral, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = PeopleCodeParser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_literal)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            _la = self._input.LA(1)
            if not(((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & ((1 << (PeopleCodeParser.NULL - 70)) | (1 << (PeopleCodeParser.DecimalLiteral - 70)) | (1 << (PeopleCodeParser.IntegerLiteral - 70)) | (1 << (PeopleCodeParser.StringLiteral - 70)) | (1 << (PeopleCodeParser.BooleanLiteral - 70)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassExternalDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionDeclarationContext,0)


        def nonLocalVarDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.NonLocalVarDeclarationContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_classExternalDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassExternalDeclaration" ):
                listener.enterClassExternalDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassExternalDeclaration" ):
                listener.exitClassExternalDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassExternalDeclaration" ):
                return visitor.visitClassExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def classExternalDeclaration(self):

        localctx = PeopleCodeParser.ClassExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_classExternalDeclaration)
        try:
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.DECLARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 496
                self.functionDeclaration()
                pass
            elif token in [PeopleCodeParser.COMPONENT, PeopleCodeParser.GLOBAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.nonLocalVarDeclaration()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramPreamblesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def programPreamble(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ProgramPreambleContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ProgramPreambleContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_programPreambles

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramPreambles" ):
                listener.enterProgramPreambles(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramPreambles" ):
                listener.exitProgramPreambles(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramPreambles" ):
                return visitor.visitProgramPreambles(self)
            else:
                return visitor.visitChildren(self)




    def programPreambles(self):

        localctx = PeopleCodeParser.ProgramPreamblesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_programPreambles)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 500
            self.programPreamble()
            self.state = 509
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,61,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 502 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 501
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 504 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PeopleCodeParser.SEMI):
                            break

                    self.state = 506
                    self.programPreamble() 
                self.state = 511
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,61,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProgramPreambleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionDeclarationContext,0)


        def nonLocalVarDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.NonLocalVarDeclarationContext,0)


        def constantDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.ConstantDeclarationContext,0)


        def localVariableDefinition(self):
            return self.getTypedRuleContext(PeopleCodeParser.LocalVariableDefinitionContext,0)


        def functionDefinition(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionDefinitionContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_programPreamble

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProgramPreamble" ):
                listener.enterProgramPreamble(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProgramPreamble" ):
                listener.exitProgramPreamble(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProgramPreamble" ):
                return visitor.visitProgramPreamble(self)
            else:
                return visitor.visitChildren(self)




    def programPreamble(self):

        localctx = PeopleCodeParser.ProgramPreambleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_programPreamble)
        try:
            self.state = 517
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.DECLARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.functionDeclaration()
                pass
            elif token in [PeopleCodeParser.COMPONENT, PeopleCodeParser.GLOBAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.nonLocalVarDeclaration()
                pass
            elif token in [PeopleCodeParser.CONSTANT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 514
                self.constantDeclaration()
                pass
            elif token in [PeopleCodeParser.LOCAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 515
                self.localVariableDefinition()
                pass
            elif token in [PeopleCodeParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 516
                self.functionDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionDeclaration

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LibraryFunctionDeclarationContext(FunctionDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.FunctionDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationDLL(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionDeclarationDLLContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLibraryFunctionDeclaration" ):
                listener.enterLibraryFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLibraryFunctionDeclaration" ):
                listener.exitLibraryFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLibraryFunctionDeclaration" ):
                return visitor.visitLibraryFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)


    class PeopleCodeFunctionDeclarationContext(FunctionDeclarationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.FunctionDeclarationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionDeclarationPCode(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionDeclarationPCodeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPeopleCodeFunctionDeclaration" ):
                listener.enterPeopleCodeFunctionDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPeopleCodeFunctionDeclaration" ):
                listener.exitPeopleCodeFunctionDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPeopleCodeFunctionDeclaration" ):
                return visitor.visitPeopleCodeFunctionDeclaration(self)
            else:
                return visitor.visitChildren(self)



    def functionDeclaration(self):

        localctx = PeopleCodeParser.FunctionDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_functionDeclaration)
        try:
            self.state = 521
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.PeopleCodeFunctionDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 519
                self.functionDeclarationPCode()
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.LibraryFunctionDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 520
                self.functionDeclarationDLL()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationPCodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(PeopleCodeParser.DECLARE, 0)

        def FUNCTION(self):
            return self.getToken(PeopleCodeParser.FUNCTION, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def PEOPLECODE(self):
            return self.getToken(PeopleCodeParser.PEOPLECODE, 0)

        def recordField(self):
            return self.getTypedRuleContext(PeopleCodeParser.RecordFieldContext,0)


        def RecordEvent(self):
            return self.getToken(PeopleCodeParser.RecordEvent, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionDeclarationPCode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationPCode" ):
                listener.enterFunctionDeclarationPCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationPCode" ):
                listener.exitFunctionDeclarationPCode(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclarationPCode" ):
                return visitor.visitFunctionDeclarationPCode(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclarationPCode(self):

        localctx = PeopleCodeParser.FunctionDeclarationPCodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_functionDeclarationPCode)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(PeopleCodeParser.DECLARE)
            self.state = 524
            self.match(PeopleCodeParser.FUNCTION)
            self.state = 525
            self.genericID()
            self.state = 526
            self.match(PeopleCodeParser.PEOPLECODE)
            self.state = 527
            self.recordField()
            self.state = 528
            self.match(PeopleCodeParser.RecordEvent)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RecordFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericID(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.GenericIDContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,i)


        def DOT(self):
            return self.getToken(PeopleCodeParser.DOT, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_recordField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRecordField" ):
                listener.enterRecordField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRecordField" ):
                listener.exitRecordField(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRecordField" ):
                return visitor.visitRecordField(self)
            else:
                return visitor.visitChildren(self)




    def recordField(self):

        localctx = PeopleCodeParser.RecordFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_recordField)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.genericID()
            self.state = 531
            self.match(PeopleCodeParser.DOT)
            self.state = 532
            self.genericID()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDeclarationDLLContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(PeopleCodeParser.DECLARE, 0)

        def FUNCTION(self):
            return self.getToken(PeopleCodeParser.FUNCTION, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def LIBRARY(self):
            return self.getToken(PeopleCodeParser.LIBRARY, 0)

        def StringLiteral(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.StringLiteral)
            else:
                return self.getToken(PeopleCodeParser.StringLiteral, i)

        def ALIAS(self):
            return self.getToken(PeopleCodeParser.ALIAS, 0)

        def dllArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.DllArgumentsContext,0)


        def RETURNS(self):
            return self.getToken(PeopleCodeParser.RETURNS, 0)

        def dllReturnType(self):
            return self.getTypedRuleContext(PeopleCodeParser.DllReturnTypeContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionDeclarationDLL

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDeclarationDLL" ):
                listener.enterFunctionDeclarationDLL(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDeclarationDLL" ):
                listener.exitFunctionDeclarationDLL(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDeclarationDLL" ):
                return visitor.visitFunctionDeclarationDLL(self)
            else:
                return visitor.visitChildren(self)




    def functionDeclarationDLL(self):

        localctx = PeopleCodeParser.FunctionDeclarationDLLContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_functionDeclarationDLL)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 534
            self.match(PeopleCodeParser.DECLARE)
            self.state = 535
            self.match(PeopleCodeParser.FUNCTION)
            self.state = 536
            self.genericID()
            self.state = 537
            self.match(PeopleCodeParser.LIBRARY)
            self.state = 538
            self.match(PeopleCodeParser.StringLiteral)
            self.state = 541
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.ALIAS:
                self.state = 539
                self.match(PeopleCodeParser.ALIAS)
                self.state = 540
                self.match(PeopleCodeParser.StringLiteral)


            self.state = 544
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 543
                self.dllArguments()


            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.RETURNS:
                self.state = 546
                self.match(PeopleCodeParser.RETURNS)
                self.state = 547
                self.dllReturnType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def dllArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.DllArgumentContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.DllArgumentContext,i)


        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_dllArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDllArguments" ):
                listener.enterDllArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDllArguments" ):
                listener.exitDllArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllArguments" ):
                return visitor.visitDllArguments(self)
            else:
                return visitor.visitChildren(self)




    def dllArguments(self):

        localctx = PeopleCodeParser.DllArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_dllArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(PeopleCodeParser.LPAREN)
            self.state = 551
            self.dllArgument()
            self.state = 556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.COMMA:
                self.state = 552
                self.match(PeopleCodeParser.COMMA)
                self.state = 553
                self.dllArgument()
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 559
            self.match(PeopleCodeParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def AS(self):
            return self.getToken(PeopleCodeParser.AS, 0)

        def builtInType(self):
            return self.getTypedRuleContext(PeopleCodeParser.BuiltInTypeContext,0)


        def REF(self):
            return self.getToken(PeopleCodeParser.REF, 0)

        def VALUE(self):
            return self.getToken(PeopleCodeParser.VALUE, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_dllArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDllArgument" ):
                listener.enterDllArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDllArgument" ):
                listener.exitDllArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllArgument" ):
                return visitor.visitDllArgument(self)
            else:
                return visitor.visitChildren(self)




    def dllArgument(self):

        localctx = PeopleCodeParser.DllArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_dllArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.genericID()
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.REF or _la==PeopleCodeParser.VALUE:
                self.state = 562
                _la = self._input.LA(1)
                if not(_la==PeopleCodeParser.REF or _la==PeopleCodeParser.VALUE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.AS:
                self.state = 565
                self.match(PeopleCodeParser.AS)
                self.state = 566
                self.builtInType()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DllReturnTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def AS(self):
            return self.getToken(PeopleCodeParser.AS, 0)

        def builtInType(self):
            return self.getTypedRuleContext(PeopleCodeParser.BuiltInTypeContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_dllReturnType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDllReturnType" ):
                listener.enterDllReturnType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDllReturnType" ):
                listener.exitDllReturnType(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDllReturnType" ):
                return visitor.visitDllReturnType(self)
            else:
                return visitor.visitChildren(self)




    def dllReturnType(self):

        localctx = PeopleCodeParser.DllReturnTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_dllReturnType)
        try:
            self.state = 574
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self.genericID()
                self.state = 570
                self.match(PeopleCodeParser.AS)
                self.state = 571
                self.builtInType()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 573
                self.builtInType()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonLocalVarDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def USER_VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.USER_VARIABLE)
            else:
                return self.getToken(PeopleCodeParser.USER_VARIABLE, i)

        def COMPONENT(self):
            return self.getToken(PeopleCodeParser.COMPONENT, 0)

        def GLOBAL(self):
            return self.getToken(PeopleCodeParser.GLOBAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_nonLocalVarDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonLocalVarDeclaration" ):
                listener.enterNonLocalVarDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonLocalVarDeclaration" ):
                listener.exitNonLocalVarDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonLocalVarDeclaration" ):
                return visitor.visitNonLocalVarDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def nonLocalVarDeclaration(self):

        localctx = PeopleCodeParser.NonLocalVarDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_nonLocalVarDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 591
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==PeopleCodeParser.COMPONENT or _la==PeopleCodeParser.GLOBAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 577
                self.typeT()
                self.state = 578
                self.match(PeopleCodeParser.USER_VARIABLE)
                self.state = 583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 579
                        self.match(PeopleCodeParser.COMMA)
                        self.state = 580
                        self.match(PeopleCodeParser.USER_VARIABLE) 
                    self.state = 585
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.COMMA:
                    self.state = 586
                    self.match(PeopleCodeParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 589
                _la = self._input.LA(1)
                if not(_la==PeopleCodeParser.COMPONENT or _la==PeopleCodeParser.GLOBAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 590
                self.typeT()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classMember(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ClassMemberContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ClassMemberContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_classBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassBody" ):
                listener.enterClassBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassBody" ):
                listener.exitClassBody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassBody" ):
                return visitor.visitClassBody(self)
            else:
                return visitor.visitChildren(self)




    def classBody(self):

        localctx = PeopleCodeParser.ClassBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_classBody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 593
            self.classMember()
            self.state = 602
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 595 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 594
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 597 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PeopleCodeParser.SEMI):
                            break

                    self.state = 599
                    self.classMember() 
                self.state = 604
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,75,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassMemberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_classMember

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MethodImplementationContext(ClassMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def method(self):
            return self.getTypedRuleContext(PeopleCodeParser.MethodContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethodImplementation" ):
                listener.enterMethodImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethodImplementation" ):
                listener.exitMethodImplementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethodImplementation" ):
                return visitor.visitMethodImplementation(self)
            else:
                return visitor.visitChildren(self)


    class GetterImplementationContext(ClassMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def getter(self):
            return self.getTypedRuleContext(PeopleCodeParser.GetterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetterImplementation" ):
                listener.enterGetterImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetterImplementation" ):
                listener.exitGetterImplementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetterImplementation" ):
                return visitor.visitGetterImplementation(self)
            else:
                return visitor.visitChildren(self)


    class SetterImplementationContext(ClassMemberContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ClassMemberContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setter(self):
            return self.getTypedRuleContext(PeopleCodeParser.SetterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetterImplementation" ):
                listener.enterSetterImplementation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetterImplementation" ):
                listener.exitSetterImplementation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetterImplementation" ):
                return visitor.visitSetterImplementation(self)
            else:
                return visitor.visitChildren(self)



    def classMember(self):

        localctx = PeopleCodeParser.ClassMemberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_classMember)
        try:
            self.state = 608
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.METHOD]:
                localctx = PeopleCodeParser.MethodImplementationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 605
                self.method()
                pass
            elif token in [PeopleCodeParser.GET]:
                localctx = PeopleCodeParser.GetterImplementationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self.getter()
                pass
            elif token in [PeopleCodeParser.SET]:
                localctx = PeopleCodeParser.SetterImplementationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 607
                self.setter()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MethodContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def METHOD(self):
            return self.getToken(PeopleCodeParser.METHOD, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def END_METHOD(self):
            return self.getToken(PeopleCodeParser.END_METHOD, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_method

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMethod" ):
                listener.enterMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMethod" ):
                listener.exitMethod(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMethod" ):
                return visitor.visitMethod(self)
            else:
                return visitor.visitChildren(self)




    def method(self):

        localctx = PeopleCodeParser.MethodContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_method)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 610
            self.match(PeopleCodeParser.METHOD)
            self.state = 611
            self.genericID()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 612
                self.match(PeopleCodeParser.SEMI)
                self.state = 617
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 619
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 618
                self.statements()


            self.state = 621
            self.match(PeopleCodeParser.END_METHOD)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(PeopleCodeParser.GET, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def END_GET(self):
            return self.getToken(PeopleCodeParser.END_GET, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_getter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetter" ):
                listener.enterGetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetter" ):
                listener.exitGetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGetter" ):
                return visitor.visitGetter(self)
            else:
                return visitor.visitChildren(self)




    def getter(self):

        localctx = PeopleCodeParser.GetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_getter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            self.match(PeopleCodeParser.GET)
            self.state = 624
            self.genericID()
            self.state = 628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 625
                self.match(PeopleCodeParser.SEMI)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 631
            self.statements()
            self.state = 632
            self.match(PeopleCodeParser.END_GET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(PeopleCodeParser.SET, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def END_SET(self):
            return self.getToken(PeopleCodeParser.END_SET, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_setter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetter" ):
                listener.enterSetter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetter" ):
                listener.exitSetter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSetter" ):
                return visitor.visitSetter(self)
            else:
                return visitor.visitChildren(self)




    def setter(self):

        localctx = PeopleCodeParser.SetterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_setter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(PeopleCodeParser.SET)
            self.state = 635
            self.genericID()
            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 636
                self.match(PeopleCodeParser.SEMI)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 643
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 642
                self.statements()


            self.state = 645
            self.match(PeopleCodeParser.END_SET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.StatementContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.StatementContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_statements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatements" ):
                listener.enterStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatements" ):
                listener.exitStatements(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatements" ):
                return visitor.visitStatements(self)
            else:
                return visitor.visitChildren(self)




    def statements(self):

        localctx = PeopleCodeParser.StatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_statements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 647
            self.statement()
            self.state = 656
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,83,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 649 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 648
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 651 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==PeopleCodeParser.SEMI):
                            break

                    self.state = 653
                    self.statement() 
                self.state = 658
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,83,self._ctx)

            self.state = 662
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,84,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 659
                    self.match(PeopleCodeParser.SEMI) 
                self.state = 664
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,84,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_statementBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementBlock" ):
                listener.enterStatementBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementBlock" ):
                listener.exitStatementBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementBlock" ):
                return visitor.visitStatementBlock(self)
            else:
                return visitor.visitChildren(self)




    def statementBlock(self):

        localctx = PeopleCodeParser.StatementBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_statementBlock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.statements()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_statement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TryCatchBlockStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tryCatchBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.TryCatchBlockContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchBlockStmt" ):
                listener.enterTryCatchBlockStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchBlockStmt" ):
                listener.exitTryCatchBlockStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchBlockStmt" ):
                return visitor.visitTryCatchBlockStmt(self)
            else:
                return visitor.visitChildren(self)


    class ErrorStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ERROR(self):
            return self.getToken(PeopleCodeParser.ERROR, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterErrorStmt" ):
                listener.enterErrorStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitErrorStmt" ):
                listener.exitErrorStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitErrorStmt" ):
                return visitor.visitErrorStmt(self)
            else:
                return visitor.visitChildren(self)


    class LocalVarDeclarationStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def localVariableDeclaration(self):
            return self.getTypedRuleContext(PeopleCodeParser.LocalVariableDeclarationContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVarDeclarationStmt" ):
                listener.enterLocalVarDeclarationStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVarDeclarationStmt" ):
                listener.exitLocalVarDeclarationStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVarDeclarationStmt" ):
                return visitor.visitLocalVarDeclarationStmt(self)
            else:
                return visitor.visitChildren(self)


    class RepeatStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def repeatStatement(self):
            return self.getTypedRuleContext(PeopleCodeParser.RepeatStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStmt" ):
                listener.enterRepeatStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStmt" ):
                listener.exitRepeatStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatStmt" ):
                return visitor.visitRepeatStmt(self)
            else:
                return visitor.visitChildren(self)


    class EvaluateStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def evaluateStatement(self):
            return self.getTypedRuleContext(PeopleCodeParser.EvaluateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateStmt" ):
                listener.enterEvaluateStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateStmt" ):
                listener.exitEvaluateStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateStmt" ):
                return visitor.visitEvaluateStmt(self)
            else:
                return visitor.visitChildren(self)


    class ExpressionStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionStmt" ):
                listener.enterExpressionStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionStmt" ):
                listener.exitExpressionStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionStmt" ):
                return visitor.visitExpressionStmt(self)
            else:
                return visitor.visitChildren(self)


    class ContinueStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(PeopleCodeParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinueStmt" ):
                listener.enterContinueStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinueStmt" ):
                listener.exitContinueStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinueStmt" ):
                return visitor.visitContinueStmt(self)
            else:
                return visitor.visitChildren(self)


    class IfStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ifStatement(self):
            return self.getTypedRuleContext(PeopleCodeParser.IfStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStmt" ):
                listener.enterIfStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStmt" ):
                listener.exitIfStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStmt" ):
                return visitor.visitIfStmt(self)
            else:
                return visitor.visitChildren(self)


    class WhileStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def whileStatement(self):
            return self.getTypedRuleContext(PeopleCodeParser.WhileStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStmt" ):
                listener.enterWhileStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStmt" ):
                listener.exitWhileStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStmt" ):
                return visitor.visitWhileStmt(self)
            else:
                return visitor.visitChildren(self)


    class ExitStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXIT(self):
            return self.getToken(PeopleCodeParser.EXIT, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExitStmt" ):
                listener.enterExitStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExitStmt" ):
                listener.exitExitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExitStmt" ):
                return visitor.visitExitStmt(self)
            else:
                return visitor.visitChildren(self)


    class BreakStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(PeopleCodeParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreakStmt" ):
                listener.enterBreakStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreakStmt" ):
                listener.exitBreakStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreakStmt" ):
                return visitor.visitBreakStmt(self)
            else:
                return visitor.visitChildren(self)


    class WarningStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WARNING(self):
            return self.getToken(PeopleCodeParser.WARNING, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWarningStmt" ):
                listener.enterWarningStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWarningStmt" ):
                listener.exitWarningStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWarningStmt" ):
                return visitor.visitWarningStmt(self)
            else:
                return visitor.visitChildren(self)


    class SuperAssignmentStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(PeopleCodeParser.SUPER, 0)
        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuperAssignmentStmt" ):
                listener.enterSuperAssignmentStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuperAssignmentStmt" ):
                listener.exitSuperAssignmentStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuperAssignmentStmt" ):
                return visitor.visitSuperAssignmentStmt(self)
            else:
                return visitor.visitChildren(self)


    class ForStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def forStatement(self):
            return self.getTypedRuleContext(PeopleCodeParser.ForStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStmt" ):
                listener.enterForStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStmt" ):
                listener.exitForStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStmt" ):
                return visitor.visitForStmt(self)
            else:
                return visitor.visitChildren(self)


    class ReturnStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(PeopleCodeParser.RETURN, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStmt" ):
                listener.enterReturnStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStmt" ):
                listener.exitReturnStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturnStmt" ):
                return visitor.visitReturnStmt(self)
            else:
                return visitor.visitChildren(self)


    class ThrowStmtContext(StatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.StatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def THROW(self):
            return self.getToken(PeopleCodeParser.THROW, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowStmt" ):
                listener.enterThrowStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowStmt" ):
                listener.exitThrowStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowStmt" ):
                return visitor.visitThrowStmt(self)
            else:
                return visitor.visitChildren(self)



    def statement(self):

        localctx = PeopleCodeParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_statement)
        try:
            self.state = 694
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.SuperAssignmentStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 667
                self.match(PeopleCodeParser.SUPER)
                self.state = 668
                self.match(PeopleCodeParser.EQ)
                self.state = 669
                self.expression(0)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.LocalVarDeclarationStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 670
                self.localVariableDeclaration()
                pass

            elif la_ == 3:
                localctx = PeopleCodeParser.IfStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self.ifStatement()
                pass

            elif la_ == 4:
                localctx = PeopleCodeParser.ForStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 672
                self.forStatement()
                pass

            elif la_ == 5:
                localctx = PeopleCodeParser.WhileStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 673
                self.whileStatement()
                pass

            elif la_ == 6:
                localctx = PeopleCodeParser.RepeatStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 674
                self.repeatStatement()
                pass

            elif la_ == 7:
                localctx = PeopleCodeParser.EvaluateStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 675
                self.evaluateStatement()
                pass

            elif la_ == 8:
                localctx = PeopleCodeParser.TryCatchBlockStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 676
                self.tryCatchBlock()
                pass

            elif la_ == 9:
                localctx = PeopleCodeParser.ExitStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 677
                self.match(PeopleCodeParser.EXIT)
                self.state = 679
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
                if la_ == 1:
                    self.state = 678
                    self.expression(0)


                pass

            elif la_ == 10:
                localctx = PeopleCodeParser.BreakStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 681
                self.match(PeopleCodeParser.BREAK)
                pass

            elif la_ == 11:
                localctx = PeopleCodeParser.ContinueStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 682
                self.match(PeopleCodeParser.CONTINUE)
                pass

            elif la_ == 12:
                localctx = PeopleCodeParser.ErrorStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 683
                self.match(PeopleCodeParser.ERROR)
                self.state = 684
                self.expression(0)
                pass

            elif la_ == 13:
                localctx = PeopleCodeParser.WarningStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 685
                self.match(PeopleCodeParser.WARNING)
                self.state = 686
                self.expression(0)
                pass

            elif la_ == 14:
                localctx = PeopleCodeParser.ReturnStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 687
                self.match(PeopleCodeParser.RETURN)
                self.state = 689
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 688
                    self.expression(0)


                pass

            elif la_ == 15:
                localctx = PeopleCodeParser.ThrowStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 691
                self.match(PeopleCodeParser.THROW)
                self.state = 692
                self.expression(0)
                pass

            elif la_ == 16:
                localctx = PeopleCodeParser.ExpressionStmtContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 693
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclarationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def localVariableDefinition(self):
            return self.getTypedRuleContext(PeopleCodeParser.LocalVariableDefinitionContext,0)


        def localVariableDeclAssignment(self):
            return self.getTypedRuleContext(PeopleCodeParser.LocalVariableDeclAssignmentContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_localVariableDeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclaration" ):
                listener.enterLocalVariableDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclaration" ):
                listener.exitLocalVariableDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclaration" ):
                return visitor.visitLocalVariableDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclaration(self):

        localctx = PeopleCodeParser.LocalVariableDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_localVariableDeclaration)
        try:
            self.state = 698
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 696
                self.localVariableDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 697
                self.localVariableDeclAssignment()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(PeopleCodeParser.LOCAL, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def USER_VARIABLE(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.USER_VARIABLE)
            else:
                return self.getToken(PeopleCodeParser.USER_VARIABLE, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_localVariableDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDefinition" ):
                listener.enterLocalVariableDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDefinition" ):
                listener.exitLocalVariableDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDefinition" ):
                return visitor.visitLocalVariableDefinition(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDefinition(self):

        localctx = PeopleCodeParser.LocalVariableDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_localVariableDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 700
            self.match(PeopleCodeParser.LOCAL)
            self.state = 701
            self.typeT()
            self.state = 702
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 707
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,89,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 703
                    self.match(PeopleCodeParser.COMMA)
                    self.state = 704
                    self.match(PeopleCodeParser.USER_VARIABLE) 
                self.state = 709
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,89,self._ctx)

            self.state = 711
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.COMMA:
                self.state = 710
                self.match(PeopleCodeParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LocalVariableDeclAssignmentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL(self):
            return self.getToken(PeopleCodeParser.LOCAL, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_localVariableDeclAssignment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLocalVariableDeclAssignment" ):
                listener.enterLocalVariableDeclAssignment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLocalVariableDeclAssignment" ):
                listener.exitLocalVariableDeclAssignment(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLocalVariableDeclAssignment" ):
                return visitor.visitLocalVariableDeclAssignment(self)
            else:
                return visitor.visitChildren(self)




    def localVariableDeclAssignment(self):

        localctx = PeopleCodeParser.LocalVariableDeclAssignmentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_localVariableDeclAssignment)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(PeopleCodeParser.LOCAL)
            self.state = 714
            self.typeT()
            self.state = 715
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 716
            self.match(PeopleCodeParser.EQ)
            self.state = 717
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PeopleCodeParser.IF, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(PeopleCodeParser.THEN, 0)

        def END_IF(self):
            return self.getToken(PeopleCodeParser.END_IF, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.StatementBlockContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,i)


        def ELSE(self):
            return self.getToken(PeopleCodeParser.ELSE, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIfStatement" ):
                return visitor.visitIfStatement(self)
            else:
                return visitor.visitChildren(self)




    def ifStatement(self):

        localctx = PeopleCodeParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(PeopleCodeParser.IF)
            self.state = 720
            self.expression(0)
            self.state = 721
            self.match(PeopleCodeParser.THEN)
            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 722
                self.match(PeopleCodeParser.SEMI)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 728
                self.statementBlock()


            self.state = 741
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.ELSE:
                self.state = 731
                self.match(PeopleCodeParser.ELSE)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 732
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                    self.state = 738
                    self.statementBlock()




            self.state = 743
            self.match(PeopleCodeParser.END_IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PeopleCodeParser.FOR, 0)

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)


        def TO(self):
            return self.getToken(PeopleCodeParser.TO, 0)

        def END_FOR(self):
            return self.getToken(PeopleCodeParser.END_FOR, 0)

        def STEP(self):
            return self.getToken(PeopleCodeParser.STEP, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_forStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForStatement" ):
                listener.enterForStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForStatement" ):
                listener.exitForStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForStatement" ):
                return visitor.visitForStatement(self)
            else:
                return visitor.visitChildren(self)




    def forStatement(self):

        localctx = PeopleCodeParser.ForStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_forStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 745
            self.match(PeopleCodeParser.FOR)
            self.state = 746
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 747
            self.match(PeopleCodeParser.EQ)
            self.state = 748
            self.expression(0)
            self.state = 749
            self.match(PeopleCodeParser.TO)
            self.state = 750
            self.expression(0)
            self.state = 753
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 751
                self.match(PeopleCodeParser.STEP)
                self.state = 752
                self.expression(0)


            self.state = 758
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 755
                self.match(PeopleCodeParser.SEMI)
                self.state = 760
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 761
                self.statementBlock()


            self.state = 764
            self.match(PeopleCodeParser.END_FOR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PeopleCodeParser.WHILE, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def END_WHILE(self):
            return self.getToken(PeopleCodeParser.END_WHILE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhileStatement" ):
                return visitor.visitWhileStatement(self)
            else:
                return visitor.visitChildren(self)




    def whileStatement(self):

        localctx = PeopleCodeParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(PeopleCodeParser.WHILE)
            self.state = 767
            self.expression(0)
            self.state = 771
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 768
                self.match(PeopleCodeParser.SEMI)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 774
                self.statementBlock()


            self.state = 777
            self.match(PeopleCodeParser.END_WHILE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self):
            return self.getToken(PeopleCodeParser.REPEAT, 0)

        def UNTIL(self):
            return self.getToken(PeopleCodeParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRepeatStatement" ):
                return visitor.visitRepeatStatement(self)
            else:
                return visitor.visitChildren(self)




    def repeatStatement(self):

        localctx = PeopleCodeParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(PeopleCodeParser.REPEAT)
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 780
                self.match(PeopleCodeParser.SEMI)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 786
                self.statementBlock()


            self.state = 789
            self.match(PeopleCodeParser.UNTIL)
            self.state = 790
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EvaluateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVALUATE(self):
            return self.getToken(PeopleCodeParser.EVALUATE, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def END_EVALUATE(self):
            return self.getToken(PeopleCodeParser.END_EVALUATE, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def whenClauses(self):
            return self.getTypedRuleContext(PeopleCodeParser.WhenClausesContext,0)


        def whenOther(self):
            return self.getTypedRuleContext(PeopleCodeParser.WhenOtherContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_evaluateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluateStatement" ):
                listener.enterEvaluateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluateStatement" ):
                listener.exitEvaluateStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEvaluateStatement" ):
                return visitor.visitEvaluateStatement(self)
            else:
                return visitor.visitChildren(self)




    def evaluateStatement(self):

        localctx = PeopleCodeParser.EvaluateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_evaluateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(PeopleCodeParser.EVALUATE)
            self.state = 793
            self.expression(0)
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 794
                self.match(PeopleCodeParser.SEMI)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 801
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.WHEN:
                self.state = 800
                self.whenClauses()


            self.state = 804
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.WHEN_OTHER:
                self.state = 803
                self.whenOther()


            self.state = 806
            self.match(PeopleCodeParser.END_EVALUATE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def whenClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.WhenClauseContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.WhenClauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_whenClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClauses" ):
                listener.enterWhenClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClauses" ):
                listener.exitWhenClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClauses" ):
                return visitor.visitWhenClauses(self)
            else:
                return visitor.visitChildren(self)




    def whenClauses(self):

        localctx = PeopleCodeParser.WhenClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_whenClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.whenClause()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI or _la==PeopleCodeParser.WHEN:
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==PeopleCodeParser.SEMI:
                    self.state = 809
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 814
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 815
                self.whenClause()
                self.state = 820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(PeopleCodeParser.WHEN, 0)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(PeopleCodeParser.ComparisonOperatorContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_whenClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenClause" ):
                listener.enterWhenClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenClause" ):
                listener.exitWhenClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenClause" ):
                return visitor.visitWhenClause(self)
            else:
                return visitor.visitChildren(self)




    def whenClause(self):

        localctx = PeopleCodeParser.WhenClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_whenClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(PeopleCodeParser.WHEN)
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (PeopleCodeParser.EQ - 41)) | (1 << (PeopleCodeParser.GE - 41)) | (1 << (PeopleCodeParser.GT - 41)) | (1 << (PeopleCodeParser.LE - 41)) | (1 << (PeopleCodeParser.LT - 41)) | (1 << (PeopleCodeParser.NEQ - 41)))) != 0):
                self.state = 822
                self.comparisonOperator()


            self.state = 825
            self.expression(0)
            self.state = 829
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 826
                    self.match(PeopleCodeParser.SEMI) 
                self.state = 831
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 832
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhenOtherContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN_OTHER(self):
            return self.getToken(PeopleCodeParser.WHEN_OTHER, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_whenOther

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhenOther" ):
                listener.enterWhenOther(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhenOther" ):
                listener.exitWhenOther(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenOther" ):
                return visitor.visitWhenOther(self)
            else:
                return visitor.visitChildren(self)




    def whenOther(self):

        localctx = PeopleCodeParser.WhenOtherContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_whenOther)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(PeopleCodeParser.WHEN_OTHER)
            self.state = 839
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 836
                self.match(PeopleCodeParser.SEMI)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 842
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LE(self):
            return self.getToken(PeopleCodeParser.LE, 0)

        def GE(self):
            return self.getToken(PeopleCodeParser.GE, 0)

        def NEQ(self):
            return self.getToken(PeopleCodeParser.NEQ, 0)

        def LT(self):
            return self.getToken(PeopleCodeParser.LT, 0)

        def GT(self):
            return self.getToken(PeopleCodeParser.GT, 0)

        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonOperator" ):
                return visitor.visitComparisonOperator(self)
            else:
                return visitor.visitChildren(self)




    def comparisonOperator(self):

        localctx = PeopleCodeParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_comparisonOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            _la = self._input.LA(1)
            if not(((((_la - 41)) & ~0x3f) == 0 and ((1 << (_la - 41)) & ((1 << (PeopleCodeParser.EQ - 41)) | (1 << (PeopleCodeParser.GE - 41)) | (1 << (PeopleCodeParser.GT - 41)) | (1 << (PeopleCodeParser.LE - 41)) | (1 << (PeopleCodeParser.LT - 41)) | (1 << (PeopleCodeParser.NEQ - 41)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryCatchBlockContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRY(self):
            return self.getToken(PeopleCodeParser.TRY, 0)

        def END_TRY(self):
            return self.getToken(PeopleCodeParser.END_TRY, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def catchClauses(self):
            return self.getTypedRuleContext(PeopleCodeParser.CatchClausesContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_tryCatchBlock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryCatchBlock" ):
                listener.enterTryCatchBlock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryCatchBlock" ):
                listener.exitTryCatchBlock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryCatchBlock" ):
                return visitor.visitTryCatchBlock(self)
            else:
                return visitor.visitChildren(self)




    def tryCatchBlock(self):

        localctx = PeopleCodeParser.TryCatchBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_tryCatchBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 847
            self.match(PeopleCodeParser.TRY)
            self.state = 851
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,113,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 848
                    self.match(PeopleCodeParser.SEMI) 
                self.state = 853
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,113,self._ctx)

            self.state = 855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 854
                self.statementBlock()


            self.state = 858
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.CATCH:
                self.state = 857
                self.catchClauses()


            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 860
                self.match(PeopleCodeParser.SEMI)
                self.state = 865
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 866
            self.match(PeopleCodeParser.END_TRY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClausesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def catchClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.CatchClauseContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.CatchClauseContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_catchClauses

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClauses" ):
                listener.enterCatchClauses(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClauses" ):
                listener.exitCatchClauses(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClauses" ):
                return visitor.visitCatchClauses(self)
            else:
                return visitor.visitChildren(self)




    def catchClauses(self):

        localctx = PeopleCodeParser.CatchClausesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_catchClauses)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.catchClause()
            self.state = 878
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,118,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==PeopleCodeParser.SEMI:
                        self.state = 869
                        self.match(PeopleCodeParser.SEMI)
                        self.state = 874
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 875
                    self.catchClause() 
                self.state = 880
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,118,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CatchClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(PeopleCodeParser.CATCH, 0)

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def EXCEPTION(self):
            return self.getToken(PeopleCodeParser.EXCEPTION, 0)

        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statementBlock(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementBlockContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_catchClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCatchClause" ):
                listener.enterCatchClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCatchClause" ):
                listener.exitCatchClause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCatchClause" ):
                return visitor.visitCatchClause(self)
            else:
                return visitor.visitChildren(self)




    def catchClause(self):

        localctx = PeopleCodeParser.CatchClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_catchClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(PeopleCodeParser.CATCH)
            self.state = 884
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 882
                self.match(PeopleCodeParser.EXCEPTION)
                pass

            elif la_ == 2:
                self.state = 883
                self.appClassPath()
                pass


            self.state = 886
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 890
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 887
                    self.match(PeopleCodeParser.SEMI) 
                self.state = 892
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 894
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 893
                self.statementBlock()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class MultDivExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def STAR(self):
            return self.getToken(PeopleCodeParser.STAR, 0)
        def DIV(self):
            return self.getToken(PeopleCodeParser.DIV, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultDivExpr" ):
                listener.enterMultDivExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultDivExpr" ):
                listener.exitMultDivExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultDivExpr" ):
                return visitor.visitMultDivExpr(self)
            else:
                return visitor.visitChildren(self)


    class ClassCastExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(PeopleCodeParser.AS, 0)
        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassCastExpr" ):
                listener.enterClassCastExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassCastExpr" ):
                listener.exitClassCastExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassCastExpr" ):
                return visitor.visitClassCastExpr(self)
            else:
                return visitor.visitChildren(self)


    class ConcatenationExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def PIPE(self):
            return self.getToken(PeopleCodeParser.PIPE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConcatenationExpr" ):
                listener.enterConcatenationExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConcatenationExpr" ):
                listener.exitConcatenationExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConcatenationExpr" ):
                return visitor.visitConcatenationExpr(self)
            else:
                return visitor.visitChildren(self)


    class StringObjectReferenceExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)

        def DOT(self):
            return self.getToken(PeopleCodeParser.DOT, 0)
        def StringLiteral(self):
            return self.getToken(PeopleCodeParser.StringLiteral, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringObjectReferenceExpr" ):
                listener.enterStringObjectReferenceExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringObjectReferenceExpr" ):
                listener.exitStringObjectReferenceExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStringObjectReferenceExpr" ):
                return visitor.visitStringObjectReferenceExpr(self)
            else:
                return visitor.visitChildren(self)


    class ArrayIndexExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)

        def LBRACKET(self):
            return self.getToken(PeopleCodeParser.LBRACKET, 0)
        def expressionList(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionListContext,0)

        def RBRACKET(self):
            return self.getToken(PeopleCodeParser.RBRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArrayIndexExpr" ):
                listener.enterArrayIndexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArrayIndexExpr" ):
                listener.exitArrayIndexExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArrayIndexExpr" ):
                return visitor.visitArrayIndexExpr(self)
            else:
                return visitor.visitChildren(self)


    class AddSubtrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def ADD(self):
            return self.getToken(PeopleCodeParser.ADD, 0)
        def SUBTR(self):
            return self.getToken(PeopleCodeParser.SUBTR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAddSubtrExpr" ):
                listener.enterAddSubtrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAddSubtrExpr" ):
                listener.exitAddSubtrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAddSubtrExpr" ):
                return visitor.visitAddSubtrExpr(self)
            else:
                return visitor.visitChildren(self)


    class ComparisonExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def LE(self):
            return self.getToken(PeopleCodeParser.LE, 0)
        def GE(self):
            return self.getToken(PeopleCodeParser.GE, 0)
        def LT(self):
            return self.getToken(PeopleCodeParser.LT, 0)
        def GT(self):
            return self.getToken(PeopleCodeParser.GT, 0)
        def NOT(self):
            return self.getToken(PeopleCodeParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonExpr" ):
                listener.enterComparisonExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonExpr" ):
                listener.exitComparisonExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparisonExpr" ):
                return visitor.visitComparisonExpr(self)
            else:
                return visitor.visitChildren(self)


    class AtExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(PeopleCodeParser.AT, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtExpr" ):
                listener.enterAtExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtExpr" ):
                listener.exitAtExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtExpr" ):
                return visitor.visitAtExpr(self)
            else:
                return visitor.visitChildren(self)


    class AndOrExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def AND(self):
            return self.getToken(PeopleCodeParser.AND, 0)
        def OR(self):
            return self.getToken(PeopleCodeParser.OR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndOrExpr" ):
                listener.enterAndOrExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndOrExpr" ):
                listener.exitAndOrExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndOrExpr" ):
                return visitor.visitAndOrExpr(self)
            else:
                return visitor.visitChildren(self)


    class ImplicitSubindexExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)
        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImplicitSubindexExpr" ):
                listener.enterImplicitSubindexExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImplicitSubindexExpr" ):
                listener.exitImplicitSubindexExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImplicitSubindexExpr" ):
                return visitor.visitImplicitSubindexExpr(self)
            else:
                return visitor.visitChildren(self)


    class DotAccessExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)

        def dotAccess(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.DotAccessContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.DotAccessContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotAccessExpr" ):
                listener.enterDotAccessExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotAccessExpr" ):
                listener.exitDotAccessExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotAccessExpr" ):
                return visitor.visitDotAccessExpr(self)
            else:
                return visitor.visitChildren(self)


    class FunctionCallExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def simpleFunctionCall(self):
            return self.getTypedRuleContext(PeopleCodeParser.SimpleFunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpr" ):
                listener.enterFunctionCallExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpr" ):
                listener.exitFunctionCallExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallExpr" ):
                return visitor.visitFunctionCallExpr(self)
            else:
                return visitor.visitChildren(self)


    class ExponentialExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def EXP(self):
            return self.getToken(PeopleCodeParser.EXP, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExponentialExpr" ):
                listener.enterExponentialExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExponentialExpr" ):
                listener.exitExponentialExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExponentialExpr" ):
                return visitor.visitExponentialExpr(self)
            else:
                return visitor.visitChildren(self)


    class EqualityExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.op = None # Token
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)

        def NEQ(self):
            return self.getToken(PeopleCodeParser.NEQ, 0)
        def EQ(self):
            return self.getToken(PeopleCodeParser.EQ, 0)
        def NOT(self):
            return self.getToken(PeopleCodeParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityExpr" ):
                listener.enterEqualityExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityExpr" ):
                listener.exitEqualityExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityExpr" ):
                return visitor.visitEqualityExpr(self)
            else:
                return visitor.visitChildren(self)


    class ObjectCreateExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def objectCreate(self):
            return self.getTypedRuleContext(PeopleCodeParser.ObjectCreateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreateExpr" ):
                listener.enterObjectCreateExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreateExpr" ):
                listener.exitObjectCreateExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectCreateExpr" ):
                return visitor.visitObjectCreateExpr(self)
            else:
                return visitor.visitChildren(self)


    class IdentifierExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ident(self):
            return self.getTypedRuleContext(PeopleCodeParser.IdentContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentifierExpr" ):
                listener.enterIdentifierExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentifierExpr" ):
                listener.exitIdentifierExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentifierExpr" ):
                return visitor.visitIdentifierExpr(self)
            else:
                return visitor.visitChildren(self)


    class LiteralExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def literal(self):
            return self.getTypedRuleContext(PeopleCodeParser.LiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteralExpr" ):
                listener.enterLiteralExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteralExpr" ):
                listener.exitLiteralExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteralExpr" ):
                return visitor.visitLiteralExpr(self)
            else:
                return visitor.visitChildren(self)


    class ParenthesizedExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesizedExpr" ):
                listener.enterParenthesizedExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesizedExpr" ):
                listener.exitParenthesizedExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParenthesizedExpr" ):
                return visitor.visitParenthesizedExpr(self)
            else:
                return visitor.visitChildren(self)


    class NotExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(PeopleCodeParser.NOT, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpr" ):
                listener.enterNotExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpr" ):
                listener.exitNotExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNotExpr" ):
                return visitor.visitNotExpr(self)
            else:
                return visitor.visitChildren(self)


    class MetadataExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMetadataExpr" ):
                listener.enterMetadataExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMetadataExpr" ):
                listener.exitMetadataExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMetadataExpr" ):
                return visitor.visitMetadataExpr(self)
            else:
                return visitor.visitChildren(self)


    class NegationExprContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUBTR(self):
            return self.getToken(PeopleCodeParser.SUBTR, 0)
        def expression(self):
            return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNegationExpr" ):
                listener.enterNegationExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNegationExpr" ):
                listener.exitNegationExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNegationExpr" ):
                return visitor.visitNegationExpr(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PeopleCodeParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 120
        self.enterRecursionRule(localctx, 120, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 912
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                localctx = PeopleCodeParser.ParenthesizedExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 897
                self.match(PeopleCodeParser.LPAREN)
                self.state = 898
                self.expression(0)
                self.state = 899
                self.match(PeopleCodeParser.RPAREN)
                pass

            elif la_ == 2:
                localctx = PeopleCodeParser.AtExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 901
                self.match(PeopleCodeParser.AT)
                self.state = 902
                self.expression(20)
                pass

            elif la_ == 3:
                localctx = PeopleCodeParser.ObjectCreateExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 903
                self.objectCreate()
                pass

            elif la_ == 4:
                localctx = PeopleCodeParser.FunctionCallExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 904
                self.simpleFunctionCall()
                pass

            elif la_ == 5:
                localctx = PeopleCodeParser.NegationExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 905
                self.match(PeopleCodeParser.SUBTR)
                self.state = 906
                self.expression(12)
                pass

            elif la_ == 6:
                localctx = PeopleCodeParser.NotExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 907
                self.match(PeopleCodeParser.NOT)
                self.state = 908
                self.expression(8)
                pass

            elif la_ == 7:
                localctx = PeopleCodeParser.LiteralExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 909
                self.literal()
                pass

            elif la_ == 8:
                localctx = PeopleCodeParser.IdentifierExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 910
                self.ident()
                pass

            elif la_ == 9:
                localctx = PeopleCodeParser.MetadataExprContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 911
                self.appClassPath()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 968
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,128,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 966
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                    if la_ == 1:
                        localctx = PeopleCodeParser.ExponentialExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 914
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 915
                        self.match(PeopleCodeParser.EXP)
                        self.state = 916
                        self.expression(11)
                        pass

                    elif la_ == 2:
                        localctx = PeopleCodeParser.MultDivExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 917
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 918
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PeopleCodeParser.DIV or _la==PeopleCodeParser.STAR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 919
                        self.expression(11)
                        pass

                    elif la_ == 3:
                        localctx = PeopleCodeParser.AddSubtrExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 920
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 921
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PeopleCodeParser.ADD or _la==PeopleCodeParser.SUBTR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 922
                        self.expression(10)
                        pass

                    elif la_ == 4:
                        localctx = PeopleCodeParser.ComparisonExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 923
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 925
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PeopleCodeParser.NOT:
                            self.state = 924
                            self.match(PeopleCodeParser.NOT)


                        self.state = 927
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 51)) & ~0x3f) == 0 and ((1 << (_la - 51)) & ((1 << (PeopleCodeParser.GE - 51)) | (1 << (PeopleCodeParser.GT - 51)) | (1 << (PeopleCodeParser.LE - 51)) | (1 << (PeopleCodeParser.LT - 51)))) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 928
                        self.expression(8)
                        pass

                    elif la_ == 5:
                        localctx = PeopleCodeParser.EqualityExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 929
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 931
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==PeopleCodeParser.NOT:
                            self.state = 930
                            self.match(PeopleCodeParser.NOT)


                        self.state = 933
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PeopleCodeParser.EQ or _la==PeopleCodeParser.NEQ):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 934
                        self.expression(7)
                        pass

                    elif la_ == 6:
                        localctx = PeopleCodeParser.AndOrExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 935
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 936
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==PeopleCodeParser.AND or _la==PeopleCodeParser.OR):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 937
                        self.expression(6)
                        pass

                    elif la_ == 7:
                        localctx = PeopleCodeParser.ConcatenationExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 938
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 939
                        self.match(PeopleCodeParser.PIPE)
                        self.state = 940
                        self.expression(5)
                        pass

                    elif la_ == 8:
                        localctx = PeopleCodeParser.ClassCastExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 941
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 942
                        self.match(PeopleCodeParser.AS)
                        self.state = 945
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                        if la_ == 1:
                            self.state = 943
                            self.appClassPath()
                            pass

                        elif la_ == 2:
                            self.state = 944
                            self.genericID()
                            pass


                        pass

                    elif la_ == 9:
                        localctx = PeopleCodeParser.ArrayIndexExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 947
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 948
                        self.match(PeopleCodeParser.LBRACKET)
                        self.state = 949
                        self.expressionList()
                        self.state = 950
                        self.match(PeopleCodeParser.RBRACKET)
                        pass

                    elif la_ == 10:
                        localctx = PeopleCodeParser.DotAccessExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 952
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 954 
                        self._errHandler.sync(self)
                        _alt = 1
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt == 1:
                                self.state = 953
                                self.dotAccess()

                            else:
                                raise NoViableAltException(self)
                            self.state = 956 
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,126,self._ctx)

                        pass

                    elif la_ == 11:
                        localctx = PeopleCodeParser.StringObjectReferenceExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 958
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 959
                        self.match(PeopleCodeParser.DOT)
                        self.state = 960
                        self.match(PeopleCodeParser.StringLiteral)
                        pass

                    elif la_ == 12:
                        localctx = PeopleCodeParser.ImplicitSubindexExprContext(self, PeopleCodeParser.ExpressionContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                        self.state = 961
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 962
                        self.match(PeopleCodeParser.LPAREN)
                        self.state = 963
                        self.expression(0)
                        self.state = 964
                        self.match(PeopleCodeParser.RPAREN)
                        pass

             
                self.state = 970
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,128,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SimpleFunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_simpleFunctionCall

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpleFunctionCall" ):
                return visitor.visitSimpleFunctionCall(self)
            else:
                return visitor.visitChildren(self)




    def simpleFunctionCall(self):

        localctx = PeopleCodeParser.SimpleFunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_simpleFunctionCall)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.genericID()
            self.state = 972
            self.match(PeopleCodeParser.LPAREN)
            self.state = 974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PeopleCodeParser.LPAREN - 65)) | (1 << (PeopleCodeParser.METHOD - 65)) | (1 << (PeopleCodeParser.NOT - 65)) | (1 << (PeopleCodeParser.NULL - 65)) | (1 << (PeopleCodeParser.OF - 65)) | (1 << (PeopleCodeParser.OUT - 65)) | (1 << (PeopleCodeParser.PRIVATE - 65)) | (1 << (PeopleCodeParser.PROPERTY - 65)) | (1 << (PeopleCodeParser.READONLY - 65)) | (1 << (PeopleCodeParser.SET - 65)) | (1 << (PeopleCodeParser.STEP - 65)) | (1 << (PeopleCodeParser.SUBTR - 65)) | (1 << (PeopleCodeParser.SUPER - 65)) | (1 << (PeopleCodeParser.THROW - 65)) | (1 << (PeopleCodeParser.TRY - 65)) | (1 << (PeopleCodeParser.VALUE - 65)) | (1 << (PeopleCodeParser.ANY - 65)) | (1 << (PeopleCodeParser.BOOLEAN - 65)) | (1 << (PeopleCodeParser.DATE - 65)) | (1 << (PeopleCodeParser.DATETIME - 65)) | (1 << (PeopleCodeParser.FLOAT - 65)) | (1 << (PeopleCodeParser.NUMBER - 65)) | (1 << (PeopleCodeParser.STRING - 65)) | (1 << (PeopleCodeParser.TIME - 65)) | (1 << (PeopleCodeParser.METADATA - 65)) | (1 << (PeopleCodeParser.DecimalLiteral - 65)) | (1 << (PeopleCodeParser.IntegerLiteral - 65)) | (1 << (PeopleCodeParser.StringLiteral - 65)) | (1 << (PeopleCodeParser.BooleanLiteral - 65)) | (1 << (PeopleCodeParser.RecordEvent - 65)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 65)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 65)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 65)) | (1 << (PeopleCodeParser.GENERIC_ID - 65)) | (1 << (PeopleCodeParser.USER_VARIABLE - 65)))) != 0):
                self.state = 973
                self.functionCallArguments()


            self.state = 976
            self.match(PeopleCodeParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DotAccessContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(PeopleCodeParser.DOT, 0)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_dotAccess

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotAccess" ):
                listener.enterDotAccess(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotAccess" ):
                listener.exitDotAccess(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotAccess" ):
                return visitor.visitDotAccess(self)
            else:
                return visitor.visitChildren(self)




    def dotAccess(self):

        localctx = PeopleCodeParser.DotAccessContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_dotAccess)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(PeopleCodeParser.DOT)
            self.state = 979
            self.genericID()
            self.state = 985
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.state = 980
                self.match(PeopleCodeParser.LPAREN)
                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PeopleCodeParser.LPAREN - 65)) | (1 << (PeopleCodeParser.METHOD - 65)) | (1 << (PeopleCodeParser.NOT - 65)) | (1 << (PeopleCodeParser.NULL - 65)) | (1 << (PeopleCodeParser.OF - 65)) | (1 << (PeopleCodeParser.OUT - 65)) | (1 << (PeopleCodeParser.PRIVATE - 65)) | (1 << (PeopleCodeParser.PROPERTY - 65)) | (1 << (PeopleCodeParser.READONLY - 65)) | (1 << (PeopleCodeParser.SET - 65)) | (1 << (PeopleCodeParser.STEP - 65)) | (1 << (PeopleCodeParser.SUBTR - 65)) | (1 << (PeopleCodeParser.SUPER - 65)) | (1 << (PeopleCodeParser.THROW - 65)) | (1 << (PeopleCodeParser.TRY - 65)) | (1 << (PeopleCodeParser.VALUE - 65)) | (1 << (PeopleCodeParser.ANY - 65)) | (1 << (PeopleCodeParser.BOOLEAN - 65)) | (1 << (PeopleCodeParser.DATE - 65)) | (1 << (PeopleCodeParser.DATETIME - 65)) | (1 << (PeopleCodeParser.FLOAT - 65)) | (1 << (PeopleCodeParser.NUMBER - 65)) | (1 << (PeopleCodeParser.STRING - 65)) | (1 << (PeopleCodeParser.TIME - 65)) | (1 << (PeopleCodeParser.METADATA - 65)) | (1 << (PeopleCodeParser.DecimalLiteral - 65)) | (1 << (PeopleCodeParser.IntegerLiteral - 65)) | (1 << (PeopleCodeParser.StringLiteral - 65)) | (1 << (PeopleCodeParser.BooleanLiteral - 65)) | (1 << (PeopleCodeParser.RecordEvent - 65)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 65)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 65)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 65)) | (1 << (PeopleCodeParser.GENERIC_ID - 65)) | (1 << (PeopleCodeParser.USER_VARIABLE - 65)))) != 0):
                    self.state = 981
                    self.functionCallArguments()


                self.state = 984
                self.match(PeopleCodeParser.RPAREN)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AllowableFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANY(self):
            return self.getToken(PeopleCodeParser.ANY, 0)

        def ARRAY(self):
            return self.getToken(PeopleCodeParser.ARRAY, 0)

        def BOOLEAN(self):
            return self.getToken(PeopleCodeParser.BOOLEAN, 0)

        def COMPONENT(self):
            return self.getToken(PeopleCodeParser.COMPONENT, 0)

        def CONSTANT(self):
            return self.getToken(PeopleCodeParser.CONSTANT, 0)

        def DATETIME(self):
            return self.getToken(PeopleCodeParser.DATETIME, 0)

        def DOC(self):
            return self.getToken(PeopleCodeParser.DOC, 0)

        def EXCEPTION(self):
            return self.getToken(PeopleCodeParser.EXCEPTION, 0)

        def FLOAT(self):
            return self.getToken(PeopleCodeParser.FLOAT, 0)

        def NUMBER(self):
            return self.getToken(PeopleCodeParser.NUMBER, 0)

        def OF(self):
            return self.getToken(PeopleCodeParser.OF, 0)

        def STEP(self):
            return self.getToken(PeopleCodeParser.STEP, 0)

        def RecordEvent(self):
            return self.getToken(PeopleCodeParser.RecordEvent, 0)

        def GENERIC_ID(self):
            return self.getToken(PeopleCodeParser.GENERIC_ID, 0)

        def GENERIC_ID_LIMITED(self):
            return self.getToken(PeopleCodeParser.GENERIC_ID_LIMITED, 0)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_allowableFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAllowableFunctionName" ):
                listener.enterAllowableFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAllowableFunctionName" ):
                listener.exitAllowableFunctionName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAllowableFunctionName" ):
                return visitor.visitAllowableFunctionName(self)
            else:
                return visitor.visitChildren(self)




    def allowableFunctionName(self):

        localctx = PeopleCodeParser.AllowableFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_allowableFunctionName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.EXCEPTION))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (PeopleCodeParser.OF - 71)) | (1 << (PeopleCodeParser.STEP - 71)) | (1 << (PeopleCodeParser.ANY - 71)) | (1 << (PeopleCodeParser.BOOLEAN - 71)) | (1 << (PeopleCodeParser.DATETIME - 71)) | (1 << (PeopleCodeParser.FLOAT - 71)) | (1 << (PeopleCodeParser.NUMBER - 71)) | (1 << (PeopleCodeParser.RecordEvent - 71)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 71)) | (1 << (PeopleCodeParser.GENERIC_ID - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GenericIDContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CATCH(self):
            return self.getToken(PeopleCodeParser.CATCH, 0)

        def CLASS(self):
            return self.getToken(PeopleCodeParser.CLASS, 0)

        def CONTINUE(self):
            return self.getToken(PeopleCodeParser.CONTINUE, 0)

        def CREATE(self):
            return self.getToken(PeopleCodeParser.CREATE, 0)

        def DATE(self):
            return self.getToken(PeopleCodeParser.DATE, 0)

        def EXTENDS(self):
            return self.getToken(PeopleCodeParser.EXTENDS, 0)

        def GET(self):
            return self.getToken(PeopleCodeParser.GET, 0)

        def IMPORT(self):
            return self.getToken(PeopleCodeParser.IMPORT, 0)

        def INSTANCE(self):
            return self.getToken(PeopleCodeParser.INSTANCE, 0)

        def INTEGER(self):
            return self.getToken(PeopleCodeParser.INTEGER, 0)

        def INTERFACE(self):
            return self.getToken(PeopleCodeParser.INTERFACE, 0)

        def METHOD(self):
            return self.getToken(PeopleCodeParser.METHOD, 0)

        def OUT(self):
            return self.getToken(PeopleCodeParser.OUT, 0)

        def PRIVATE(self):
            return self.getToken(PeopleCodeParser.PRIVATE, 0)

        def PROPERTY(self):
            return self.getToken(PeopleCodeParser.PROPERTY, 0)

        def READONLY(self):
            return self.getToken(PeopleCodeParser.READONLY, 0)

        def SET(self):
            return self.getToken(PeopleCodeParser.SET, 0)

        def STRING(self):
            return self.getToken(PeopleCodeParser.STRING, 0)

        def THROW(self):
            return self.getToken(PeopleCodeParser.THROW, 0)

        def TIME(self):
            return self.getToken(PeopleCodeParser.TIME, 0)

        def TRY(self):
            return self.getToken(PeopleCodeParser.TRY, 0)

        def VALUE(self):
            return self.getToken(PeopleCodeParser.VALUE, 0)

        def allowableFunctionName(self):
            return self.getTypedRuleContext(PeopleCodeParser.AllowableFunctionNameContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_genericID

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGenericID" ):
                listener.enterGenericID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGenericID" ):
                listener.exitGenericID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGenericID" ):
                return visitor.visitGenericID(self)
            else:
                return visitor.visitChildren(self)




    def genericID(self):

        localctx = PeopleCodeParser.GenericIDContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_genericID)
        try:
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.CATCH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 989
                self.match(PeopleCodeParser.CATCH)
                pass
            elif token in [PeopleCodeParser.CLASS]:
                self.enterOuterAlt(localctx, 2)
                self.state = 990
                self.match(PeopleCodeParser.CLASS)
                pass
            elif token in [PeopleCodeParser.CONTINUE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 991
                self.match(PeopleCodeParser.CONTINUE)
                pass
            elif token in [PeopleCodeParser.CREATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(PeopleCodeParser.CREATE)
                pass
            elif token in [PeopleCodeParser.DATE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 993
                self.match(PeopleCodeParser.DATE)
                pass
            elif token in [PeopleCodeParser.EXTENDS]:
                self.enterOuterAlt(localctx, 6)
                self.state = 994
                self.match(PeopleCodeParser.EXTENDS)
                pass
            elif token in [PeopleCodeParser.GET]:
                self.enterOuterAlt(localctx, 7)
                self.state = 995
                self.match(PeopleCodeParser.GET)
                pass
            elif token in [PeopleCodeParser.IMPORT]:
                self.enterOuterAlt(localctx, 8)
                self.state = 996
                self.match(PeopleCodeParser.IMPORT)
                pass
            elif token in [PeopleCodeParser.INSTANCE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 997
                self.match(PeopleCodeParser.INSTANCE)
                pass
            elif token in [PeopleCodeParser.INTEGER]:
                self.enterOuterAlt(localctx, 10)
                self.state = 998
                self.match(PeopleCodeParser.INTEGER)
                pass
            elif token in [PeopleCodeParser.INTERFACE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 999
                self.match(PeopleCodeParser.INTERFACE)
                pass
            elif token in [PeopleCodeParser.METHOD]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1000
                self.match(PeopleCodeParser.METHOD)
                pass
            elif token in [PeopleCodeParser.OUT]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1001
                self.match(PeopleCodeParser.OUT)
                pass
            elif token in [PeopleCodeParser.PRIVATE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1002
                self.match(PeopleCodeParser.PRIVATE)
                pass
            elif token in [PeopleCodeParser.PROPERTY]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1003
                self.match(PeopleCodeParser.PROPERTY)
                pass
            elif token in [PeopleCodeParser.READONLY]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1004
                self.match(PeopleCodeParser.READONLY)
                pass
            elif token in [PeopleCodeParser.SET]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1005
                self.match(PeopleCodeParser.SET)
                pass
            elif token in [PeopleCodeParser.STRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1006
                self.match(PeopleCodeParser.STRING)
                pass
            elif token in [PeopleCodeParser.THROW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1007
                self.match(PeopleCodeParser.THROW)
                pass
            elif token in [PeopleCodeParser.TIME]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1008
                self.match(PeopleCodeParser.TIME)
                pass
            elif token in [PeopleCodeParser.TRY]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1009
                self.match(PeopleCodeParser.TRY)
                pass
            elif token in [PeopleCodeParser.VALUE]:
                self.enterOuterAlt(localctx, 22)
                self.state = 1010
                self.match(PeopleCodeParser.VALUE)
                pass
            elif token in [PeopleCodeParser.ARRAY, PeopleCodeParser.COMPONENT, PeopleCodeParser.CONSTANT, PeopleCodeParser.DOC, PeopleCodeParser.EXCEPTION, PeopleCodeParser.OF, PeopleCodeParser.STEP, PeopleCodeParser.ANY, PeopleCodeParser.BOOLEAN, PeopleCodeParser.DATETIME, PeopleCodeParser.FLOAT, PeopleCodeParser.NUMBER, PeopleCodeParser.RecordEvent, PeopleCodeParser.GENERIC_ID_LIMITED, PeopleCodeParser.GENERIC_ID]:
                self.enterOuterAlt(localctx, 23)
                self.state = 1011
                self.allowableFunctionName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_ident

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class IdentSuperContext(IdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.IdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SUPER(self):
            return self.getToken(PeopleCodeParser.SUPER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentSuper" ):
                listener.enterIdentSuper(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentSuper" ):
                listener.exitIdentSuper(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentSuper" ):
                return visitor.visitIdentSuper(self)
            else:
                return visitor.visitChildren(self)


    class IdentUserVariableContext(IdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.IdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentUserVariable" ):
                listener.enterIdentUserVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentUserVariable" ):
                listener.exitIdentUserVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentUserVariable" ):
                return visitor.visitIdentUserVariable(self)
            else:
                return visitor.visitChildren(self)


    class IdentSystemConstantContext(IdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.IdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSTEM_CONSTANT(self):
            return self.getToken(PeopleCodeParser.SYSTEM_CONSTANT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentSystemConstant" ):
                listener.enterIdentSystemConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentSystemConstant" ):
                listener.exitIdentSystemConstant(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentSystemConstant" ):
                return visitor.visitIdentSystemConstant(self)
            else:
                return visitor.visitChildren(self)


    class IdentSystemVariableContext(IdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.IdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SYSTEM_VARIABLE(self):
            return self.getToken(PeopleCodeParser.SYSTEM_VARIABLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentSystemVariable" ):
                listener.enterIdentSystemVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentSystemVariable" ):
                listener.exitIdentSystemVariable(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentSystemVariable" ):
                return visitor.visitIdentSystemVariable(self)
            else:
                return visitor.visitChildren(self)


    class IdentGenericIDContext(IdentContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PeopleCodeParser.IdentContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def genericID(self):
            return self.getTypedRuleContext(PeopleCodeParser.GenericIDContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdentGenericID" ):
                listener.enterIdentGenericID(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdentGenericID" ):
                listener.exitIdentGenericID(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdentGenericID" ):
                return visitor.visitIdentGenericID(self)
            else:
                return visitor.visitChildren(self)



    def ident(self):

        localctx = PeopleCodeParser.IdentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_ident)
        try:
            self.state = 1019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [PeopleCodeParser.SUPER]:
                localctx = PeopleCodeParser.IdentSuperContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.match(PeopleCodeParser.SUPER)
                pass
            elif token in [PeopleCodeParser.SYSTEM_VARIABLE]:
                localctx = PeopleCodeParser.IdentSystemVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(PeopleCodeParser.SYSTEM_VARIABLE)
                pass
            elif token in [PeopleCodeParser.SYSTEM_CONSTANT]:
                localctx = PeopleCodeParser.IdentSystemConstantContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1016
                self.match(PeopleCodeParser.SYSTEM_CONSTANT)
                pass
            elif token in [PeopleCodeParser.USER_VARIABLE]:
                localctx = PeopleCodeParser.IdentUserVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.match(PeopleCodeParser.USER_VARIABLE)
                pass
            elif token in [PeopleCodeParser.ARRAY, PeopleCodeParser.CATCH, PeopleCodeParser.CLASS, PeopleCodeParser.COMPONENT, PeopleCodeParser.CONSTANT, PeopleCodeParser.CONTINUE, PeopleCodeParser.CREATE, PeopleCodeParser.DOC, PeopleCodeParser.EXCEPTION, PeopleCodeParser.EXTENDS, PeopleCodeParser.GET, PeopleCodeParser.IMPORT, PeopleCodeParser.INSTANCE, PeopleCodeParser.INTERFACE, PeopleCodeParser.INTEGER, PeopleCodeParser.METHOD, PeopleCodeParser.OF, PeopleCodeParser.OUT, PeopleCodeParser.PRIVATE, PeopleCodeParser.PROPERTY, PeopleCodeParser.READONLY, PeopleCodeParser.SET, PeopleCodeParser.STEP, PeopleCodeParser.THROW, PeopleCodeParser.TRY, PeopleCodeParser.VALUE, PeopleCodeParser.ANY, PeopleCodeParser.BOOLEAN, PeopleCodeParser.DATE, PeopleCodeParser.DATETIME, PeopleCodeParser.FLOAT, PeopleCodeParser.NUMBER, PeopleCodeParser.STRING, PeopleCodeParser.TIME, PeopleCodeParser.RecordEvent, PeopleCodeParser.GENERIC_ID_LIMITED, PeopleCodeParser.GENERIC_ID]:
                localctx = PeopleCodeParser.IdentGenericIDContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1018
                self.genericID()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_expressionList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionList" ):
                listener.enterExpressionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionList" ):
                listener.exitExpressionList(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionList" ):
                return visitor.visitExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def expressionList(self):

        localctx = PeopleCodeParser.ExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_expressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.expression(0)
            self.state = 1026
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.COMMA:
                self.state = 1022
                self.match(PeopleCodeParser.COMMA)
                self.state = 1023
                self.expression(0)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObjectCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(PeopleCodeParser.CREATE, 0)

        def appClassPath(self):
            return self.getTypedRuleContext(PeopleCodeParser.AppClassPathContext,0)


        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def functionCallArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionCallArgumentsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_objectCreate

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObjectCreate" ):
                listener.enterObjectCreate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObjectCreate" ):
                listener.exitObjectCreate(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitObjectCreate" ):
                return visitor.visitObjectCreate(self)
            else:
                return visitor.visitChildren(self)




    def objectCreate(self):

        localctx = PeopleCodeParser.ObjectCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_objectCreate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(PeopleCodeParser.CREATE)
            self.state = 1030
            self.appClassPath()
            self.state = 1031
            self.match(PeopleCodeParser.LPAREN)
            self.state = 1033
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (PeopleCodeParser.LPAREN - 65)) | (1 << (PeopleCodeParser.METHOD - 65)) | (1 << (PeopleCodeParser.NOT - 65)) | (1 << (PeopleCodeParser.NULL - 65)) | (1 << (PeopleCodeParser.OF - 65)) | (1 << (PeopleCodeParser.OUT - 65)) | (1 << (PeopleCodeParser.PRIVATE - 65)) | (1 << (PeopleCodeParser.PROPERTY - 65)) | (1 << (PeopleCodeParser.READONLY - 65)) | (1 << (PeopleCodeParser.SET - 65)) | (1 << (PeopleCodeParser.STEP - 65)) | (1 << (PeopleCodeParser.SUBTR - 65)) | (1 << (PeopleCodeParser.SUPER - 65)) | (1 << (PeopleCodeParser.THROW - 65)) | (1 << (PeopleCodeParser.TRY - 65)) | (1 << (PeopleCodeParser.VALUE - 65)) | (1 << (PeopleCodeParser.ANY - 65)) | (1 << (PeopleCodeParser.BOOLEAN - 65)) | (1 << (PeopleCodeParser.DATE - 65)) | (1 << (PeopleCodeParser.DATETIME - 65)) | (1 << (PeopleCodeParser.FLOAT - 65)) | (1 << (PeopleCodeParser.NUMBER - 65)) | (1 << (PeopleCodeParser.STRING - 65)) | (1 << (PeopleCodeParser.TIME - 65)) | (1 << (PeopleCodeParser.METADATA - 65)) | (1 << (PeopleCodeParser.DecimalLiteral - 65)) | (1 << (PeopleCodeParser.IntegerLiteral - 65)) | (1 << (PeopleCodeParser.StringLiteral - 65)) | (1 << (PeopleCodeParser.BooleanLiteral - 65)) | (1 << (PeopleCodeParser.RecordEvent - 65)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 65)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 65)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 65)) | (1 << (PeopleCodeParser.GENERIC_ID - 65)) | (1 << (PeopleCodeParser.USER_VARIABLE - 65)))) != 0):
                self.state = 1032
                self.functionCallArguments()


            self.state = 1035
            self.match(PeopleCodeParser.RPAREN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionCallArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallArguments" ):
                listener.enterFunctionCallArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallArguments" ):
                listener.exitFunctionCallArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionCallArguments" ):
                return visitor.visitFunctionCallArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionCallArguments(self):

        localctx = PeopleCodeParser.FunctionCallArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_functionCallArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.expression(0)
            self.state = 1042
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.COMMA:
                self.state = 1038
                self.match(PeopleCodeParser.COMMA)
                self.state = 1039
                self.expression(0)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.FunctionDefinitionContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.FunctionDefinitionContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinitions" ):
                listener.enterFunctionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinitions" ):
                listener.exitFunctionDefinitions(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinitions" ):
                return visitor.visitFunctionDefinitions(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinitions(self):

        localctx = PeopleCodeParser.FunctionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_functionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1045
            self.functionDefinition()
            self.state = 1054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 1047 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1046
                    self.match(PeopleCodeParser.SEMI)
                    self.state = 1049 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==PeopleCodeParser.SEMI):
                        break

                self.state = 1051
                self.functionDefinition()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PeopleCodeParser.FUNCTION, 0)

        def allowableFunctionName(self):
            return self.getTypedRuleContext(PeopleCodeParser.AllowableFunctionNameContext,0)


        def END_FUNCTION(self):
            return self.getToken(PeopleCodeParser.END_FUNCTION, 0)

        def LPAREN(self):
            return self.getToken(PeopleCodeParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PeopleCodeParser.RPAREN, 0)

        def RETURNS(self):
            return self.getToken(PeopleCodeParser.RETURNS, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def DOC(self):
            return self.getToken(PeopleCodeParser.DOC, 0)

        def StringLiteral(self):
            return self.getToken(PeopleCodeParser.StringLiteral, 0)

        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.SEMI)
            else:
                return self.getToken(PeopleCodeParser.SEMI, i)

        def statements(self):
            return self.getTypedRuleContext(PeopleCodeParser.StatementsContext,0)


        def functionArguments(self):
            return self.getTypedRuleContext(PeopleCodeParser.FunctionArgumentsContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionDefinition" ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionDefinition" ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionDefinition" ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = PeopleCodeParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.match(PeopleCodeParser.FUNCTION)
            self.state = 1058
            self.allowableFunctionName()
            self.state = 1064
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.state = 1059
                self.match(PeopleCodeParser.LPAREN)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==PeopleCodeParser.USER_VARIABLE:
                    self.state = 1060
                    self.functionArguments()


                self.state = 1063
                self.match(PeopleCodeParser.RPAREN)


            self.state = 1068
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.RETURNS:
                self.state = 1066
                self.match(PeopleCodeParser.RETURNS)
                self.state = 1067
                self.typeT()


            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.state = 1070
                self.match(PeopleCodeParser.DOC)
                self.state = 1071
                self.match(PeopleCodeParser.StringLiteral)


            self.state = 1077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==PeopleCodeParser.SEMI:
                self.state = 1074
                self.match(PeopleCodeParser.SEMI)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << PeopleCodeParser.ARRAY) | (1 << PeopleCodeParser.AT) | (1 << PeopleCodeParser.BREAK) | (1 << PeopleCodeParser.CATCH) | (1 << PeopleCodeParser.CLASS) | (1 << PeopleCodeParser.COMPONENT) | (1 << PeopleCodeParser.CONSTANT) | (1 << PeopleCodeParser.CONTINUE) | (1 << PeopleCodeParser.CREATE) | (1 << PeopleCodeParser.DOC) | (1 << PeopleCodeParser.ERROR) | (1 << PeopleCodeParser.EVALUATE) | (1 << PeopleCodeParser.EXCEPTION) | (1 << PeopleCodeParser.EXIT) | (1 << PeopleCodeParser.EXTENDS) | (1 << PeopleCodeParser.FOR) | (1 << PeopleCodeParser.GET) | (1 << PeopleCodeParser.IF) | (1 << PeopleCodeParser.IMPORT) | (1 << PeopleCodeParser.INSTANCE) | (1 << PeopleCodeParser.INTERFACE) | (1 << PeopleCodeParser.INTEGER))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (PeopleCodeParser.LOCAL - 64)) | (1 << (PeopleCodeParser.LPAREN - 64)) | (1 << (PeopleCodeParser.METHOD - 64)) | (1 << (PeopleCodeParser.NOT - 64)) | (1 << (PeopleCodeParser.NULL - 64)) | (1 << (PeopleCodeParser.OF - 64)) | (1 << (PeopleCodeParser.OUT - 64)) | (1 << (PeopleCodeParser.PRIVATE - 64)) | (1 << (PeopleCodeParser.PROPERTY - 64)) | (1 << (PeopleCodeParser.READONLY - 64)) | (1 << (PeopleCodeParser.REPEAT - 64)) | (1 << (PeopleCodeParser.RETURN - 64)) | (1 << (PeopleCodeParser.SET - 64)) | (1 << (PeopleCodeParser.STEP - 64)) | (1 << (PeopleCodeParser.SUBTR - 64)) | (1 << (PeopleCodeParser.SUPER - 64)) | (1 << (PeopleCodeParser.THROW - 64)) | (1 << (PeopleCodeParser.TRY - 64)) | (1 << (PeopleCodeParser.VALUE - 64)) | (1 << (PeopleCodeParser.WARNING - 64)) | (1 << (PeopleCodeParser.WHILE - 64)) | (1 << (PeopleCodeParser.ANY - 64)) | (1 << (PeopleCodeParser.BOOLEAN - 64)) | (1 << (PeopleCodeParser.DATE - 64)) | (1 << (PeopleCodeParser.DATETIME - 64)) | (1 << (PeopleCodeParser.FLOAT - 64)) | (1 << (PeopleCodeParser.NUMBER - 64)) | (1 << (PeopleCodeParser.STRING - 64)) | (1 << (PeopleCodeParser.TIME - 64)) | (1 << (PeopleCodeParser.METADATA - 64)) | (1 << (PeopleCodeParser.DecimalLiteral - 64)) | (1 << (PeopleCodeParser.IntegerLiteral - 64)) | (1 << (PeopleCodeParser.StringLiteral - 64)) | (1 << (PeopleCodeParser.BooleanLiteral - 64)) | (1 << (PeopleCodeParser.RecordEvent - 64)) | (1 << (PeopleCodeParser.SYSTEM_VARIABLE - 64)) | (1 << (PeopleCodeParser.SYSTEM_CONSTANT - 64)) | (1 << (PeopleCodeParser.GENERIC_ID_LIMITED - 64)) | (1 << (PeopleCodeParser.GENERIC_ID - 64)) | (1 << (PeopleCodeParser.USER_VARIABLE - 64)))) != 0):
                self.state = 1080
                self.statements()


            self.state = 1083
            self.match(PeopleCodeParser.END_FUNCTION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionArgument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PeopleCodeParser.FunctionArgumentContext)
            else:
                return self.getTypedRuleContext(PeopleCodeParser.FunctionArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PeopleCodeParser.COMMA)
            else:
                return self.getToken(PeopleCodeParser.COMMA, i)

        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionArguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArguments" ):
                listener.enterFunctionArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArguments" ):
                listener.exitFunctionArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArguments" ):
                return visitor.visitFunctionArguments(self)
            else:
                return visitor.visitChildren(self)




    def functionArguments(self):

        localctx = PeopleCodeParser.FunctionArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_functionArguments)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.functionArgument()
            self.state = 1090
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,145,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1086
                    self.match(PeopleCodeParser.COMMA)
                    self.state = 1087
                    self.functionArgument() 
                self.state = 1092
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,145,self._ctx)

            self.state = 1094
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.COMMA:
                self.state = 1093
                self.match(PeopleCodeParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USER_VARIABLE(self):
            return self.getToken(PeopleCodeParser.USER_VARIABLE, 0)

        def AS(self):
            return self.getToken(PeopleCodeParser.AS, 0)

        def typeT(self):
            return self.getTypedRuleContext(PeopleCodeParser.TypeTContext,0)


        def getRuleIndex(self):
            return PeopleCodeParser.RULE_functionArgument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgument" ):
                listener.enterFunctionArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgument" ):
                listener.exitFunctionArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionArgument" ):
                return visitor.visitFunctionArgument(self)
            else:
                return visitor.visitChildren(self)




    def functionArgument(self):

        localctx = PeopleCodeParser.FunctionArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionArgument)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1096
            self.match(PeopleCodeParser.USER_VARIABLE)
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==PeopleCodeParser.AS:
                self.state = 1097
                self.match(PeopleCodeParser.AS)
                self.state = 1098
                self.typeT()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[60] = self.expression_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 13)
         




