import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:CEController;
import HR_TEXT_CATALOG:TextCatalog;
import HCR_JPM_PKG:Profiles:Utilities:ContentController;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink;
import HRS_CANDIDATE_MANAGER:OBJ_RES_TEMPLATE:BUSINESS:*;
import HRS_COMMON:COMMON:UTIL:*;
import HRS_BO:BUS:BODefaults;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UTIL:FamilyCombo;
import HRS_BO:BUS:*;
import EO:CA:Address;
import HRS_ARM:UTIL:Utility;
import HRTR_UTILITIES:StringHashtable;
import HRS_COMMON:HRS_CONTENT:UI:ContentGridLayout;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:*;
import HCR_JPM_PKG:Profiles:BUS:FieldPrompts;
import EOTL_WIZARD:*;
import HRS_CANDIDATE_MANAGER:CMP_LOGON:BUS:Applicant;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:CEController;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:*;
import HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:OFCCPController;

class PageLayout
   method PageLayout(&templateId As number);
   method getResumeTemplateID() Returns number;
   method changeState(&index As number);
   method getResumeType() Returns string;
   method getCurrentPage() Returns number;
   method getHyperlinks() Returns array of HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink;
   method hasQuestionairre() Returns boolean;
   method hasTraining() Returns boolean;
   method hasPersInfo() Returns boolean;
   method hasResumeOptions() Returns boolean;
   method hasCoverLetterOptions() Returns boolean;
   method isResumeRequired() Returns boolean;
   method isCoverLetterRequired() Returns boolean;
   method hasResume() Returns boolean;
   method hasCoverLetter() Returns boolean;
   method hasWorkExp() Returns boolean;
   method hasPriorityPlacement() Returns boolean;
   method hasAddr() Returns boolean;
   method hasPhone() Returns boolean;
   method hasEmail() Returns boolean;
   method selfIdent() Returns boolean;
   method selfIdentApplicable() Returns boolean;
   method initHyperlinks();
   method nextPage();
   method overrideTemplate(&aSections As array of string);
   method setReviewSubmitSections();
   method previousPage();
   method resetErrors();
   method saveState();
   method setGridLabels();
   method setLabels();
   method setResumeType(&type As string);
   method formatJobBasket();
   method formatRecruitingSections();
   method formatAttachments(&rsAttachments As Rowset);
   method formatWorkExp(&rs_WorkExp As Rowset);
   method formatTraining(&rs_Training As Rowset);
   method formatReferences(&rs_References As Rowset);
   method formatDiversity(&rs_EthnicGroups As Rowset);
   method formatQuestionnaire(&rs_Questionnaire As Rowset);
   method formatOpenEndedQuestion(&rs_OpenEndedQuestion As Rowset);
   method formatSourceDropDown(&rs_Source As Rowset);
   method formatJPMContent(&rs_JPMContent As Rowset, &nSectionPgSeq As number);
   method formatPlacement(&rs_Placement As Rowset);
   method formatFederal();
   method populateExistingResume(&rowUseExisting As Row);
   method populateExistingResumeRowset(&nbr_ResumeId As number);
   method formatResume();
   method loadJobs();
   method loadResume();
   method hideunhideNextPrevious();
   method populateCntctInfo();
   method isAddressPresent(&nbr_PersonId As number) Returns boolean;
   method displayProfile(&nbr_PersonId As number);
   method setQuestionairre(&aJobOpenings As array of number);
   method setOpenEndedQuestion(&aJobOpenings As array of number);
   method formatReferral();
   method setOverride(&bol_Override As boolean);
   method setTemplateCollection(&ary_Templates As array of number);
   method setResumeCollection();
   method setAdditionalInfo(&bol_AddInfo As boolean);
   method JoinTemplateColl(&ary_Templates As array of number);
   method getExistingSections() Returns array of array of string;
   method handleDropDownAndPrompt(&fld_pDropDown As Field, &fld_pPrompt As Field, &fld_promptRelatedField As Field, &str_pKeyFieldName As string, &str_pValueFieldName As string, &str_pWhereClause As string);
   method formatPreScreeningQstn(&rs_ResumeQuestions As Rowset);
   method setResumeTemplateQstn(&nbr_ResumeTemplateId As number);
   method setJOPreScreeningQstn(&aJobOpenings As array of number);
   method formatPreScreeningResults(&boo_PreScreenPassed As boolean);
   method formatJOPreScreeningResults();
   method ShowIfEligibleToApply(&nbr_Person_Id As number, &nbr_ProfileSeq As number, &nbr_JO_Id As number) Returns string;
   method hasNoApplAddItems(&aJPMsections As array of string) Returns boolean;
   method getQuestionOrderNbr(&nbr_JobOpeningId As number, &nbr_QuestionId As number) Returns number;
   method formatLocation();
   method handleLocDropDownAndPrompt(&fld_pDropDown As Field, &fld_pPrompt As Field, &fld_promptRelatedField As Field, &str_pKeyFieldName As string, &str_pValueFieldName As string, &str_pSetIDList As string, &str_WhichField As string);
   method resetLocation();
   method resetQuestionairre(&aJobOpenings As array of number, &personId As number, &profileSeq As number); /* 750307 */
   method hideQuestionnaireSections();
   method getPageCount() Returns integer;
   method getSectionPageNumber(&strSection As string) Returns integer;
   method sectionExists(&strSection As string) Returns boolean;
   method getPageNumberStep(&intPageNumber As integer) Returns EOTL_WIZARD:StepDefn;
   method getCurrentPageNumber() Returns integer;
   method getStepPageNumber(&strTemplateID As string) Returns integer;
   method goToStepBySection(&strSection As string);
   method goToStepByPageNumber(&intPageNumber As integer);
   method goToStepByTemplateID(&strStepTemplateID As string);
   method stepContainsSection(&objStep As EOTL_WIZARD:StepDefn, &strSection As string) Returns boolean;
   method stepContainsAnySection(&objStep As EOTL_WIZARD:StepDefn, &astrSections As array of string) Returns boolean;
   method currentStepContainsSection(&strSection As string) Returns boolean;
   method getStepSections(&strTemplateID As string) Returns array of string;
   method getCurrentStepSections() Returns array of string;
   method getCurrentStepSectionCount() Returns integer;
   method getAllSections() Returns array of string;
   method stepExists(&strStepTemplateID As string) Returns boolean;
   method getCurrentStep() Returns EOTL_WIZARD:StepDefn;
   method getFurthestVisitedStep() Returns EOTL_WIZARD:StepDefn;
   method isFurthestVisitedStep() Returns boolean;
   method isFirstStep() Returns boolean;
   method isSectionRequired(&strSection As string) Returns boolean;
   method getStep(&strTemplateID As string) Returns EOTL_WIZARD:StepDefn;
   method getStepByIndex(&intIndex As integer) Returns EOTL_WIZARD:StepDefn;
   method getStepCount() Returns integer;
   method formatReviewContactInfo();
   method formatTextCatalogHTML(&strInput As string) Returns string;
   method formatStartStep();
   method startStepHasText() Returns boolean;
   method calculateStartTermsHash() Returns string;
   method checkRequiredSections(&strPageNumber As number);
   method checkResumeData();
   method checkResumeDataAfterEdit(&rowItem As Row);
   method checkResumeDataAfterDelete(&rowItem As Row);
   method defaultCurrency(&nbr_JobOpeningId As number) Returns string;
   method competenciesApplicable() Returns boolean;
   method questionnaireApplicable() Returns boolean;
   method priorityPlacementApplicable() Returns boolean;
   method federalPreferencesApplicable() Returns boolean;
   method getJobOpeningIDsArray() Returns array of number;
   method isPageHidden(&intPageNumber As integer) Returns boolean;
   method isReferralSourceRequired() Returns boolean;
   method isReferralSubsourceRequired() Returns boolean;
   method getAllSteps() Returns array of EOTL_WIZARD:StepDefn;
   method getAllStepsWithContainers() Returns array of EOTL_WIZARD:StepDefn;
   method getFirstStep() Returns EOTL_WIZARD:StepDefn;
   method getStepByNumber(&intIndex As integer) Returns EOTL_WIZARD:StepDefn;
   method isResumeTemplateChanged() Returns boolean;
   method areStartTermsChanged() Returns boolean;
   method getSavedLastStepID() Returns string;
   method getSavedCurrentStepID() Returns string;
   method getStepNumber(&strStep As string) Returns integer;
   method getCurrentStepNumber() Returns integer;
   method setCurrentStep(&strCurrentStepNew As string);
   method setLastStep(&strLastStepNew As string);
   method arePrescreeningQuestionsSet() Returns boolean;
   method formatOnlineScreeningNotices(&bForceRefresh As boolean, &intDeletedJobID As number);
   method formatOnlineScreeningResults();
   method formatDisability();
   method formatVeteran();
   method drawQuestionAnswers();
   
   method getFluidPageLayout() Returns object;
   method getPageName(&strClassicPageName As string) Returns string;
   method getFluidPageName(&strClassicPageName As string) Returns string;
   method getMenuName(&strClassicMenuName As string) Returns string;
   method getFluidMenuName(&strClassicMenuName As string) Returns string;
   method getTextCatalogID(&strClassicTextCatalogID As string) Returns string;
private
   method hideAllSections();
   method setPersonalInfoPref();
   
   instance object &objFluidPageLayout;
   instance array of HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink &aHyperlink;
   instance array of array of string &asection;
   instance array of number &anumHiddenPages;
   instance array of string &astrAdditionalSections;
   instance HRS_COMMON:HRS_CONTENT:UI:ContentGridLayout &Content_UI;
   instance boolean &bStepByStep;
   instance boolean &isOverride;
   instance boolean &bReferralSourceRequired;
   instance boolean &bReferralSubsourceRequired;
   instance number &thisIndex;
   instance number &myTemplate;
   instance array of number &i_ary_Templates;
   instance string &resumetype;
   instance string &strLastStep;
   instance string &strCurrentStep;
   instance boolean &bol_hasAdditionalInfo;
   instance boolean &bPrescreeningQuestionsSet;
   instance boolean &bReset;
   instance boolean &bResetTerms;
   instance boolean &bAccessibilityMode;
end-class;

Global HRS_CANDIDATE_MANAGER:CMP_LOGON:BUS:Applicant &applicant;
Global HRS_COMMON:COMMON:UTIL:AuthUtilities &g_hrs_auth; /* 635784 */
Global array of string &g_astrHRSCGJPMTypes;
Global array of boolean &g_abHRSCGJPMTypesCanAddItems;
Global boolean &gbl_bol_EnterProfileFirst, &gbl_bol_applyWithoutJo, &gbl_bol_isTherePreScreening, &gbl_bol_isThereJOPreScreening, &gbl_bol_isThereOnlineScreening, &gbl_bol_PreScreeningPassed;

Component HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:CEController &controller;
Component EOTL_WIZARD:Controller &c_objWizard;
Component HRS_COMMON:COMMON:UTIL:GetText &obj_c_myCatalog;
Component HCR_JPM_PKG:Profiles:BUS:FieldPrompts &FieldPrompts;
Component Rowset &rs_Res_Template, &c_rsAppRcmnt;
Component Record &c_recSite, &c_recApplicant, &AppAddressRecord;
Component string &str_Page, &str_PassMsgTxtCatID, &str_FailMsgTxtCatID;
Component number &c_nbr_AppProfile, &c_numProfileSeq, &c_nJobsAppliedForPass, &c_nJobsAppliedForFail;
Component boolean &c_bol_isJobsLoaded, &c_bol_isResumeLoaded, &c_bol_QuestOnPageOne, &c_bol_CompOnPageOne, &c_bQuestionNumberingDone, &c_bReviewSubmitted, &c_bol_isAppStsDraft, &c_bDisabilityLabelsSet, &c_bVeteranLabelsSet, &c_bIsFluidMode, &c_bInit;

Declare Function CheckPageFieldExists PeopleCode FUNCLIB_PUM.FUNCLIB FieldFormula;
Declare Function CheckPageExists PeopleCode FUNCLIB_PUM.FUNCLIB FieldFormula;
Declare Function Refresh_Address PeopleCode DERIVED_ADDR.ADDRESSLONG RowInit;

method PageLayout
   /+ &templateId as Number +/
   Local HRS_CANDIDATE_MANAGER:OBJ_RES_TEMPLATE:BUSINESS:ResTemplateMgr &resTmplMgr;
   Local Record &recHRS_RES_TMPL;
   Local string &strSection;
   Local integer &indexCount, &i, &j, &intApplicableSections;
   
   &bAccessibilityMode = (GetUserOption("PPTL", "ACCESS") = "A");
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout = CreateObject("HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:FluidPageLayout", %This);
   End-If;
   
   If &templateId = - 1 Then
      Return;
   End-If;
   
   /* Set the private template variable */
   &myTemplate = &templateId;
   &i_ary_Templates = CreateArrayRept(0, 0);
   &bStepByStep = True;
   &thisIndex = 0;
   &isOverride = False;
   &bol_hasAdditionalInfo = False;
   &bReset = False;
   &bResetTerms = False;
   /* Set the step-by-step enforcement */
   <*&recHRS_RES_TMPL = CreateRecord(Record.HRS_RES_TMPL);
   &recHRS_RES_TMPL.HRS_RES_TMPL_ID.Value = &myTemplate;
   
   If Not &recHRS_RES_TMPL.SelectByKey() Then
      &bStepByStep = True;
   Else
      If &recHRS_RES_TMPL.HRS_ENFORCE_LINEAR.Value = "Y" Then
         &bStepByStep = True;
      End-If;
   End-If;*>
   
   /* Init the hyperlink array */
   &aHyperlink = CreateArrayRept(create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink(0), 0);
   
   /* Init the array of pages and sections */
   &asection = CreateArrayRept(CreateArrayRept("", 0), 0);
   &anumHiddenPages = CreateArrayRept(0, 0);
   
   If &obj_c_myCatalog = Null Then
      &obj_c_myCatalog = create HRS_COMMON:COMMON:UTIL:GetText();
   End-If;
   
   rem %This.setResumeCollection();
   %This.setLabels();
   %This.resetErrors();
   &resTmplMgr = create HRS_CANDIDATE_MANAGER:OBJ_RES_TEMPLATE:BUSINESS:ResTemplateMgr(CreateRecord(Record.HRS_RES_TMPL));
   &asection = &resTmplMgr.toPageSecArray(%This.myTemplate);
   
   /* mark steps/substeps hidden if they contain no applicable sections */
   For &i = 1 To &asection.Len
      &intApplicableSections = 0;
      
      For &j = 2 To &asection [&i].Len
         &strSection = &asection [&i][&j];
         
         Evaluate &strSection
         When = "COMPETENCY"
            If %This.competenciesApplicable() Then
               &intApplicableSections = &intApplicableSections + 1;
            End-If;
            
            Break;
         When = "QUE"
            If %This.questionnaireApplicable() Then
               &intApplicableSections = &intApplicableSections + 1;
            End-If;
            
            Break;
         When = "PRI"
            If %This.priorityPlacementApplicable() Then
               &intApplicableSections = &intApplicableSections + 1;
            End-If;
            
            Break;
         When = "FPR"
            If %This.federalPreferencesApplicable() Then
               &intApplicableSections = &intApplicableSections + 1;
            End-If;
            
            Break;
         When-Other
            &intApplicableSections = &intApplicableSections + 1;
            Break;
         End-Evaluate;
      End-For;
      
      If &intApplicableSections = 0 Then
         &anumHiddenPages.Push(&i);
      End-If;
   End-For;
   
   &bPrescreeningQuestionsSet = False;
end-method;

method getResumeTemplateID
   /+ Returns Number +/
   Return &myTemplate;
end-method;

method selfIdent
   /+ Returns Boolean +/
   Local HRS_COMMON:COMMON:UTIL:GetText &obj_GetText;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate &obj_PgValidate;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Submit &action;
   Local string &str_ReturnedText, &setID_Location, &Country, &str_ExplMsgTxtCatID, &str_ExplMsgTxtCat;
   Local number &nbr_SiteId, &nbr_JoLocCnt, &nbr_LocArea, &nbr_screeningId, &nbr_JOScrSummID, &nbr_JOScrSeq, &i, &j;
   Local Rowset &rsJobBasket, &rs_JOLoc, &rs_LocArea, &rs_JOOnScrVw;
   Local Record &rec_Jo, &Rec_AddRec, &rec_JOScrLevel;
   Local boolean &bol_Selfid, &bol_AddrFnd;
   Local Rowset &level0 = GetLevel0();
   Local Rowset &rs_AppAddres;
   
   &obj_PgValidate = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate();
   &bol_Selfid = False;
   &rs_JOLoc = CreateRowset(Record.HRS_JO_LOC_AR_I);
   &rec_Jo = CreateRecord(Record.HRS_JO_I);
   &rs_LocArea = CreateRowset(Record.HRS_LOC_AREA_VW);
   &rsJobBasket = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
   &rs_JOOnScrVw = CreateRowset(Record.HRS_JO_ONSCR_VW);
   &Rec_AddRec = CreateRecord(Record.HRS_APP_ADDRESS);
   
   If &rsJobBasket.ActiveRowCount >= 1 And
         All(&rsJobBasket.GetRow(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then
      For &i = 1 To &rsJobBasket.ActiveRowCount
         &nbr_JoLocCnt = &rs_JOLoc.Fill("WHERE HRS_JOB_OPENING_ID=:1", &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
         For &j = 1 To &nbr_JoLocCnt
            &rec_Jo.HRS_JOB_OPENING_ID.Value = &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
            &rec_Jo.SelectByKey();
            &setID_Location = GetSetId(Field.BUSINESS_UNIT, &rec_Jo.BUSINESS_UNIT.Value, Record.LOCATION_TBL, "");
            &bol_Selfid = &obj_PgValidate.getLocationAreaCountry(&setID_Location, &rs_JOLoc.GetRow(&j).HRS_JO_LOC_AR_I.HRS_LOCATION_ID.Value);
            If &bol_Selfid Then
               Break;
            End-If;
         End-For;
         If &nbr_JoLocCnt = 0 Then
            &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
            &Rec_AddRec.HRS_PERSON_ID.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.HRS_PERSON_ID.Value;
            &Rec_AddRec.ADDRESS_TYPE.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.ADDRESS_TYPE.Value;
            &bol_AddrFnd = &Rec_AddRec.SelectByKey();
            
            If &bol_AddrFnd Then
               If &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.COUNTRY.Value = "USA" Then
                  &bol_Selfid = True;
               End-If;
            End-If;
         End-If;
         
         If &bol_Selfid Then
            Break;
         End-If;
      End-For;
      
      /* Check if the JO has online screening level and get Text ID */
      For &i = 1 To &rsJobBasket.ActiveRowCount
         If &gbl_bol_isThereOnlineScreening Then
            &rs_JOOnScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
            &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
            &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SEQ.Value;
            &rec_JOScrLevel.SelectByKey();
            &str_ExplMsgTxtCatID = &rec_JOScrLevel.HRS_EMSG_TEXT_ID.Value;
            
            If All(&str_ExplMsgTxtCatID) Then
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = True;
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = True;
               &str_ExplMsgTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_ExplMsgTxtCatID, String(&nbr_SiteId));
               &rsJobBasket(&i).HRS_WRK.DESCRLONG.Value = &str_ExplMsgTxtCat;
            Else
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = False;
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = False;
            End-If;
         Else
            &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = False;
            &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = False;
         End-If;
      End-For;
   Else
      &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
      &Rec_AddRec.HRS_PERSON_ID.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.HRS_PERSON_ID.Value;
      &Rec_AddRec.ADDRESS_TYPE.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.ADDRESS_TYPE.Value;
      &bol_AddrFnd = &Rec_AddRec.SelectByKey();
      
      If &bol_AddrFnd Then
         If &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.COUNTRY.Value = "USA" Then
            &bol_Selfid = True;
         End-If;
      End-If;
   End-If;
   
   Return &bol_Selfid;
end-method;

method selfIdentApplicable
   /+ Returns Boolean +/
   Local HRS_COMMON:COMMON:UTIL:GetText &obj_GetText;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate &obj_PgValidate;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Submit &action;
   Local string &str_ReturnedText, &setID_Location, &Country, &str_ExplMsgTxtCatID, &str_ExplMsgTxtCat;
   Local number &nbr_SiteId, &nbr_JoLocCnt, &nbr_LocArea, &nbr_screeningId, &nbr_JOScrSummID, &nbr_JOScrSeq, &i, &j;
   Local Rowset &rsJobBasket, &rs_JOLoc, &rs_LocArea, &rs_JOOnScrVw;
   Local Record &rec_Jo, &Rec_AddRec, &rec_JOScrLevel;
   Local boolean &bol_Selfid, &bol_AddrFnd;
   Local Rowset &level0 = GetLevel0();
   Local Rowset &rs_AppAddres;
   
   &obj_PgValidate = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate();
   &bol_Selfid = False;
   &rs_JOLoc = CreateRowset(Record.HRS_JO_LOC_AR_I);
   &rec_Jo = CreateRecord(Record.HRS_JO_I);
   &rs_LocArea = CreateRowset(Record.HRS_LOC_AREA_VW);
   &rsJobBasket = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
   &rs_JOOnScrVw = CreateRowset(Record.HRS_JO_ONSCR_VW);
   &Rec_AddRec = CreateRecord(Record.HRS_APP_ADDRESS);
   
   If &rsJobBasket.ActiveRowCount >= 1 And
         All(&rsJobBasket.GetRow(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then
      For &i = 1 To &rsJobBasket.ActiveRowCount
         &nbr_JoLocCnt = &rs_JOLoc.Fill("WHERE HRS_JOB_OPENING_ID=:1", &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
         For &j = 1 To &nbr_JoLocCnt
            &rec_Jo.HRS_JOB_OPENING_ID.Value = &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
            &rec_Jo.SelectByKey();
            &setID_Location = GetSetId(Field.BUSINESS_UNIT, &rec_Jo.BUSINESS_UNIT.Value, Record.LOCATION_TBL, "");
            &bol_Selfid = &obj_PgValidate.getLocationAreaCountry(&setID_Location, &rs_JOLoc.GetRow(&j).HRS_JO_LOC_AR_I.HRS_LOCATION_ID.Value);
            If &bol_Selfid Then
               Break;
            End-If;
         End-For;
         If &nbr_JoLocCnt = 0 Then
            &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
            &Rec_AddRec.HRS_PERSON_ID.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.HRS_PERSON_ID.Value;
            &Rec_AddRec.ADDRESS_TYPE.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.ADDRESS_TYPE.Value;
            &bol_AddrFnd = &Rec_AddRec.SelectByKey();
            
            If &bol_AddrFnd Then
               If &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.COUNTRY.Value = "USA" Then
                  &bol_Selfid = True;
               End-If;
            End-If;
         End-If;
         
         If &bol_Selfid Then
            Break;
         End-If;
      End-For;
      
      <*/* Check if the JO has online screening level and get Text ID */
      For &i = 1 To &rsJobBasket.ActiveRowCount
         If &gbl_bol_isThereOnlineScreening Then
            &rs_JOOnScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &rsJobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
            &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
            &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SEQ.Value;
            &rec_JOScrLevel.SelectByKey();
            &str_ExplMsgTxtCatID = &rec_JOScrLevel.HRS_EMSG_TEXT_ID.Value;
            
            If All(&str_ExplMsgTxtCatID) Then
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = True;
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = True;
               &str_ExplMsgTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_ExplMsgTxtCatID, String(&nbr_SiteId));
               &rsJobBasket(&i).HRS_WRK.DESCRLONG.Value = &str_ExplMsgTxtCat;
            Else
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = False;
               &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = False;
            End-If;
         Else
            &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = False;
            &rsJobBasket(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Enabled = False;
         End-If;
      End-For;*>
   Else
      &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
      &Rec_AddRec.HRS_PERSON_ID.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.HRS_PERSON_ID.Value;
      &Rec_AddRec.ADDRESS_TYPE.Value = &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.ADDRESS_TYPE.Value;
      &bol_AddrFnd = &Rec_AddRec.SelectByKey();
      
      If &bol_AddrFnd Then
         If &rs_AppAddres.GetRow(&rs_AppAddres.ActiveRowCount).HRS_APP_ADDRESS.COUNTRY.Value = "USA" Then
            &bol_Selfid = True;
         End-If;
      End-If;
   End-If;
   
   Return &bol_Selfid;
end-method;

method initHyperlinks
   Local EOTL_WIZARD:ProcessDefn &objProcess;
   Local EOTL_WIZARD:StepDefn &objStep, &objParentStep;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate &obj_PgVal;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Check_NI &objCheckNI;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:OFCCPController &objOFCCPController;
   Local array of EOTL_WIZARD:StepDefn &aobjAllSteps;
   Local array of string &astrSubsteps, &astrAdditionalInfoSections;
   Local array of number &anbrJobOpenings;
   Local Rowset &rsPages, &rsDistinctPages, &rsJobs;
   Local Record &recHRS_RES_TMPL_PG, &recPage, &recHiddenPage, &recProfile;
   Local SQL &sqlResTmplPg;
   Local string &strHyperlinkLabel, &strLastPage, &strStepID, &strTermsHash, &strFirstSelfIdentStep;
   Local number &nbr_SiteId, &numStepCount, &numResult;
   Local integer &indexCount, &i, &j, &intRowCount, &intMainStepCount, &intStepNumber, &intSelfIdentSubstepCount;
   Local boolean &bApplyWithoutJob, &bAnyApplicable, &bDiversity, &bCommunityBackground, &bDisability, &bVeteran, &bNewReferral;
   
   &strLastStep = "";
   &intMainStepCount = 0;
   &bReset = False;
   &bResetTerms = False;
   &rsJobs = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &bApplyWithoutJob = (&rsJobs.ActiveRowCount = 1 And
      None(&rsJobs(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value));
   &bNewReferral = False;
   
   If &c_nbr_AppProfile > 0 And
         &c_bol_isAppStsDraft Then
      &recProfile = CreateRecord(Record.HRS_APP_PROFILE);
      &recProfile.HRS_PERSON_ID.Value = &applicant.HRS_PERSON_ID;
      &recProfile.HRS_PROFILE_SEQ.Value = &c_nbr_AppProfile;
      &recProfile.SelectByKey();
      
      If All(&recProfile.HRS_ROW_ADD_DTTM.Value, &recProfile.HRS_ROW_UPD_DTTM.Value) And
            &recProfile.HRS_ROW_UPD_DTTM.Value - &recProfile.HRS_ROW_ADD_DTTM.Value < 1 Then /* consider time difference of < 1 second to mean added date/time and updated date/time are the same */
         &numResult = 0;
         SQLExec("select 1 from PS_HRS_EE_REFERRAL where HRS_PERSON_ID = :1 and HRS_PROFILE_SEQ = :2", &applicant.HRS_PERSON_ID, &c_nbr_AppProfile, &numResult);
         
         If &numResult = 1 Then
            &bNewReferral = True;
         End-If;
      End-If;
   End-If;
   
   If &c_nbr_AppProfile > 0 Then /* existing application submitted or saved for later */
      If &c_bol_isAppStsDraft Then
         &c_bReviewSubmitted = False;
         
         If Not &bNewReferral Then
            &numResult = 0;
            SQLExec("select 1 from PS_HRS_RES_TMPL where HRS_RES_TMPL_ID in " | &i_ary_Templates.Join() | " and HRS_TIMESTAMP is not null and HRS_TIMESTAMP > :1", &recProfile.HRS_ROW_UPD_DTTM.Value, &numResult);
            
            If &numResult = 1 Then
               &bReset = True;
            Else
               &strLastStep = &recProfile.HRS_LAST_STEP.Value;
               &strCurrentStep = &recProfile.HRS_CURRENT_STEP.Value;
            End-If;
         End-If;
      Else
         &c_bReviewSubmitted = True;
         &strLastStep = "@@REVIEW_SUBMIT";
      End-If;
   Else /* new application */
      &c_bReviewSubmitted = False;
   End-If;
   
   &recHRS_RES_TMPL_PG = CreateRecord(Record.HRS_RES_TMPL_PG);
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   &c_objWizard = create EOTL_WIZARD:Controller(create EOTL_WIZARD:Viewer());
   &c_objWizard.UseDefaultBufferFields();
   
   &objProcess = &c_objWizard.CreateProcessDefn("@@APPLICATION", "", "");
   
   %This.formatStartStep();
   
   If %This.startStepHasText() Then
      &intMainStepCount = &intMainStepCount + 1;
      &objStep = &c_objWizard.CreateMainStep(0);
      &objStep.TemplateId = "@@START";
      &objStep.PageName = Page.HRS_CE_START;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_START"), String(&nbr_SiteId));
      
      If &c_nbr_AppProfile > 0 And
            &c_bol_isAppStsDraft And
            Not &bNewReferral Then
         &strTermsHash = %This.calculateStartTermsHash();
         
         If All(&strTermsHash) And
               &strTermsHash <> &recProfile.HRS_TERMS_HASH.Value Then
            &strLastStep = "";
            &strCurrentStep = "";
            &bReset = True;
            &bResetTerms = True;
         End-If;
      End-If;
   End-If;
   
   &obj_PgVal = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate();
   
   /* Used for pre-screening */
   If &bApplyWithoutJob Then
      &gbl_bol_isTherePreScreening = &obj_PgVal.validatePreScreening(&applicant.DEF_RES_TMPL_ID);
   Else
      &gbl_bol_isTherePreScreening = False;
   End-If;
   
   If &gbl_bol_isTherePreScreening Then
      &intMainStepCount = &intMainStepCount + 1;
      &objStep = &c_objWizard.CreateMainStep(0);
      &objStep.TemplateId = "@@PREQUALIFY";
      &objStep.PageName = Page.HRS_APP_PRESCREEN;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_PREQUALIFY"), String(&nbr_SiteId));
   Else
      If Not &bApplyWithoutJob And
            &gbl_bol_isThereJOPreScreening Then
         &intMainStepCount = &intMainStepCount + 1;
         &objStep = &c_objWizard.CreateMainStep(0);
         &objStep.TemplateId = "@@PREQUALIFY";
         &objStep.PageName = Page.HRS_APP_JOPRESCRN;
         &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_PREQUALIFY"), String(&nbr_SiteId));
      End-If;
   End-If;
   
   If %This.hasResumeOptions() Or
         %This.hasCoverLetterOptions() Then
      &intMainStepCount = &intMainStepCount + 1;
      &objStep = &c_objWizard.CreateMainStep(0);
      &objStep.TemplateId = "@@RESUME";
      &objStep.PageName = Page.HRS_RESUME_OPTION;
      
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_RESUME"), String(&nbr_SiteId));
   End-If;
   
   &rsPages = CreateRowset(Record.HRS_RES_TMPL_VW);
   &intRowCount = &rsPages.Fill("where HRS_RES_TMPL_ID = :1", &myTemplate);
   &rsPages.Sort(HRS_RES_TMPL_VW.HRS_PAGE_SEQ, "A", HRS_RES_TMPL_VW.HRS_SEQ_NUM, "A");
   
   &rsDistinctPages = CreateRowset(Record.HRS_RES_TMPL_V2);
   &intRowCount = &rsDistinctPages.Fill("where HRS_RES_TMPL_ID = :1", &myTemplate);
   &rsDistinctPages.Sort(HRS_RES_TMPL_V2.HRS_PAGE_SEQ, "A", HRS_RES_TMPL_V2.HRS_SEQ_NUM, "A");
   
   For &i = 1 To &rsPages.ActiveRowCount
      &recPage = &rsPages(&i).HRS_RES_TMPL_VW;
      
      For &j = 1 To &rsDistinctPages.ActiveRowCount
         &recHiddenPage = &rsDistinctPages(&j).HRS_RES_TMPL_V2;
         
         If &recPage.HRS_PAGE_SEQ.Value = &recHiddenPage.HRS_PAGE_SEQ.Value And
               &recPage.HRS_SEQ_NUM.Value = &recHiddenPage.HRS_SEQ_NUM.Value Then
            &recPage.RESUME_SECTION_SEQ.Value = &j;
            Break;
         End-If;
      End-For;
   End-For;
   
   /* delete pages (steps/substeps) with no applicable sections */
   If &anumHiddenPages.Len > 0 Then
      For &i = 1 To &rsDistinctPages.ActiveRowCount
         If &anumHiddenPages.Find(&i) > 0 Then
            &recHiddenPage = &rsDistinctPages(&i).HRS_RES_TMPL_V2;
            
            For &j = &rsPages.ActiveRowCount To 1 Step - 1
               &recPage = &rsPages(&j).HRS_RES_TMPL_VW;
               
               If &recPage.TEXT_ID.Value = &recHiddenPage.TEXT_ID.Value And
                     &recPage.HRS_SUBSTEP_TXT_ID.Value = &recHiddenPage.HRS_SUBSTEP_TXT_ID.Value Then
                  &rsPages.DeleteRow(&j);
               End-If;
            End-For;
         End-If;
      End-For;
   End-If;
   
   If All(&rsPages(1).HRS_RES_TMPL_VW.HRS_RES_TMPL_ID.Value) Then
      &strLastPage = "";
      &astrSubsteps = CreateArrayRept("", 0);
      
      For &i = 1 To &rsPages.ActiveRowCount
         &recPage = &rsPages(&i).HRS_RES_TMPL_VW;
         &intStepNumber = &intMainStepCount + 1;
         &strStepID = &recPage.TEXT_ID.Value;
         
         If None(&strStepID) Then
            &strStepID = "@@STEP" | &recPage.HRS_PAGE_SEQ.Value;
         End-If;
         
         If &strStepID <> &strLastPage Then
            &intMainStepCount = &intMainStepCount + 1;
            &objStep = &c_objWizard.CreateMainStep(0);
            &objStep.PageName = Page.HRS_CE_PROFILE;
            
            If All(&recPage.TEXT_ID.Value) Then
               &objStep.TemplateId = &recPage.TEXT_ID.Value;
               &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(&recPage.TEXT_ID.Value, String(&nbr_SiteId));
            Else
               &objStep.TemplateId = "@@STEP" | &intStepNumber;
               &objStep.Label = MsgGetText(18178, 317, "Message not found.") | " " | &intStepNumber;
            End-If;
            
            If None(&recPage.HRS_SUBSTEP_TXT_ID.Value) Then
               &objStep.AppData = &recPage.RESUME_SECTION_SEQ.Value;
            End-If;
            
            &objParentStep = &objStep;
         End-If;
         
         If All(&recPage.HRS_SUBSTEP_TXT_ID.Value) Then
            If &astrSubsteps.Find(&strStepID | ":" | &recPage.HRS_SUBSTEP_TXT_ID.Value) = 0 Then
               &objStep = &c_objWizard.CreateSubStep(&objParentStep, 0);
               &objStep.TemplateId = &recPage.HRS_SUBSTEP_TXT_ID.Value;
               &objStep.PageName = Page.HRS_CE_PROFILE;
               &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(&recPage.HRS_SUBSTEP_TXT_ID.Value, String(&nbr_SiteId));
               &objStep.AppData = &recPage.RESUME_SECTION_SEQ.Value;
               
               &astrSubsteps.Push(&strStepID | ":" | &recPage.HRS_SUBSTEP_TXT_ID.Value);
            End-If;
         End-If;
         
         &strLastPage = &strStepID;
      End-For;
      
      If &bol_hasAdditionalInfo Then
         &astrAdditionalInfoSections = &asection [&asection.Len];
         &bAnyApplicable = False;
         
         For &j = 2 To &astrAdditionalInfoSections.Len
            Evaluate &astrAdditionalInfoSections [&j]
            When = "COMPETENCY"
               &bAnyApplicable = %This.competenciesApplicable();
               Break;
            When = "QUE"
               &bAnyApplicable = %This.questionnaireApplicable();
               Break;
            When = "PRI"
               &bAnyApplicable = %This.priorityPlacementApplicable();
               Break;
            When = "FPR"
               &bAnyApplicable = %This.federalPreferencesApplicable();
               Break;
            When-Other
               &bAnyApplicable = True;
            End-Evaluate;
            
            If &bAnyApplicable Then
               Break;
            End-If;
         End-For;
         
         If &bAnyApplicable Then
            &objStep = &c_objWizard.CreateMainStep(0);
            &objStep.TemplateId = "@@ADDITIONAL_INFORMATION";
            &objStep.PageName = Page.HRS_CE_PROFILE;
            &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRS_CE_ADDTNL_INFO"), String(&nbr_SiteId));
            &objStep.AppData = &asection.Len;
         End-If;
      End-If;
   End-If;
   
   &anbrJobOpenings = CreateArrayRept(0, 0);
   
   For &i = 1 To &rsJobs.ActiveRowCount
      If All(&rsJobs(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then
         &anbrJobOpenings.Push(&rsJobs(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
      End-If;
   End-For;
   
   &objCheckNI = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Check_NI();
   
   If Not &gbl_bol_applyWithoutJo And
         &objCheckNI.isNI(&anbrJobOpenings) Or
         &objCheckNI.checkNI(&myTemplate) Then
      &objStep = &c_objWizard.CreateMainStep(0);
      &objStep.TemplateId = "@@COMMUNITY_BACKGROUND";
      &objStep.PageName = Page.HRS_APP_CB2;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_COMM_BG"), String(&nbr_SiteId));
      
      &strFirstSelfIdentStep = &objStep.TemplateId;
      
      &bCommunityBackground = True;
   Else
      &bCommunityBackground = False;
   End-If;
   
   &objOFCCPController = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:OFCCPController();
   
   &intSelfIdentSubstepCount = 0;
   
   If &objOFCCPController.isDisabilityApplicable() Then
      &bDisability = True;
      &intSelfIdentSubstepCount = &intSelfIdentSubstepCount + 1;
   Else
      &bDisability = False;
   End-If;
   
   If &objOFCCPController.isVeteranApplicable() Then
      &bVeteran = True;
      &intSelfIdentSubstepCount = &intSelfIdentSubstepCount + 1;
   Else
      &bVeteran = False;
   End-If;
   
   If &applicant.APP_PER_STATUS <> "E" And
         %This.selfIdentApplicable() Then
      &bDiversity = True;
      &intSelfIdentSubstepCount = &intSelfIdentSubstepCount + 1;
   Else
      &bDiversity = False;
   End-If;
   
   If &intSelfIdentSubstepCount > 1 Then
      &objParentStep = &c_objWizard.CreateMainStep(0);
      &objParentStep.TemplateId = "@@SELF_IDENT";
      &objParentStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SELF_IDENT"), String(&nbr_SiteId));
   End-If;
   
   If &bDisability Then
      If &intSelfIdentSubstepCount > 1 Then
         &objStep = &c_objWizard.CreateSubStep(&objParentStep, 0);
      Else
         &objStep = &c_objWizard.CreateMainStep(0);
      End-If;
      
      &objStep.TemplateId = "@@DISABILITY";
      &objStep.PageName = Page.HRS_CE_DISABILITY;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DISABILITY"), String(&nbr_SiteId));
      
      If None(&strFirstSelfIdentStep) Then
         &strFirstSelfIdentStep = &objStep.TemplateId;
      End-If;
   End-If;
   
   If &bVeteran Then
      If &intSelfIdentSubstepCount > 1 Then
         &objStep = &c_objWizard.CreateSubStep(&objParentStep, 0);
      Else
         &objStep = &c_objWizard.CreateMainStep(0);
      End-If;
      
      &objStep.TemplateId = "@@VETERAN";
      &objStep.PageName = Page.HRS_CE_VETERAN;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VETERAN"), String(&nbr_SiteId));
      
      If None(&strFirstSelfIdentStep) Then
         &strFirstSelfIdentStep = &objStep.TemplateId;
      End-If;
   End-If;
   
   If &bDiversity Then
      If &intSelfIdentSubstepCount > 1 Then
         &objStep = &c_objWizard.CreateSubStep(&objParentStep, 0);
      Else
         &objStep = &c_objWizard.CreateMainStep(0);
      End-If;
      
      &objStep.TemplateId = "@@DIVERSITY";
      &objStep.PageName = Page.HRS_CE_SELF_IDENT;
      &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIVERSITY"), String(&nbr_SiteId));
      
      If None(&strFirstSelfIdentStep) Then
         &strFirstSelfIdentStep = &objStep.TemplateId;
      End-If;
   End-If;
   
   &objStep = &c_objWizard.CreateMainStep(0);
   &objStep.TemplateId = "@@REVIEW_SUBMIT";
   &objStep.PageName = Page.HRS_CE_REVIEW;
   &objStep.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_REVIEW_SUB"), String(&nbr_SiteId));
   
   &objStep.AppData = &asection.Len + 1;
   
   &aobjAllSteps = %This.getAllSteps();
   
   If &strLastStep <> "" And
         &strLastStep <> "@@PREQUALIFY" And
         Not %This.stepExists(&strLastStep) And
         %This.stepExists("@@PREQUALIFY") And
         Not &bReset Then
      For &i = 1 To &aobjAllSteps.Len
         If &aobjAllSteps [&i].TemplateId = "@@PREQUALIFY" Then
            &strLastStep = &aobjAllSteps [&i + 1].TemplateId;
            Break;
         End-If;
      End-For;
      
      %This.setCurrentStep(&strLastStep);
   End-If;
   
   If Not &c_bReviewSubmitted And
         All(&strFirstSelfIdentStep) Then
      If &strLastStep = "@@COMMUNITY_BACKGROUND" Or
            &strLastStep = "@@DISABILITY" Or
            &strLastStep = "@@VETERAN" Or
            &strLastStep = "@@DIVERSITY" Or
            &strLastStep = "@@REVIEW_SUBMIT" Then
         %This.setLastStep(&strFirstSelfIdentStep);
      End-If;
      
      If &strCurrentStep = "@@COMMUNITY_BACKGROUND" Or
            &strCurrentStep = "@@DISABILITY" Or
            &strCurrentStep = "@@VETERAN" Or
            &strCurrentStep = "@@DIVERSITY" Or
            &strCurrentStep = "@@REVIEW_SUBMIT" Then
         %This.setCurrentStep(&strFirstSelfIdentStep);
      End-If;
   End-If;
   
   If &strCurrentStep <> "" And
         Not %This.stepExists(&strCurrentStep) Or
         &strLastStep <> "" And
            Not %This.stepExists(&strLastStep) Then
      &bReset = True;
   End-If;
   
   If Not &bReset And
         &strLastStep <> "" And
         %This.stepExists(&strLastStep) Then
      For &i = 1 To &aobjAllSteps.Len
         &aobjAllSteps [&i].Visited = True;
         
         If &strLastStep = &aobjAllSteps [&i].TemplateId Then
            Break;
         End-If;
      End-For;
   End-If;
   
   &c_objWizard.SetProcessEventHandler(create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:ProcessEventHandler());
   &c_objWizard.Initialize();
   
   If &c_bIsFluidMode Then
      %This.getFluidPageLayout().initActivityGuide();
   Else
      &c_objWizard.SetCancelActionText(MsgGetText(18178, 329, "Message not found."), MsgGetExplainText(18178, 329, "Message not found."));
      &c_objWizard.SetSaveActionText(MsgGetText(18178, 330, "Message not found."), MsgGetExplainText(18178, 330, "Message not found."));
      &c_objWizard.SetSubmitActionText(MsgGetText(18178, 331, "Message not found."), MsgGetExplainText(18178, 331, "Message not found."));
      
      SQLExec("select HRS_NUM_STEPS from PS_HRS_RES_TMPL where HRS_RES_TMPL_ID = :1", &myTemplate, &numStepCount);
      
      If &numStepCount > 0 Then
         &c_objWizard.SetMaxDisplayableSteps(&numStepCount);
      End-If;
      
      /* set more descriptive heading in accessible mode */
      If GetUserOption("PPTL", "ACCESS") = "A" Then
         &c_objWizard.ProcessViewer.TitleFormat = MsgGetText(18178, 658, "Message not found.", "%STEPNUMBER%", "%STEPTOTAL%", "%STEPLABEL%") | "@@" | MsgGetExplainText(18178, 658, "Message not found.", "%SUBSTEPNUMBER%", "%SUBSTEPTOTAL%", "%SUBSTEPLABEL%") | "@@";
      End-If;
   End-If;
end-method;

method overrideTemplate
   /+ &aSections as Array of String +/
   Local integer &i;
   
   &astrAdditionalSections = &aSections.Clone();
   
   If &bol_hasAdditionalInfo Then
      &asection.Push(&asection.Len + 1);
      
      For &i = 1 To &aSections.Len
         &asection [&asection.Len].Push(&aSections [&i]);
      End-For;
      <*Else
      For &i = 1 To &aSections.Len
         &asection [&nbr_AryLength + 1].Push(&aSections [&i]);
      End-For;

      &aHyperlink [&nbr_AryLength + 1].title = &obj_c_myCatalog.GetCandTextSimple("HRS_CE_ADDTNL_INFO", String(&nbr_SiteId));
      &aHyperlink [&nbr_AryLength + 1].unhideLink();*>
   End-If;
   
   <*For &i = 1 To &aHyperlink.Len
      &aHyperlink [&i].setActive( False);
   End-For;*>
end-method;

method setReviewSubmitSections
   Local integer &i, &j;
   
   &asection.Push(&asection.Len + 1);
   
   For &i = 1 To &asection.Len - 1
      For &j = 1 To &asection [&i].Len
         If Not %This.isPageHidden(&i) And
               Len(&asection [&i][&j]) > 2 Then
            &asection [&asection.Len].Push(&asection [&i][&j]);
         End-If;
      End-For;
   End-For;
end-method;

method setResumeCollection
   Local HRTR_UTILITIES:StringHashtable &obj_StrHshTbl;
   Local array of string &ary_SecNames;
   Local Rowset &rsResColl, &rsTempResColl, &rsCoverLetterColl, &rsTempCoverLetterColl;
   Local number &i;
   Local boolean &bAttachCoverLetter, &bApplyWithoutCoverLetter;
   
   &rsResColl = GetLevel0()(1).GetRowset(Scroll.HRS_RES_COLL_VW);
   &rsResColl.Flush();
   
   &rsCoverLetterColl = GetLevel0()(1).GetRowset(Scroll.HRS_COV_COLL_VW);
   &rsCoverLetterColl.Flush();
   
   If Not &isOverride Then /* one template */
      If &c_bIsFluidMode Then
         &rsResColl.Select(Record.HRS_RES_COLL_VW, "where HRS_RES_TMPL_ID = :1 and HRS_NO_RES_FLG <> 'Y' and HRS_RES_SEC_NAME <> 'REC'", &myTemplate);
      Else
         &rsResColl.Select(Record.HRS_RES_COLL_VW, "where HRS_RES_TMPL_ID = :1 and HRS_NO_RES_FLG <> 'Y'", &myTemplate);
      End-If;
      
      &rsResColl.Sort(HRS_RES_COLL_VW.RESUME_SECTION_SEQ, "A");
      
      &rsCoverLetterColl.Select(Record.HRS_COV_COLL_VW, "where HRS_RES_TMPL_ID = :1 and HRS_NO_RES_FLG <> 'Y'", &myTemplate);
      &rsCoverLetterColl.Sort(HRS_COV_COLL_VW.RESUME_SECTION_SEQ, "A");
   Else /* multiple templates */
      &rsTempResColl = CreateRowset(Record.HRS_RES_COLL_VW);
      
      If &c_bIsFluidMode Then
         &rsTempResColl.Fill("where HRS_RES_TMPL_ID in " | %This.i_ary_Templates.Join() | " and HRS_NO_RES_FLG <> 'Y' and HRS_RES_SEC_NAME <> 'REC'");
      Else
         &rsTempResColl.Fill("where HRS_RES_TMPL_ID in " | %This.i_ary_Templates.Join() | " and HRS_NO_RES_FLG <> 'Y'");
      End-If;
      
      &obj_StrHshTbl = create HRTR_UTILITIES:StringHashtable();
      
      For &i = 1 To &rsTempResColl.ActiveRowCount
         &obj_StrHshTbl.Put(&rsTempResColl(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value, String(&rsTempResColl(&i).HRS_RES_COLL_VW.HRS_RES_TMPL_ID.Value));
      End-For;
      
      &ary_SecNames = &obj_StrHshTbl.GetKeys();
      
      For &i = 1 To &ary_SecNames.Len
         If All(&rsResColl(1).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value) Then
            &rsResColl.InsertRow(&rsResColl.ActiveRowCount);
         End-If;
         
         &rsResColl(&rsResColl.ActiveRowCount).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value = &ary_SecNames [&i];
      End-For;
      
      &rsTempCoverLetterColl = CreateRowset(Record.HRS_COV_COLL_VW);
      &rsTempCoverLetterColl.Fill("where HRS_RES_TMPL_ID in " | %This.i_ary_Templates.Join() | " and HRS_NO_RES_FLG <> 'Y'");
      
      &bAttachCoverLetter = False;
      &bApplyWithoutCoverLetter = False;
      
      For &i = 1 To &rsTempCoverLetterColl.RowCount
         Evaluate &rsTempCoverLetterColl(&i).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value
         When = "CLA" /* attach */
            &bAttachCoverLetter = True;
         When = "CLN" /* apply without */
            &bApplyWithoutCoverLetter = True;
         End-Evaluate;
      End-For;
      
      If &bAttachCoverLetter Then
         &rsCoverLetterColl(1).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value = "CLA";
      End-If;
      
      If &bApplyWithoutCoverLetter Then
         If &bAttachCoverLetter Then
            &rsCoverLetterColl.InsertRow(1);
         End-If;
         
         &rsCoverLetterColl(&rsCoverLetterColl.ActiveRowCount).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value = "CLN";
      End-If;
   End-If;
   
   For &i = &rsResColl.ActiveRowCount To 1 Step - 1
      If &rsResColl(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value = "REN" Then
         &rsResColl(&i).Visible = False;
      Else
         &rsResColl(&i).HRS_CE_WRK.HRS_RES_OPT_PB.Label = &rsResColl(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.LongTranslateValue;
         
         Evaluate &rsResColl(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value
         When = "REA"
            &rsResColl(&i).HRS_CE_WRK.HRS_RES_OPT_DESCR.Value = MsgGetText(18178, 613, "Message not found.");
            Break;
         When = "REC"
            &rsResColl(&i).HRS_CE_WRK.HRS_RES_OPT_DESCR.Value = MsgGetText(18178, 614, "Message not found.");
            Break;
         When = "REE"
            &rsResColl(&i).HRS_CE_WRK.HRS_RES_OPT_DESCR.Value = MsgGetText(18178, 615, "Message not found.");
            %This.populateExistingResume(&rsResColl(&i));
            Break;
         End-Evaluate;
      End-If;
   End-For;
   /*Begin--23600046--add dynamic instruction for resume in accesibility mode -classic*/
   If Not &c_bIsFluidMode Then
      Local string &access_mode = GetUserOption("PPTL", "ACCESS");
      
      Local Record &rec1 = GetRecord(Record.HRS_CE_WRK2);
      
      Local string &exists, &exists1;
      Local string &rcnm, &flnm, &flnm1;
      &rcnm = "HRS_CE_WRK2";
      &flnm = "INSTRUCTION_LBL";
      &flnm1 = "HRS_PAGE_INSTR6";
      SQLExec("select 'Y' from PSRECFIELD where recname=:1 and fieldname=:2", &rcnm, &flnm, &exists);
      SQLExec("select 'Y' from PSRECFIELD where recname=:1 and fieldname=:2", &rcnm, &flnm1, &exists1);
      Local string &fldnam = "FIELD.INSTRUCTION_LBL";
      If &access_mode = "A" Then
         If &exists = "Y" Then
            
            &rec1.GetField(@&fldnam).Visible = True;
         End-If;
         
         HRS_CE_WRK2.HRS_RES_OPTN_MSG.Visible = False;
         Local string &resume_exists;
         
         If &access_mode = "A" Then
            If &exists1 = "Y" Then
               Local string &fldnam1 = "FIELD.HRS_PAGE_INSTR6";
               &rec1.GetField(@&fldnam1).Value = MsgGetText(18176, 6259, "Message not found.") | " ";
            End-If;
            
         End-If;
         
         For &i = 1 To &rsResColl.ActiveRowCount
            
            Evaluate &rsResColl(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value
            When = "REA"
               If &exists1 = "Y" Then
                  &rec1.GetField(@&fldnam1).Value = &rec1.GetField(@&fldnam1).Value | MsgGetText(18176, 6260, "Message not found.") | ",";
               End-If;
               Break;
            When = "REC"
               If &exists1 = "Y" Then
                  &rec1.GetField(@&fldnam1).Value = &rec1.GetField(@&fldnam1).Value | MsgGetText(18178, 614, "Message not found.") | ",";
               End-If;
               
               Break;
            When = "REE"
               SQLExec("select 'Y' from PS_HRS_RES_PID_VW2 where hrs_person_id=:1", GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value, &resume_exists);
               If &resume_exists = "Y" Then
                  If &exists1 = "Y" Then
                     &rec1.GetField(@&fldnam1).Value = &rec1.GetField(@&fldnam1).Value | MsgGetText(18178, 615, "Message not found.") | ",";
                  End-If;
                  
               End-If;
               Break;
            End-Evaluate;
         End-For;
         If &exists1 = "Y" Then
            &rec1.GetField(@&fldnam1).Value = Substring(&rec1.GetField(@&fldnam1).Value, 1, (Len(&rec1.GetField(@&fldnam1).Value) - 1));
         End-If;
         
         
      End-If;
   End-If;
   /*End--23600046*/
   
   For &i = &rsCoverLetterColl.ActiveRowCount To 1 Step - 1
      Evaluate &rsCoverLetterColl(&i).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value
      When = "CLA" /* attach */
         &rsCoverLetterColl(&i).HRS_CE_WRK.HRS_COV_OPT_PB.Label = &rsCoverLetterColl(&i).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.LongTranslateValue;
         &rsCoverLetterColl(&i).HRS_CE_WRK.HRS_COV_OPT_DESCR.Value = MsgGetText(18178, 666, "Message not found.");
         If Not &c_bIsFluidMode Then /*23600046*/
            If &access_mode = "A" Then
               If &exists1 = "Y" Then
                  &rec1.GetField(@&fldnam1).Value = &rec1.GetField(@&fldnam1).Value | MsgGetText(18176, 6261, "Message not found.");
               End-If;
               rem HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value = Substring(HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value, 1, (Len(HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value) - 1));
               HRS_CE_WRK2.HRS_COV_OPTN_MSG.Visible = False;
            End-If;
            
         End-If;
         Break;
      When = "CLN" /* apply without */
         &rsCoverLetterColl(&i).Visible = False;
         Break;
      End-Evaluate;
   End-For;
   If Not &c_bIsFluidMode Then /*23600046*/
      If &access_mode <> "A" Then
         If &exists = "Y" Then
            &rec1.GetField(@&fldnam).Visible = False;
         End-If;
      End-If;
   End-If
end-method;

method changeState
   /+ &index as Number +/
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink &link;
   Local array of string &aSectionName;
   Local array of number &anumJobIDs;
   rem Local array of any &aSectionName;
   Local Rowset &rs_JPM_Content, &rsJobs;
   Local Rowset &rsJO = CreateRowset(Record.HRS_JOB_OPENING);
   Local Record &recResumeTemplate, &recReferral, &recEmpReferral, &recAppProfile;
   Local string &sSectionName, &srcType, &strJobReferralSourceRequired, &strJobReferralSubsourceRequired;
   Local number &counter, &i, &nSectionPgSeq, &numJobID, &numDefaultResumeTemplateID;
   Local integer &nbrJobOpening, &nbrRowsRead, &intRowCount;
   Local boolean &bol_content_drawn, &bReviewSubmit, &bEmployeeReferral;
   
   /* Set the instance index to the parameter passed in */
   &thisIndex = &index;
   
   %This.hideAllSections();
   &bol_content_drawn = False;
   
   /* Set the appropriate sections based on the page to visible */
   try
      If &index <= &asection.Len Then
         &aSectionName = &asection [&index];
         Local any &anyVar;
         &anyVar = &asection [&index][1];
         &nSectionPgSeq = &anyVar;
         
         /* For &counter = 1 To &aSectionName.Len */
         /* the 1st element is the resume "page number" - sections start at 2nd element */
         For &counter = 2 To &aSectionName.Len
            &sSectionName = &aSectionName [&counter];
            
            Evaluate &sSectionName
            When = "ATT" /* Attachments */
               HRS_CE_WRK.HRS_ATTACH_GB.Visible = True;
               Break;
            When = "EDU" /* Education History */
               HRS_CE_WRK.GRPB_EDU.Visible = True;
               HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Visible = (All(HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Value) And
                  %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
               
               Break;
            When = "PRF" /* Preferences */
               HRS_CE_WRK.GRPB_PREFS.Visible = True;
               HRS_CE_WRK.HRS_CE_PREFS_INSTR.Visible = All(HRS_CE_WRK.HRS_CE_PREFS_INSTR.Value);
               
               Break;
            When = "FPR" /* Federal Preferences */
               If &controller.isFederal() Then
                  HRS_CE_WRK.GRPB_G_PREFS.Visible = True;
                  HRS_CE_WRK.SEC_INFO_PREFS_G.Visible = All(HRS_CE_WRK.SEC_INFO_PREFS_G.Value);
               End-If;
               
               Break;
            When = "PRI" /* Federal Priority Placement */
               If &controller.isFederal() Then
                  HRS_CE_WRK.GRPB_G_PP.Visible = True;
                  %This.formatPlacement(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_G_PRI_PL));
               End-If;
               
               Break;
            When = "TRA" /* Training */
               HRS_CE_WRK.GRPB_TRAIN.Visible = True;
               Break;
            When = "WRK" /* Work Experience */
               HRS_CE_WRK.GRPB_WRK_EXP.Visible = True;
               Break;
            When = "RFR" /* References */
               HRS_CE_WRK.GRPB_REFERENCES.Visible = True;
               Break;
            When = "PER" /* Personal Information */
               HRS_CE_WRK.GRPB_PERS_INFO.Visible = True;
               %This.setPersonalInfoPref();
               Break;
            When = "QUE" /* Online Questionnaire */
               /* ICE 1439846001 RR BEGIN */
               If &index = 1 Then
                  &c_bol_QuestOnPageOne = True;
               End-If;
               /* ICE 1439846001 RR END */
               
               %This.formatQuestionnaire(GetLevel0()(1).GetRowset(Scroll.HRS_JO_QST_NO_I));
               
               HRS_CE_WRK.GRPB_OPEN_ENDED.Visible = True;
               %This.formatOpenEndedQuestion(GetLevel0()(1).GetRowset(Scroll.HRS_APP_OPANS_I));
               
               Break;
            When = "REF" /* Referrals */
               HRS_CE_WRK.GRPB_REFERRAL.Visible = True;
               HRS_CE_WRK.GRPB_REFERRAL_EMP.Visible = (GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_AL_SRCE_I)(1).HRS_SRC_SU_PT_I.HRS_SOURCE_TYPE.Value = "30");
               
               &recAppProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).HRS_APP_PROFILE;
               &recReferral = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_AL_SRCE_I)(1).HRS_AL_SRCE_I;
               &recEmpReferral = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_EE_REFERRAL)(1).HRS_EE_REFERRAL;
               
               &bEmployeeReferral = (GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_AL_SRCE_I)(1).HRS_SRC_SU_PT_I.HRS_SOURCE_TYPE.Value = "30");
               HRS_CE_WRK.GRPB_REFERRAL_EMP.Visible = &bEmployeeReferral;
               &recEmpReferral.REFERRER_NAME.ShowRequiredFieldCue = &bEmployeeReferral;
               
               &recAppProfile.PREV_EMPL_BY_COMPY.ShowRequiredFieldCue = False;
               
               rem 19204188 code begins;
               If &bEmployeeReferral = True Then
                  If All(&recEmpReferral.EMPLID.Value) And
                        All(&recEmpReferral.REFERRER_NAME.Value) Then
                     &recEmpReferral.REFERRER_NAME.Enabled = False;
                     &recReferral.HRS_SOURCE_ID.Enabled = False;
                  Else
                     &recEmpReferral.REFERRER_NAME.Enabled = True;
                     &recReferral.HRS_SOURCE_ID.Enabled = True;
                  End-If;
                  
                  If All(&recEmpReferral.EMPLID.Value) And
                        All(&recEmpReferral.EMAIL_ADDR.Value) Then
                     &recEmpReferral.EMAIL_ADDR.Enabled = False;
                  Else
                     &recEmpReferral.EMAIL_ADDR.Enabled = True;
                  End-If;
               End-If;
               rem 19204188 code ends;
               &rsJobs = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
               &anumJobIDs = CreateArrayRept(0, 0);
               
               For &i = 1 To &rsJobs.ActiveRowCount
                  &numJobID = &rsJobs(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
                  
                  If All(&numJobID) Then
                     &anumJobIDs.Push(&numJobID);
                  End-If;
               End-For;
               
               &bReferralSourceRequired = False;
               &bReferralSubsourceRequired = False;
               
               If &anumJobIDs.Len > 0 Then
                  &nbrRowsRead = &rsJO.Fill("where HRS_JOB_OPENING_ID in " | &anumJobIDs.Join());
                  
                  If &nbrRowsRead > 0 Then
                     For &i = 1 To &rsJO.ActiveRowCount
                        &strJobReferralSourceRequired = &rsJO(&i).HRS_JOB_OPENING.HRS_RFRL_SRC_REQ.Value;
                        &strJobReferralSubsourceRequired = &rsJO(&i).HRS_JOB_OPENING.HRS_RFRL_S_SRC_REQ.Value;
                        
                        If All(&strJobReferralSourceRequired) Then
                           If &strJobReferralSubsourceRequired = "Y" Then /* both Referral Source and Subsource required */
                              &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                              &recReferral.HRS_SUBSOURCE_ID.ShowRequiredFieldCue = True;
                              
                              &bReferralSourceRequired = True;
                              &bReferralSubsourceRequired = True;
                              
                              Break;
                           Else
                              If &strJobReferralSourceRequired = "Y" Then /* only Referral Source required, Subsource not required */
                                 &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                                 
                                 &bReferralSourceRequired = True;
                              End-If;
                           End-If;
                        Else /* Job Opening had a Recruitment Template without a Resume Template when it was created, get Referral Source settings from Site Resume Template */
                           If None(&recResumeTemplate) Then
                              &recResumeTemplate = CreateRecord(Record.HRS_RES_TMPL);
                              SQLExec("select HRS_RES_TMPL_ID from PS_HRS_SITE_ID where HRS_SITE_ID = :1", &applicant.HRS_SITE_ID, &numDefaultResumeTemplateID);
                              &recResumeTemplate.HRS_RES_TMPL_ID.Value = &numDefaultResumeTemplateID;
                              &recResumeTemplate.SelectByKey();
                           End-If;
                           
                           If &recResumeTemplate.HRS_RFRL_S_SRC_REQ.Value = "Y" Then
                              &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                              &recReferral.HRS_SUBSOURCE_ID.ShowRequiredFieldCue = True;
                              
                              &bReferralSourceRequired = True;
                              &bReferralSubsourceRequired = True;
                              
                              Break;
                           Else
                              If &recResumeTemplate.HRS_RFRL_SRC_REQ.Value = "Y" Then
                                 &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                                 
                                 &bReferralSourceRequired = True;
                              End-If;
                           End-If;
                        End-If;
                     End-For;
                  End-If;
               Else /* applying without a job, get Referral Source settings from Site Resume Template */
                  &recResumeTemplate = CreateRecord(Record.HRS_RES_TMPL);
                  &recResumeTemplate.HRS_RES_TMPL_ID.Value = &myTemplate;
                  &recResumeTemplate.SelectByKey();
                  
                  If &recResumeTemplate.HRS_RFRL_S_SRC_REQ.Value = "Y" Then
                     &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                     &recReferral.HRS_SUBSOURCE_ID.ShowRequiredFieldCue = True;
                     
                     &bReferralSourceRequired = True;
                     &bReferralSubsourceRequired = True;
                  Else
                     If &recResumeTemplate.HRS_RFRL_SRC_REQ.Value = "Y" Then
                        &recReferral.HRS_SOURCE_ID.ShowRequiredFieldCue = True;
                        
                        &bReferralSourceRequired = True;
                     End-If;
                  End-If;
               End-If;
               
               SQLExec("select COUNT(*) from PS_HRS_SUBSRC_VW_I where HRS_SOURCE_ID = :1", &recReferral.HRS_SOURCE_ID.Value, &intRowCount);
               
               &recReferral.HRS_SUBSOURCE_ID.ShowRequiredFieldCue = (&bReferralSubsourceRequired And
                  &intRowCount > 0);
               &recReferral.HRS_SUBSOURCE_ID.Visible = (&intRowCount > 0);
               
               %This.formatReferral();
               
               Break;
            When-Other /* JPM */
               /* This is for JPM Content - perform only once as it formats all available JPM Content sections     */
               /* at one time according to the sections in the applicable resume templates                         */
               HRS_CE_WRK.HRS_CONT_SBP_GRPB.Visible = True;
               
               If Not &bol_content_drawn Then
                  &rs_JPM_Content = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_RES_SCTJ_VW);
                  %This.formatJPMContent(&rs_JPM_Content, &nSectionPgSeq);
                  &bol_content_drawn = True;
               End-If;
               
               Break;
            End-Evaluate;
         End-For;
      End-If;
   catch Exception &Exception
      MessageBox(0, "", 0, 0, "Caught exception: " | &Exception.ToString());
   end-try;
end-method;

method setGridLabels
   
   Local number &nbr_SiteId;
   Local string &sProfilePage, &sReviewPage;
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   /* Fluid pages have different names.  Use the classic page name to determine the fluid page name, if necessary */
   &sProfilePage = %This.getPageName(Page.HRS_CE_PROFILE);
   &sReviewPage = %This.getPageName(Page.HRS_CE_REVIEW);
   
   /* Attachments */
   GetGrid(@("Page." | &sProfilePage), "HRS_ATTCH_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_33"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sReviewPage), "HRS_ATTCH_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_33"), String(&nbr_SiteId));
   
   If %This.isSectionRequired("ATT") Then
      GetGrid(@("Page." | &sProfilePage), "HRS_ATTCH_SS_VW").Label = GetGrid(@("Page." | &sProfilePage), "HRS_ATTCH_SS_VW").Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   
   /* Training */
   
   GetGrid(@("Page." | &sProfilePage), "HRS_TRAIN_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_29"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sReviewPage), "HRS_TRAIN_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_29"), String(&nbr_SiteId));
   
   If %This.isSectionRequired("TRA") Then
      GetGrid(@("Page." | &sProfilePage), "HRS_TRAIN_SS_VW").Label = GetGrid(@("Page." | &sProfilePage), "HRS_TRAIN_SS_VW").Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   
   /* Work Experience */
   
   GetGrid(@("Page." | &sProfilePage), "HRS_APP_WRK_EXP").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_09"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sReviewPage), "HRS_APP_WRK_EXP").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_09"), String(&nbr_SiteId));
   
   If %This.isSectionRequired("WRK") Then
      GetGrid(@("Page." | &sProfilePage), "HRS_APP_WRK_EXP").Label = GetGrid(@("Page." | &sProfilePage), "HRS_APP_WRK_EXP").Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   
   /* Federal Priority Placement */
   
   GetGrid(@("Page." | &sProfilePage), "HRS_G_PRI_PL").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_17"), String(&nbr_SiteId));
   
   If %This.isSectionRequired("PRI") Then
      GetGrid(@("Page." | &sProfilePage), "HRS_G_PRI_PL").Label = GetGrid(@("Page." | &sProfilePage), "HRS_G_PRI_PL").Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   
   /* References */
   
   GetGrid(@("Page." | &sProfilePage), "HRS_REFF_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_20"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sReviewPage), "HRS_REFF_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_20"), String(&nbr_SiteId));
   
   If %This.isSectionRequired("RFR") Then
      GetGrid(@("Page." | &sProfilePage), "HRS_REFF_SS_VW").Label = GetGrid(@("Page." | &sProfilePage), "HRS_REFF_SS_VW").Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
end-method;

method setLabels
   /* Set all group box labels */
   Local string &strAttachmentsTextID, &strSubID;
   Local number &nbr_SiteId;
   Local string &sProfilePage, &sReviewPage;
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   /* Fluid pages have different names.  Use the classic page name to determine the fluid page name, if necessary */
   &sProfilePage = %This.getPageName(Page.HRS_CE_PROFILE);
   &sReviewPage = %This.getPageName(Page.HRS_CE_REVIEW);
   
   HRS_CE_WRK.GRPB_PREFS.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_06"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sProfilePage), "HRS_TRAIN_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_08"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sProfilePage), "HRS_APP_WRK_EXP").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_09"), String(&nbr_SiteId));
   
   GetGrid(@("Page." | &sProfilePage), "HRS_G_PRI_PL").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_17"), String(&nbr_SiteId));
   HRS_CE_WRK.GRPB_G_PREFS.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_18"), String(&nbr_SiteId));
   HRS_CE_WRK.GRPB_QUESTIONAIRRE.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_19"), String(&nbr_SiteId));
   GetGrid(@("Page." | &sProfilePage), "HRS_REFF_SS_VW").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_20"), String(&nbr_SiteId));
   rem HRS_CE_WRK.GRPB_PERS_INFO.Label = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_GRPB_21", String(&nbr_SiteId));
   HRS_CE_WRK.HRS_REFERRAL_GPB.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_23"), String(&nbr_SiteId));
   
   HRS_CE_WRK.HRS_SEC_INFO_PREQ.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_37"), String(&nbr_SiteId));
   
   /* Set Resume step instructional text */
   If &c_bIsFluidMode Then
      HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLRES_PT01", String(&applicant.HRS_SITE_ID));
   Else
      HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CERES_PT01", String(&applicant.HRS_SITE_ID));
   End-If;
   
   HRS_CE_WRK2.HRS_RES_OPTN_MSG.Visible = All(HRS_CE_WRK2.HRS_RES_OPTN_MSG.Value);
   
   If &c_bIsFluidMode Then
      HRS_CE_WRK2.HRS_COV_OPTN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLCOV_PT01", String(&applicant.HRS_SITE_ID));
   Else
      HRS_CE_WRK2.HRS_COV_OPTN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CECOV_PT01", String(&applicant.HRS_SITE_ID));
   End-If;
   
   HRS_CE_WRK2.HRS_COV_OPTN_MSG.Visible = All(HRS_CE_WRK2.HRS_COV_OPTN_MSG.Value);
   
   /* Set Attachments instructional text */
   SQLExec("select HRS_ATTACH_TEXT_ID from PS_HRS_RES_TMPL where HRS_RES_TMPL_ID = :1", &myTemplate, &strAttachmentsTextID);
   
   If All(&strAttachmentsTextID) Then
      SQLExec("select HR_SSTEXT_SUB_ID from PS_HR_SSTEXT_MSGID where OBJECTOWNERID = 'HRAM' and TEXT_ID = :1", &strAttachmentsTextID, &strSubID);
      
      If All(&strSubID) Then
         HRS_CE_WRK.SEC_INFO_ATTACH.Value = &obj_c_myCatalog.GetCandTextSimpleWithSubID(&strAttachmentsTextID, &strSubID, String(&nbr_SiteId));
      Else
         HRS_CE_WRK.SEC_INFO_ATTACH.Value = &obj_c_myCatalog.GetCandTextSimple(&strAttachmentsTextID, String(&nbr_SiteId));
      End-If;
   End-If;
   
   HRS_CE_WRK.SEC_INFO_ATTACH.Visible = All(HRS_CE_WRK.SEC_INFO_ATTACH.Value);
   
   /* Set the text for the Preferences section */
   /* In Fluid mode, set the groupbox title to Instructions: Job Preferences  */
   /* this label is not visible, but will be available in accessibility mode. */
   HRS_CE_WRK.HRS_CE_PREFS_INSTR.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_01"), String(&nbr_SiteId));
   HRS_CE_WRK.HRS_CE_PREFS_INSTR.Visible = All(HRS_CE_WRK.HRS_CE_PREFS_INSTR.Value);
   If &c_bIsFluidMode And
         HRS_CE_WRK.HRS_CE_PREFS_INSTR.Visible Then
      HRS_CE_WRK.HRS_CE_PREFS_INSTR.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_06"), String(&nbr_SiteId));
   End-If;
   
   /* Set the text for the Work Experience section */
   HRS_CE_WRK.SEC_INFO_WORK.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_02"), String(&nbr_SiteId));
   REM HRS_CE_WRK.SEC_INFO_WORK.Visible = All(HRS_CE_WRK.SEC_INFO_WORK.Value);
   
   /* Set the text for the Highest Education Level section */
   /* In Fluid mode, set the groupbox title to Instructions: Job Preferences  */
   /* this label is not visible, but will be available in accessibility mode. */
   HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_32"), String(&nbr_SiteId));
   HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Visible = All(HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Value);
   If &c_bIsFluidMode And
         HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Visible Then
      HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | HRS_CE_WRK.GRPB_EDU.GetLongLabel("GRPB_WRK_EXP");
   End-If;
   
   /* Set the text for the government preferences section */
   HRS_CE_WRK.SEC_INFO_PREFS_G.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_05"), String(&nbr_SiteId));
   HRS_CE_WRK.SEC_INFO_PREFS_G.Visible = All(HRS_CE_WRK.SEC_INFO_PREFS_G.Value);
   
   /* Set the text for the training section */
   HRS_CE_WRK.SEC_INFO_TRAINING.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_08"), String(&nbr_SiteId));
   REM HRS_CE_WRK.SEC_INFO_TRAINING.Visible = All(HRS_CE_WRK.SEC_INFO_TRAINING.Value);
   
   /* Set the text for Federal priority placement section */
   HRS_CE_WRK.SEC_INFO_G_PRI_PL.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_14"), String(&nbr_SiteId));
   REM HRS_CE_WRK.SEC_INFO_G_PRI_PL.Visible = All(HRS_CE_WRK.SEC_INFO_G_PRI_PL.Value);
   
   /* Set the text for References section */
   HRS_CE_WRK.SEC_INFO_REFERENCE.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_15"), String(&nbr_SiteId));
   REM HRS_CE_WRK.SEC_INFO_REFERENCE.Visible = All(HRS_CE_WRK.SEC_INFO_REFERENCE.Value);
   
   /* Set the text for Personal Information section */
   /* In Fluid mode, set the groupbox title to Instructions: Job Preferences  */
   /* this label is not visible, but will be available in accessibility mode. */
   HRS_CE_WRK.SEC_INFO_PERS_INFO.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_25"), String(&nbr_SiteId));
   If &c_bIsFluidMode And
         All(HRS_CE_WRK.SEC_INFO_PERS_INFO.Value) Then
      HRS_CE_WRK.SEC_INFO_PERS_INFO.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_FL_GRPB_21"), String(&nbr_SiteId));
   End-If;
   
   /* Set the text for the Referral section */
   HRS_CE_WRK.SEC_INFO_REFERRAL.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_33"), String(&nbr_SiteId));
   HRS_CE_WRK.SEC_INFO_REFERRAL.Visible = (All(HRS_CE_WRK.SEC_INFO_REFERRAL.Value) And
      (%Page <> %This.getPageName(Page.HRS_CE_REVIEW)));
   
   /* Set the text for the Questionnaire section */
   HRS_CE_WRK.HRS_SEC_INFO_QSTN.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_34"), String(&nbr_SiteId));
   HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = All(HRS_CE_WRK.HRS_SEC_INFO_QSTN.Value);
   
   HRS_REVIEW_WRK.HRS_PAGE_INSTR.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_38"), String(&nbr_SiteId));
end-method;

method hideAllSections
   HRS_CE_WRK.GRPB_EDU.Visible = False;
   HRS_CE_WRK.HRS_SEC_INFO_H_EDU.Visible = False;
   HRS_CE_WRK.GRPB_PREFS.Visible = False;
   HRS_CE_WRK.HRS_CE_PREFS_INSTR.Visible = False;
   HRS_CE_WRK.HRS_ATTACH_GB.Visible = False;
   HRS_CE_WRK.GRPB_TRAIN.Visible = False;
   HRS_CE_WRK.GRPB_WRK_EXP.Visible = False;
   HRS_CE_WRK.GRPB_RES_COLLECT.Visible = False;
   HRS_CE_WRK.GRPB_G_PP.Visible = False;
   HRS_CE_WRK.GRPB_G_PREFS.Visible = False;
   HRS_CE_WRK.SEC_INFO_PREFS_G.Visible = False;
   HRS_CE_WRK.GRPB_QUESTIONAIRRE.Visible = False;
   HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = False;
   HRS_CE_WRK.GRPB_OPEN_ENDED.Visible = False;
   HRS_CE_WRK.GRPB_REFERENCES.Visible = False;
   HRS_CE_WRK.GRPB_PERS_INFO.Visible = False;
   HRS_CE_WRK.GRPB_REFERRAL.Visible = False;
   HRS_CE_WRK.GRPB_REFERRAL_EMP.Visible = False;
   HRS_CE_WRK.HRS_CONT_SBP_GRPB.Visible = False;
end-method;

method resetErrors
   /** Reset all errors on the page.  The surrounding frames will reclaim the resulting whitespace */
end-method;

method getResumeType
   /+ Returns String +/
   Return %This.resumetype;
end-method;

method setResumeType
   /+ &type as String +/
   %This.resumetype = &type;
end-method;

method saveState
   
end-method;

method nextPage
   If &thisIndex < &asection.Len Then
      %This.changeState(&thisIndex + 1);
   Else
      rem throw CreateException(18128, 2, "End of transaction");
   End-If;
end-method;

method previousPage
   If &thisIndex > 1 Then
      %This.changeState(&thisIndex - 1);
   Else
      rem throw CreateException(18128, 2, "Beginning of transaction");
   End-If;
end-method;

method getCurrentPage
   /+ Returns Number +/
   Return &thisIndex;
end-method;

method getHyperlinks
   /+ Returns Array of HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:Hyperlink +/
   Return &aHyperlink;
end-method;

method hasPhone
   /+ Returns Boolean +/
   If &asection.Find("CNP") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasAddr
   /+ Returns Boolean +/
   If &asection.Find("CNA") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasEmail
   /+ Returns Boolean +/
   If &asection.Find("CNE") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasQuestionairre
   /+ Returns Boolean +/
   Local array of string &ary_tempSectionName;
   Local number &nbr_counter;
   Local boolean &ret_value;
   
   &ret_value = False;
   
   If &asection <> Null Then
      For &nbr_counter = 1 To &asection.Len
         &ary_tempSectionName = &asection [&nbr_counter];
         
         If &ary_tempSectionName.Find("QUE") > 0 Then
            &ret_value = True;
            Break;
         Else
            &ret_value = False;
         End-If;
      End-For;
   End-If;
   
   Return &ret_value;
end-method;

method hasWorkExp
   /+ Returns Boolean +/
   If &asection.Find("WRK") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasResumeOptions
   /+ Returns Boolean +/
   Local Rowset &rsResumeOptions;
   Local integer &i;
   
   &rsResumeOptions = GetLevel0()(1).GetRowset(Scroll.HRS_RES_COLL_VW);
   
   For &i = 1 To &rsResumeOptions.RowCount
      If &rsResumeOptions(&i).Visible And
            All(&rsResumeOptions(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value) Then
         Return True;
      End-If;
   End-For;
   
   Return False;
end-method;

method hasCoverLetterOptions
   /+ Returns Boolean +/
   Local Rowset &rsCoverLetterOptions;
   Local integer &i;
   
   &rsCoverLetterOptions = GetLevel0()(1).GetRowset(Scroll.HRS_COV_COLL_VW);
   
   For &i = 1 To &rsCoverLetterOptions.RowCount
      If &rsCoverLetterOptions(&i).Visible And
            All(&rsCoverLetterOptions(&i).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value) Then
         Return True;
      End-If;
   End-For;
   
   Return False;
end-method;

method isResumeRequired
   /+ Returns Boolean +/
   Local Rowset &rsResumeOptions;
   Local integer &i;
   Local boolean &bAnyResumeOption, &bApplyWithout;
   
   &rsResumeOptions = GetLevel0()(1).GetRowset(Scroll.HRS_RES_COLL_VW);
   
   &bAnyResumeOption = False;
   &bApplyWithout = False;
   
   For &i = 1 To &rsResumeOptions.RowCount
      Evaluate &rsResumeOptions(&i).HRS_RES_COLL_VW.HRS_RES_SEC_NAME.Value
      When = "REA" /* attach */
      When = "RFA" /* attach (Refer a Friend) */
      When = "REC" /* copy and paste */
         &bAnyResumeOption = True;
         Break;
      When = "REE" /* use existing */
         If &rsResumeOptions(&i).Visible Then
            &bAnyResumeOption = True;
         End-If;
         
         Break;
      When = "REN" /* apply without */
      When = "RFB" /* refer without */
         &bApplyWithout = True;
      End-Evaluate;
   End-For;
   
   Return (&bAnyResumeOption And
      Not &bApplyWithout);
end-method;

method isCoverLetterRequired
   /+ Returns Boolean +/
   Local Rowset &rsCoverLetterOptions;
   Local integer &i;
   Local boolean &bAnyCoverLetterOption, &bApplyWithout;
   
   &rsCoverLetterOptions = GetLevel0()(1).GetRowset(Scroll.HRS_COV_COLL_VW);
   
   &bAnyCoverLetterOption = False;
   &bApplyWithout = False;
   
   For &i = 1 To &rsCoverLetterOptions.RowCount
      Evaluate &rsCoverLetterOptions(&i).HRS_COV_COLL_VW.HRS_COV_LETTER_OPT.Value
      When = "CLA" /* attach */
         &bAnyCoverLetterOption = True;
         Break;
      When = "CLN" /* apply without */
         &bApplyWithout = True;
      End-Evaluate;
   End-For;
   
   Return (&bAnyCoverLetterOption And
      Not &bApplyWithout);
end-method;

method hasResume
   /+ Returns Boolean +/
   Local Record &recResume;
   
   &recResume = GetLevel0()(1).GetRowset(Scroll.HRS_RESM_APP_VW)(1).HRS_RESM_APP_VW;
   
   Return (All(&recResume.ATTACHSYSFILENAME.Value) Or
      All(&recResume.RESUME_TEXT.Value));
end-method;

method hasCoverLetter
   /+ Returns Boolean +/
   Return All(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_COV_SS_VW)(1).HRS_COV_SS_VW.ATTACHUSERFILE.Value);
end-method;

method hasTraining
   /+ Returns Boolean +/
   If &asection.Find("TRA") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasPersInfo
   /+ Returns Boolean +/
   If &asection.Find("PER") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method hasPriorityPlacement
   /+ Returns Boolean +/
   If &asection.Find("PRI") > 0 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method formatJobBasket
   Local Rowset &rs_JobBasket;
   Local string &str_ReturnedText;
   Local number &nbr_SiteId, &i, &nbr_PersonId, &nbr_ProfileSeq;
   
   REM Local Grid &grid = GetGrid(Page.HRS_CE_PROFILE, "HRS_APP_RCMNT_I");
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   &nbr_PersonId = &applicant.HRS_PERSON_ID;
   &nbr_ProfileSeq = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
   
   If &nbr_ProfileSeq = 0 Then
      SQLExec("SELECT MAX(HRS_PROFILE_SEQ) FROM PS_HRS_APP_PROFILE WHERE HRS_PERSON_ID=:1", &nbr_PersonId, &nbr_ProfileSeq);
   End-If;
   
   &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_SCR_1", String(&nbr_SiteId));
   HRS_CE_WRK.HRS_CE_JOBS_TXT.Value = &str_ReturnedText;
   &rs_JobBasket = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   If &rs_JobBasket.ActiveRowCount >= 1 And
         &rs_JobBasket.GetRow(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value > 0 Then
      HRS_CE_WRK.HRS_CE_JOBS_GPB.Visible = True;
      HRS_CE_WRK.HRS_CE_NOJOBS_GPB.Visible = False;
      REM &grid.GetColumn("POSTING_TITLE").Label = &grid.GetColumn("POSTING_TITLE_ORIG").Label;
      
      For &i = 1 To &rs_JobBasket.ActiveRowCount
         &rs_JobBasket.GetRow(&i).HRS_CE_WRK2.POSTING_TITLE.Label = &rs_JobBasket.GetRow(&i).HRS_JO_I.POSTING_TITLE.Value;
         &rs_JobBasket.GetRow(&i).HRS_CE_WRK2.POSTING_TITLE.Value = &rs_JobBasket.GetRow(&i).HRS_JO_I.POSTING_TITLE.Value;
         &rs_JobBasket.GetRow(&i).HRS_CE_WRK2.HRS_SCR_RSLT_MSG.Value = %This.ShowIfEligibleToApply(&nbr_PersonId, &nbr_ProfileSeq, &rs_JobBasket.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
      End-For;
   Else
      REM HRS_CE_WRK.HRS_CE_JOBS_GPB.Visible = False;
      REM HRS_CE_WRK.HRS_CE_NOJOBS_GPB.Visible = True;
      &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_SCR_2", String(&nbr_SiteId));
      HRS_CE_WRK.HRS_CE_NOJOBS_TXT.Value = &str_ReturnedText;
   End-If;
end-method;

method formatRecruitingSections
   Local array of string &astrSections;
   
   If &c_bReviewSubmitted Then
      &astrSections = %This.getStepSections("@@REVIEW_SUBMIT");
   Else
      &astrSections = %This.getCurrentStepSections();
   End-If;
   
   If &astrSections.Find("ATT") > 0 Then
      %This.formatAttachments(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_ATTCH_SS_VW));
   End-If;
   
   If &astrSections.Find("WRK") > 0 Then
      %This.formatWorkExp(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_APP_WRK_EXP));
   End-If;
   
   If &astrSections.Find("TRA") > 0 Then
      %This.formatTraining(GetLevel0()(1).GetRowset(Scroll.HRS_TRAIN_SS_VW));
   End-If;
   
   If &astrSections.Find("RFR") > 0 Then
      %This.formatReferences(GetLevel0()(1).GetRowset(Scroll.HRS_REFF_SS_VW));
   End-If;
   
   If Not &c_bIsFluidMode And
         &astrSections.Find("PRI") > 0 Then
      %This.formatPlacement(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_G_PRI_PL));
   End-If;
end-method;

method formatAttachments
   /+ &rsAttachments as Rowset +/
   Local Record &recAttachment;
   Local string &strNoRowsText, &strAttachedFileLabel;
   Local number &numSiteID;
   Local integer &i;
   
   &numSiteID = &applicant.HRS_SITE_ID;
   
   HRS_CE_WRK.SEC_INFO_ATTACH.Visible = (All(HRS_CE_WRK.SEC_INFO_ATTACH.Value) And
      %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   If Not &c_bIsFluidMode Then
      GetGrid(%This.getPageName(Page.HRS_CE_PROFILE), "HRS_ATTCH_SS_VW").GetColumn("EDIT").Visible = False;
      GetGrid(%This.getPageName(Page.HRS_CE_REVIEW), "HRS_ATTCH_SS_VW").GetColumn("DELETE").Visible = False;
   End-If;
   
   HRS_CE_LNK_WRK.HRS_ADD_ATTACH_PB.Visible = (%Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   HRS_CE_WRK.HRS_REQ_ATT.Visible = False;
   HRS_CE_WRK.HRS_REQ_ATT.Enabled = False;
   
   &rsAttachments(1).HRS_ATTCH_SS_VW.DESCR.ShowRequiredFieldCue = True;
   
   If All(&rsAttachments(1).HRS_ATTCH_SS_VW.ATTACH_SEQ_NBR.Value) Then
      GetLevel0()(1).HRS_CE_WRK.HRS_ATTACH_GRID_GB.Visible = True;
      GetLevel0()(1).HRS_CE_WRK.HRS_ATTACH_NONE_GB.Visible = False;
      
      For &i = 1 To &rsAttachments.ActiveRowCount
         &recAttachment = &rsAttachments(&i).HRS_ATTCH_SS_VW;
         &recAttachment.ATTACHUSERFILE.Label = &recAttachment.ATTACHUSERFILE.Value;
         &rsAttachments(&i).HRS_ATTCH_SS_VW.DESCR.DisplayOnly = (%Page = Page.HRS_CE_REVIEW Or
            &c_bIsFluidMode);
      End-For;
      
      If &c_bIsFluidMode Then
         &strAttachedFileLabel = &rsAttachments(1).HRS_ATTCH_SS_VW.ATTACHUSERFILE.GetLongLabel("ATTACHUSERFILE");
      Else
         &strAttachedFileLabel = MsgGetText(18178, 668, "Message not found.");
      End-If;
      
      GetGrid(%This.getPageName(Page.HRS_CE_PROFILE), "HRS_ATTCH_SS_VW").GetColumn("ATTACHUSERFILE").Label = &strAttachedFileLabel;
      GetGrid(%This.getPageName(Page.HRS_CE_REVIEW), "HRS_ATTCH_SS_VW").GetColumn("ATTACHUSERFILE").Label = &strAttachedFileLabel;
   Else
      GetLevel0()(1).HRS_CE_WRK.HRS_ATTACH_GRID_GB.Visible = False;
      GetLevel0()(1).HRS_CE_WRK.HRS_ATTACH_NONE_GB.Visible = True;
      
      HRS_CE_WRK.HRS_ATTACH_NONE_GB.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_33"), String(&numSiteID));
      
      If %This.isSectionRequired("ATT") Then
         HRS_CE_WRK.HRS_ATTACH_NONE_GB.Label = HRS_CE_WRK.HRS_ATTACH_NONE_GB.Label | " " | MsgGetText(18178, 338, "Message not found.");
         &strNoRowsText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(HRS_CE_WRK.HRS_ATTACH_NONE_GB), "", " ", " ", " ", " ");
      Else
         If &c_bIsFluidMode Then
            &strNoRowsText = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLATT_PT01", String(HRS_CE_WRK.HRS_ATTACH_NONE_GB));
         Else
            &strNoRowsText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CEATT_PT01", String(HRS_CE_WRK.HRS_ATTACH_NONE_GB));
         End-If;
      End-If;
      
      HRS_CE_WRK.HRS_NO_ATTACH_MSG.Value = &strNoRowsText;
   End-If;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatAttachments(&rsAttachments);
   End-If;
end-method;

method formatWorkExp
   /+ &rs_WorkExp as Rowset +/
   Local array of array of string &ARProp = CreateArrayRept(CreateArrayRept("", 4), 0);
   Local Grid &grd_PstSec;
   Local Row &rowWorkExp;
   Local string &str_ReturnedText;
   Local number &nbr_SiteId;
   Local integer &i;
   
   If %Page <> %This.getPageName(Page.HRS_CE_PROFILE) And
         %Page <> %This.getPageName(Page.HRS_CE_REVIEW) Then
      Return;
   End-If;
   
   &grd_PstSec = GetGrid(%This.getPageName(Page.HRS_CE_PROFILE), "HRS_APP_WRK_EXP");
   &ARProp.Push(CreateArray("EMPLOYER", "Y", "Y", MsgGetText(18178, 275, "")));
   &grd_PstSec.SetProperties(&ARProp);
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   HRS_CE_WRK.SEC_INFO_WORK.Visible = (All(HRS_CE_WRK.SEC_INFO_WORK.Value) And
      %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   If &c_bIsFluidMode And
         HRS_CE_WRK.SEC_INFO_WORK.Visible Then
      HRS_CE_WRK.SEC_INFO_WORK.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_09"), String(&nbr_SiteId));
   End-If;
   
   If Not &c_bIsFluidMode Then
      GetGrid(Page.HRS_CE_REVIEW, "HRS_APP_WRK_EXP").GetColumn("DELETE").Visible = False;
   End-If;
   
   HRS_CE_LNK_WRK.ADD_WORK_EXP.Visible = (%Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   HRS_CE_WRK.HRS_REQ_WRK.Visible = False;
   HRS_CE_WRK.HRS_REQ_WRK.Enabled = False;
   
   If &rs_WorkExp.ActiveRowCount >= 1 And
         All(&rs_WorkExp(1).HRS_APP_WRK_EXP.START_DT.Value) Then
      &rs_WorkExp.ParentRow.HRS_CE_WRK.HRS_CE_WRK_EXP_GPB.Visible = True;
      HRS_CE_WRK.HRS_NOWRK_EXP_GPB.Visible = False;
      
      If %Page = %This.getPageName(Page.HRS_CE_REVIEW) Then
         GetGrid(%Page, "HRS_APP_WRK_EXP").GetColumn("HRS_REQ_RES_VAL").Visible = False;
      End-If;
      
      GetGrid(%Page, "HRS_APP_WRK_EXP").GetColumn("EDIT").Visible = (%Page = %This.getPageName(Page.HRS_CE_PROFILE) Or
         Not &c_bReviewSubmitted Or
         &c_bIsFluidMode);
      
      If Not &c_bIsFluidMode Then
         GetGrid(Page.HRS_CE_PROFILE, "HRS_APP_WRK_EXP").GetColumn("VIEW").Visible = (%Page = Page.HRS_CE_REVIEW);
      End-If;
   Else
      &rs_WorkExp.ParentRow.HRS_CE_WRK.HRS_CE_WRK_EXP_GPB.Visible = False;
      HRS_CE_WRK.HRS_NOWRK_EXP_GPB.Visible = True;
      HRS_CE_WRK.HRS_NOWRK_EXP_GPB.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_09"), String(&nbr_SiteId));
      
      If %This.isSectionRequired("WRK") Then
         HRS_CE_WRK.HRS_NOWRK_EXP_GPB.Label = HRS_CE_WRK.HRS_NOWRK_EXP_GPB.Label | " " | MsgGetText(18178, 338, "Message not found.");
         &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(&applicant.HRS_SITE_ID), "", " ", " ", " ", " ");
      Else
         If &c_bIsFluidMode Then
            &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLWRKEXP_PT03", String(&nbr_SiteId));
         Else
            &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CEWRKEXP_PT03", String(&nbr_SiteId));
         End-If;
      End-If;
      
      HRS_CE_WRK.HRS_NOWRK_EXP_DESC.Value = &str_ReturnedText;
      
      HRS_REVIEW_WRK.HRS_ED_WRK.Visible = (%Page = %This.getPageName(Page.HRS_CE_REVIEW) And
         Not &c_bReviewSubmitted);
   End-If;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatWorkExp(&rs_WorkExp);
   End-If;
end-method;

method formatTraining
   /+ &rs_Training as Rowset +/
   Local string &str_ReturnedText;
   Local number &nbr_SiteId;
   Local Grid &grd_PstSec;
   Local array of array of string &ARProp = CreateArrayRept(CreateArrayRept("", 4), 0);
   Local Row &rowTraining;
   Local integer &i;
   Local boolean &AllHiddenRows = True; /*21237686 Hide training rows added after submission*/
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   HRS_CE_WRK.SEC_INFO_TRAINING.Visible = (All(HRS_CE_WRK.SEC_INFO_TRAINING.Value) And
      (%Page <> %This.getPageName(Page.HRS_CE_REVIEW)));
   
   If &c_bIsFluidMode And
         HRS_CE_WRK.SEC_INFO_TRAINING.Visible Then
      HRS_CE_WRK.SEC_INFO_TRAINING.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_29"), String(&nbr_SiteId));
      
   End-If;
   
   HRS_CE_WRK.HRS_REQ_TRA.Visible = False;
   HRS_CE_WRK.HRS_REQ_TRA.Enabled = False;
   
   /* Add Training is not available on the Review/Submit page */
   HRS_CE_LNK_WRK.ADD_TRAINING.Visible = (%Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   /* In Classic PIA, the delete button is in the grid. It should not be visible on the Review/Submit page */
   If Not &c_bIsFluidMode And
         %Page = Page.HRS_CE_REVIEW Then
      GetGrid(Page.HRS_CE_REVIEW, "HRS_TRAIN_SS_VW").GetColumn("DELETE").Visible = False;
   End-If;
   
   /*21237686 Hide training rows added after submission*/
   For &i = 1 To &rs_Training.ActiveRowCount
      If All(&rs_Training(&i).HRS_TRAIN_SS_VW.COURSE_TITLE.Value) And
            &rs_Training(&i).Visible = True Then
         &AllHiddenRows = False;
         Break;
      End-If;
   End-For;
   /*21237686 ends*/
   
   /* If there is data, */
   If &rs_Training.ActiveRowCount >= 1 And
         All(&rs_Training(1).HRS_TRAIN_SS_VW.COURSE_TITLE.Value) And
         &AllHiddenRows = False Then
      &rs_Training.ParentRow.HRS_CE_WRK.HRS_CE_TRNG_GPB.Visible = True;
      HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Visible = False;
      
   Else
      /* If there is no data, display the empty grid group box */
      &rs_Training.ParentRow.HRS_CE_WRK.HRS_CE_TRNG_GPB.Visible = False;
      HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Visible = True;
      If &c_bIsFluidMode Then
         HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_29"), String(&nbr_SiteId));
      Else
         HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Label = MsgGetText(18178, 378, "Message not found: Job Training");
      End-If;
      
      If %This.isSectionRequired("TRA") Then
         HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Label = HRS_CE_WRK.HRS_CE_NOTRNG_GPB.Label | " " | MsgGetText(18178, 338, "Message not found."); /* (Required) */
         &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(&applicant.HRS_SITE_ID), "", " ", " ", " ", " "); /* You must enter information in this section. */
      Else
         If &c_bIsFluidMode Then
            &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLTRNG_PT01", String(&nbr_SiteId)); /* You have not added any training information to your application. */
         Else
            &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CETRNG_PT01", String(&nbr_SiteId)); /* You have not added any training information to your application. */
         End-If;
      End-If;
      
      HRS_CE_WRK.HRS_CE_NOTRNG_MSG.Value = &str_ReturnedText;
      
   End-If;
   
   /* Additional formating for Fluid version */
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatTraining(&rs_Training);
   End-If;
   
end-method;

method formatReferences
   /+ &rs_References as Rowset +/
   Local string &str_ReturnedText;
   Local number &nbr_SiteId, &i;
   Local Grid &grd_PstSec;
   
   Local array of array of string &ARProp = CreateArrayRept(CreateArrayRept("", 4), 0);
   
   <*&grd_PstSec = GetGrid(Page.HRS_CE_PROFILE, "HRS_REFF_SS_VW");
   REM &ARProp.Push(CreateArray("EDIT", "Y", "Y", MsgGetText(18178, 273, "")));
   &grd_PstSec.SetProperties(&ARProp);*>
   
   <*
   /* If it's fluid mode, instantiate the fluid page layout object */
   If &c_bIsFluidMode And
         &objFluidPageLayout = Null Then
      &objFluidPageLayout = CreateObject("HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:FluidPageLayout", %This);
   End-If;
*>
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   /* getPageName ensures that the correct version of the reference page is used; either classic or fluid version */
   If %Page = %This.getPageName(Page.HRS_CE_APP_REF) Then
      HRS_CE_WRK.GRPB_REFERENCES.Visible = True;
   End-If;
   
   rem HRS_APP_TRN_WRK.HRS_PREV_PAGE_NM.Value = %Page;
   
   HRS_CE_WRK.SEC_INFO_REFERENCE.Visible = (All(HRS_CE_WRK.SEC_INFO_REFERENCE.Value) And
      %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   If &c_bIsFluidMode And
         HRS_CE_WRK.SEC_INFO_REFERENCE.Visible Then
      HRS_CE_WRK.SEC_INFO_REFERENCE.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_20"), String(&nbr_SiteId));
   End-If;
   
   /* Only the classic PIA page has a delete button on the summary page */
   If Not &c_bIsFluidMode Then
      GetGrid(Page.HRS_CE_REVIEW, "HRS_REFF_SS_VW").GetColumn("DELETE").Visible = False;
   End-If;
   
   /* Add button is not available on the review and submit pages */
   HRS_CE_LNK_WRK.ADD_REFERENCES.Visible = (%Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   /* Start with the Required icon disabled */
   HRS_CE_WRK.HRS_REQ_RFR.Visible = False;
   HRS_CE_WRK.HRS_REQ_RFR.Enabled = False;
   
   /* There is existing data to show */
   If &rs_References.ActiveRowCount >= 1 And
         (All(&rs_References(1).HRS_REFF_SS_VW.HRS_REF_NAME.Value) Or
            All(&rs_References(1).HRS_REFF_SS_VW.REF_TITLE.Value) Or
            All(&rs_References(1).HRS_REFF_SS_VW.EMPLOYER.Value)) Then
      HRS_CE_WRK.HRS_REFS_GPB.Visible = True;
      HRS_CE_WRK.HRS_NO_REFS_GPB.Visible = False;
      
      /* Do not display the Required icon on the Review page or the Notification page */
      If %Page = %This.getPageName(Page.HRS_CE_REVIEW) Or
            %Page = %This.getPageName(Page.HRS_CE_APP_REF) Then
         GetGrid(%Page, "HRS_REFF_SS_VW").GetColumn("HRS_REQ_RES_VAL").Visible = False;
      End-If;
      
      /* In classic PIA, the view button is used to see the details */
      If Not &c_bIsFluidMode Then
         GetGrid(Page.HRS_CE_PROFILE, "HRS_REFF_SS_VW").GetColumn("VIEW").Visible = (%Page = Page.HRS_CE_REVIEW);
      End-If;
      
   Else
      /* Display the empty grid objects */
      HRS_CE_WRK.HRS_REFS_GPB.Visible = False;
      HRS_CE_WRK.HRS_NO_REFS_GPB.Visible = True;
      HRS_CE_WRK.HRS_NO_REFS_GPB.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_20"), String(&nbr_SiteId)); /* References */
      
      /* HRS_CE_APP_REF is the Reference page from My Notifications */
      If %Page = %This.getPageName(Page.HRS_CE_APP_REF) Then
         &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CEREF_PT01"), String(&nbr_SiteId)); /* You have not added any references to your application. */
      Else
         If %This.isSectionRequired("RFR") Then
            HRS_CE_WRK.HRS_NO_REFS_GPB.Label = HRS_CE_WRK.HRS_NO_REFS_GPB.Label | " " | MsgGetText(18178, 338, "Message not found: (Required)");
            &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(&applicant.HRS_SITE_ID), "", " ", " ", " ", " "); /* You must enter information in this section. */
         Else
            If &c_bIsFluidMode Then
               &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_FLREF_PT01", String(&nbr_SiteId)); /* You have not added any references to your application. */
            Else
               &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple("HRAM_CEREF_PT01", String(&nbr_SiteId)); /* You have not added any references to your application. */
            End-If;
         End-If;
      End-If;
      
      HRS_CE_WRK.HRS_NO_REFS_MSG.Value = &str_ReturnedText;
   End-If;
   
   /* If in fluid mode, handle fluid formating */
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatReferences(&rs_References);
   End-If;
   
end-method;

method formatDiversity
   /+ &rs_EthnicGroups as Rowset +/
   If &c_bIsFluidMode Then
      If %Page <> %This.getPageName(Page.HRS_CE_REVIEW) Then
         &objFluidPageLayout.formatDiversity(&rs_EthnicGroups);
      End-If;
   End-If;
end-method;


method formatQuestionnaire
   /+ &rs_Questionnaire as Rowset +/
   Local string &str_ReturnedText;
   Local number &j, &count1;
   Local boolean &multicorrect, &bQuestionsFound;
   Local number &CNT;
   
   &bQuestionsFound = False;
   
   If &rs_Questionnaire.ActiveRowCount >= 1 Then
      For &CNT = 1 To &rs_Questionnaire.ActiveRowCount
         If All(&rs_Questionnaire(&CNT).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value) And
               &rs_Questionnaire(&CNT).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value <> "Y" Then
            &bQuestionsFound = True;
            &rs_Questionnaire(&CNT).HRS_CE_WRK.HRS_QUESTION_GB.Visible = (GetUserOption("PPTL", "ACCESS") = "A" Or
               &c_bIsFluidMode);
            &rs_Questionnaire(&CNT).HRS_QSTN_TBL.DESCRLONG.Visible = ( Not &c_bIsFluidMode);
            &rs_Questionnaire(&CNT).HRS_RADIO_WRK.HTMLAREA.Visible = True;
         Else
            &rs_Questionnaire(&CNT).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
            &rs_Questionnaire(&CNT).HRS_QSTN_TBL.DESCRLONG.Visible = False;
            &rs_Questionnaire(&CNT).HRS_RADIO_WRK.HTMLAREA.Visible = False;
         End-If;
      End-For;
   End-If;
   
   HRS_CE_WRK.GRPB_QUESTIONAIRRE.Visible = &bQuestionsFound;
   
   If &bQuestionsFound Or
         All(GetLevel0()(1).GetRowset(Scroll.HRS_APP_OPANS_I)(1).HRS_APP_OPANS_I.HRS_QSTN_ID.Value) Then
      HRS_CE_WRK.HRS_SEC_INFO_QSTN.Value = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_SINST_34"), String(&applicant.HRS_SITE_ID));
      HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = All(HRS_CE_WRK.HRS_SEC_INFO_QSTN.Value);
   Else
      If %This.getCurrentStepSectionCount() > 1 Then
         HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = False;
      Else
         HRS_CE_WRK.HRS_SEC_INFO_QSTN.Value = MsgGetText(18178, 646, "Message not found.");
         HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = True;
      End-If;
   End-If;
   
   HRS_CE_WRK.GRPB_QUESTIONAIRRE.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_19"), String(&applicant.HRS_SITE_ID)); /*19626125*/
   
   If &c_recSite.HRS_REQ_ANS_FLG.Value = "Y" Then
      HRS_CE_WRK.GRPB_QUESTIONAIRRE.Label = HRS_CE_WRK.GRPB_QUESTIONAIRRE.Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   
   If &bQuestionsFound Then
      %This.drawQuestionAnswers();
   End-If;
end-method;

method formatOpenEndedQuestion
   /+ &rs_OpenEndedQuestion as Rowset +/
   Local string &str_ReturnedText;
   Local number &i;
   
   If &rs_OpenEndedQuestion.ActiveRowCount >= 1 And
         All(&rs_OpenEndedQuestion(1).HRS_APP_OPANS_I.HRS_QSTN_ID.Value) Then
      /* Added this because this groupbox does not show up in Fed */
      HRS_CE_WRK.GRPB_OPEN_ENDED.Visible = True;
   Else
      HRS_CE_WRK.GRPB_OPEN_ENDED.Visible = False;
   End-If;
   
   For &i = 1 To &rs_OpenEndedQuestion.ActiveRowCount
      &rs_OpenEndedQuestion(&i).HRS_QSTN_TBL.DESCRLONG.Label = &rs_OpenEndedQuestion(&i).HRS_QSTN_TBL.HRS_QSTN_ID.GetShortLabel("10");
   End-For;
   
   
   /*19626125*/
   HRS_CE_WRK.GRPB_OPEN_ENDED.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_31"), String(&applicant.HRS_SITE_ID));
   
   If &c_recSite.HRS_REQ_ANS_FLG.Value = "Y" Then
      HRS_CE_WRK.GRPB_OPEN_ENDED.Label = HRS_CE_WRK.GRPB_OPEN_ENDED.Label | " " | MsgGetText(18178, 338, "Message not found.");
   End-If;
   /*19626125*/
end-method;

/* ICE 1380322001 RJR BEGIN */
method formatSourceDropDown
   /+ &rs_Source as Rowset +/
   
   Local number &appsiteid, &i;
   Local Rowset &rs_siteSrc;
   Local Field &fld;
   
   &appsiteid = &applicant.HRS_SITE_ID;
   &rs_siteSrc = CreateRowset(Record.HRS_SRC_SU_PT_I);
   &rs_siteSrc.Fill(SQL.HRS_SRC_SITE_WHERE, &appsiteid);
   &fld = &rs_Source(1).GetRecord(Record.HRS_AL_SRCE_I).GetField(Field.HRS_SOURCE_ID);
   &fld.ClearDropDownList();
   
   For &i = 1 To &rs_siteSrc.ActiveRowCount
      &fld.AddDropDownItem(&rs_siteSrc.GetRow(&i).HRS_SRC_SU_PT_I.HRS_SOURCE_ID.Value, &rs_siteSrc.GetRow(&i).HRS_SRC_SU_PT_I.HRS_SOURCE_DESCR.Value);
   End-For;
   
end-method;

/* ICE 1380322001 RJR END */

method formatJPMContent
   /+ &rs_JPMContent as Rowset, +/
   /+ &nSectionPgSeq as Number +/
   Local array of array of string &ARShow;
   Local array of array of string &ARLabel;
   Local array of array of string &ARProps;
   Local Grid &grd_Content;
   Local Rowset &rs_Content_Items;
   Local Rowset &rs_Props = CreateRowset(Record.HRS_SCT_PROPS_I);
   Local Row &rowJPMContent, &rowJPMItem;
   Local Record &recHRS_RES_TMPL_PG, &rec_JPM_PRI_P_CAT_I, &recJPMContent, &rec;
   Local Field &fld;
   Local string &str_ReturnedText, &str_ApplAddItems, &lstr_gridcol_label, &str_DfltQual, &str_ProfileType, &str_ViewInd, &strPromptRecord;
   Local number &nbr_SiteId, &i, &j, &k, &m, &n, &grd_nbr, &arrayIndex;
   Local integer &intLastVisibleSection;
   
   &nSectionPgSeq = %This.thisIndex; /* ignore the page sequence argument - assign value of instance variabel Index */
   
   /* Get JPM Primary Person Profile Type as configured for RS */
   REM SQLExec("SELECT JPM_PRI_PERS_TYPE FROM PS_JPM_JP_PRI_TYPE", &str_ProfileType);
   &str_ProfileType = &controller.getPrimaryPersonProfileType();
   
   &Content_UI = create HRS_COMMON:HRS_CONTENT:UI:ContentGridLayout();
   
   If None(&rs_JPMContent(1).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) Then
      Return;
   End-If;
   
   &grd_nbr = 0;
   &rs_JPMContent.ShowAllRows();
   
   For &i = 1 To &rs_JPMContent.ActiveRowCount
      &grd_nbr = &grd_nbr + 1;
      
      /*If &rs_JPMContent(&i).HRS_RES_SCTJ_VW.HRS_PAGE_SEQ.Value = (&nSectionPgSeq + 2) Then*/
      If &asection [&nSectionPgSeq].Find(&rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) > 0 Then
         &rs_JPMContent(&i).HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = False;
         
         &grd_Content = GetGrid(%Page, "HRS_CONTENT_ITEMS", &grd_nbr);
         &grd_Content.Label = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value;
         
         If %Page = %This.getPageName(Page.HRS_CE_REVIEW) Then
            &grd_Content.GetColumn("HRS_REQ_RES_VAL").Visible = False;
         End-If;
         
         If %This.isSectionRequired(&rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) Then
            &grd_Content.Label = &grd_Content.Label | " " | MsgGetText(18178, 338, "Message not found.");
         End-If;
         
         /* 20921160 start */
         Local number &x;
         Local Rowset &rsContentItems;
         &rs_Props.Fill("WHERE JPM_CAT_TYPE = :1", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value);
         &rsContentItems = &rs_JPMContent(&i).GetRowset(Scroll.HRS_APPITM01_VW);
         If All(&rsContentItems(1).HRS_APPITM01_VW.JPM_CAT_ITEM_ID.Value) Then
            For &x = 1 To &rs_Props.ActiveRowCount
               If &rs_Props(&x).HRS_SCT_PROPS_I.FIELDNAME.Value = "JPM_CAT_ITEM_ID" Then
                  &grd_Content.GetColumn("DESCR100").Label = &rs_Props(&x).HRS_SCT_PROPS_I.JPM_LABEL_TEXT.Value;
               End-If;
            End-For;
         End-If;
         rem &grd_Content.GetColumn("DESCR100").Label = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value;
         /* 20921160 end */
         
         REM &grd_Content.GetColumn("JPM_DESCR90").Label = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value;
         &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Label = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
         &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.HoverText = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
         
         /* get 'Is Add Items' allowed flag */
         If &controller.applicantCanAddItems(&rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) Then
            &str_ApplAddItems = "Y";
         Else
            &str_ApplAddItems = "N";
         End-If;
         
         &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Label = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
         &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.HoverText = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
         
         &rec_JPM_PRI_P_CAT_I = CreateRecord(Record.JPM_PRI_P_CAT_I);
         &rec_JPM_PRI_P_CAT_I.JPM_JP_TYPE.Value = &str_ProfileType;
         &rec_JPM_PRI_P_CAT_I.JPM_CAT_TYPE.Value = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value;
         &rec_JPM_PRI_P_CAT_I.SelectByKey();
         
         If All(&rec_JPM_PRI_P_CAT_I.JPM_JP_QUAL_SET.Value) Then
            /* get employee default instance qualifier for this type */
            SQLExec(SQL.JPM_JP_GET_DFLT_QUAL_EE, &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value, &rec_JPM_PRI_P_CAT_I.JPM_JP_QUAL_SET.Value, &str_DfltQual);
         Else
            &str_DfltQual = "";
         End-If;
         
         If All(&rec_JPM_PRI_P_CAT_I.JPM_JP_QUAL_SET2.Value) Then
            &strPromptRecord = &controller.getContentQual2PromptRecord(&str_ProfileType, &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value);
            
            If All(&strPromptRecord) Then
               &rs_JPMContent(&i).DERIVED.EDITTABLE3.Value = &strPromptRecord;
            End-If;
         End-If;
         
         &nbr_SiteId = &applicant.HRS_SITE_ID;
         
         &rs_Content_Items = &rs_JPMContent(&i).GetRowset(Scroll.HRS_APPITM01_VW);
         
         &rs_Props.Flush();
         rem &rs_Props.Fill(SQL.HRS_APPITM_PROPS_SQL, "PERSON", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value);
         &rs_Props.Fill("WHERE JPM_CAT_TYPE =:1", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value);
         
         For &j = &rs_Content_Items.ActiveRowCount To 1 Step - 1
            If &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_TYPE.Value = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value And
                  All(&rs_Content_Items(&j).HRS_APPITM01_VW.HRS_PERSON_ID.Value) And
                  (All(&rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_ITEM_ID.Value) Or
                     All(&rs_Content_Items(&j).HRS_APPITM01_VW.HRS_CAT_ITEM_TXT.Value) Or
                     All(&rs_Content_Items(&j).HRS_APPITM01_VW.JPM_ADHOC_DESCR.Value)) Then
               &str_ViewInd = "Y";
               
               /* if this content type has an instance qualifier */
               If All(&rec_JPM_PRI_P_CAT_I.JPM_JP_QUAL_SET.Value) Then
                  If &applicant.APP_PER_STATUS = "E" Then
                     /*check if the internal employee candidate is enabled to see this item */
                     SQLExec(SQL.JPM_JP_EE_VIEW_IND, &rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value, &rec_JPM_PRI_P_CAT_I.JPM_JP_QUAL_SET.Value, &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_ITEM_QUAL.Value, &str_ViewInd);
                  Else
                     /* external candidates can only see items that have employee default instance qualifier */
                     If &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_ITEM_QUAL.Value <> &str_DfltQual Then
                        &str_ViewInd = "N";
                     End-If;
                  End-If;
               End-If;
               
               If &str_ViewInd = "Y" Then
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_CONT_GPB.Visible = True;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible = False;
                  &rs_Content_Items(&j).Visible = True;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = False;
                  
                  /* if this is a content type that has the "Applicant May Add Items" checked */
                  /* then enable the add button */
                  If &str_ApplAddItems = "Y" Then
                     &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = True;
                     &grd_Content.GetColumn("EDIT").Visible = ( Not &c_bReviewSubmitted);
                     
                     If Not &c_bIsFluidMode Then
                        &grd_Content.GetColumn("DELETE").Visible = (%Page <> Page.HRS_CE_REVIEW);
                     End-If;
                  Else
                     /* applicant cannot add items - */
                     &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = False;
                     /* disable detail link and do not display delete button */
                     REM &grd_Content.GetColumn("DESCR100").Enabled = False;
                     &grd_Content.GetColumn("EDIT").Visible = (%Page = %This.getPageName(Page.HRS_CE_REVIEW) And
                        Not &c_bReviewSubmitted);
                     
                     If Not &c_bIsFluidMode Then
                        &grd_Content.GetColumn("DELETE").Visible = False;
                     End-If;
                     /* for this type, use different page instruction than set earlier */
                  End-If;
                  
                  If All(&rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_ITEM_ID.Value) Then
                     &rs_Content_Items(&j).HRS_CE_LNK_WRK.DESCR100.Value = &rs_Content_Items(&j).JPM_CAT_ITEMS_I.JPM_DESCR90.Value;
                  Else
                     If All(&rs_Content_Items(&j).HRS_APPITM01_VW.HRS_CAT_ITEM_TXT.Value) Then
                        &rs_Content_Items(&j).HRS_CE_LNK_WRK.DESCR100.Value = MsgGetText(18178, 382, "Message not found.") | " " | &rs_Content_Items(&j).HRS_APPITM01_VW.HRS_CAT_ITEM_TXT.Value;
                     Else
                        &rs_Content_Items(&j).HRS_CE_LNK_WRK.DESCR100.Value = &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_ADHOC_DESCR.Value;
                     End-If;
                  End-If;
                  
                  /*When the primary description is blank set the value from Adhoc Description*/
                  If None(&rs_Content_Items(&j).HRS_CE_LNK_WRK.DESCR100.Value) And
                        All(&rs_Content_Items(&j).HRS_APPITM01_VW.JPM_ADHOC_DESCR.Value) Then
                     &rs_Content_Items(&j).HRS_CE_LNK_WRK.DESCR100.Value = &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_ADHOC_DESCR.Value;
                  End-If;
                  
                  /* set dynamic field prompts for JPM_RATING1 field */
                  If &FieldPrompts = Null Then
                     &FieldPrompts = create HCR_JPM_PKG:Profiles:BUS:FieldPrompts();
                  End-If;
                  
                  rem &FieldPrompts.DoFieldPrompts(&rs_Content_Items(&j).HRS_APPITM01_VW);
                  
                  If All(&str_DfltQual) And
                        &rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_ITEM_QUAL.Value <> &str_DfltQual Then
                     For &k = 1 To &rs_Content_Items(&j).HRS_APPITM01_VW.FieldCount
                        &rs_Content_Items(&j).HRS_APPITM01_VW.GetField(&k).Enabled = False;
                     End-For;
                  End-If;
                  rem Related display fields like school description should be populated correctly;
                  &Content_UI.DisableRelatedFields(&rs_Content_Items(&j).HRS_APPITM01_VW.JPM_CAT_TYPE.Value, &rs_Content_Items(&j).HRS_APPITM01_VW);
               Else
                  &rs_Content_Items(&j).Visible = False;
               End-If;
            Else
               /* No items for this content type */
               If &str_ApplAddItems = "Y" Then
                  /* show the empty grid area instead */
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_CONT_GPB.Visible = False;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible = True;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = False;
                  &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = True;
                  
                  If %This.isSectionRequired(&rs_JPMContent(&i).HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) Then
                     &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Label = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value | " " | MsgGetText(18178, 338, "Message not found.");
                     &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(&applicant.HRS_SITE_ID), "", " ", " ", " ", " ");
                  Else
                     &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Label = &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value;
                     &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CECONT_PT01"), String(&nbr_SiteId), Lower(&rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value), " ", " ", " ", " ");
                  End-If;
                  
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCONTENT.Value = &str_ReturnedText;
                  &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Label = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
                  &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.HoverText = MsgGetText(18178, 501, " ", &rs_JPMContent(&i).HRS_RES_SCTJ_VW.DESCR.Value);
                  &rs_Content_Items(&j).Visible = False;
               Else
                  /* do not show a grid */
                  &rs_JPMContent(&i).GetRowset(Scroll.HRS_APPITM01_VW).HideAllRows();
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_CONT_GPB.Visible = False;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible = False;
                  &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = False;
                  &rs_JPMContent(&i).HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = False;
               End-If;
            End-If;
            
            If %Page = %This.getPageName(Page.HRS_CE_REVIEW) And
                  &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible Then
               &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = False;
            End-If;
         End-For;
         
         &ARShow = CreateArrayRept(CreateArrayRept("", 2), 0);
         &ARLabel = CreateArrayRept(CreateArrayRept("", 2), 0);
         &ARProps = CreateArrayRept(CreateArrayRept(" ", 4), 0);
         
         &Content_UI.FormatGrid(&rs_Props, "HRS_APPITM01_VW", &grd_Content, False, &ARLabel, &ARShow, &ARProps);
         
         If &applicant.APP_PER_STATUS <> "E" Then
            /* do not display rating model to external applicant */
            &arrayIndex = &ARProps.Find("RATING_MODEL1");
            
            If &arrayIndex > 0 Then
               &ARProps.Replace(&arrayIndex, 1);
               &ARProps.Push(CreateArray("RATING_MODEL1", "N", "N", " "));
            End-If;
            
            &arrayIndex = &ARProps.Find("RATING_MODEL");
            
            If &arrayIndex > 0 Then
               &ARProps.Replace(&arrayIndex, 1);
               &ARProps.Push(CreateArray("RATING_MODEL", "N", "N", " "));
            End-If;
         End-If;
         
         &arrayIndex = &ARProps.Find("JPM_CAT_ITEM_QUAL");
         
         If &arrayIndex > 0 Then
            /* save the column label before removing the array entry */
            &lstr_gridcol_label = &ARProps [&arrayIndex][4];
            &ARProps.Replace(&arrayIndex, 1);
            
            If &applicant.APP_PER_STATUS = "E" Then
               /* disable the field for employees but make it visible */
               &ARProps.Push(CreateArray("JPM_CAT_ITEM_QUAL", "N", "Y", &lstr_gridcol_label));
            Else
               /* for external applicants disable and  make invisible */
               &ARProps.Push(CreateArray("JPM_CAT_ITEM_QUAL", "N", "N", &lstr_gridcol_label));
            End-If;
         End-If;
         
         If &ARShow.Len > 0 Then
            &grd_Content.ShowColumns(&ARShow);
         End-If;
         
         If &ARLabel.Len > 0 Then
            &grd_Content.LabelColumns(&ARLabel);
         End-If;
         
         If &ARProps.Len > 0 Then
            &grd_Content.SetProperties(&ARProps);
         End-If;
         
         /* make content fields display-only on Review/Submit page and in fluid */
         For &j = 1 To &rs_Content_Items.ActiveRowCount
            &recJPMContent = &rs_Content_Items(&j).HRS_APPITM01_VW;
            
            For &k = 1 To &recJPMContent.FieldCount
               &recJPMContent.GetField(&k).DisplayOnly = (%Page = %This.getPageName(Page.HRS_CE_REVIEW) Or
                  &c_bIsFluidMode And
                     &str_ApplAddItems = "Y");
            End-For;
         End-For;
      Else
         /* Content does not belong to the current page - make it invisible */
         &rs_JPMContent(&i).GetRowset(Scroll.HRS_APPITM01_VW).HideAllRows();
         &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_CONT_GPB.Visible = False;
         &rs_JPMContent(&i).HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible = False;
         &rs_JPMContent(&i).HRS_CE_LNK_WRK.HRS_ADD_CONTENT.Visible = False;
         &rs_JPMContent(&i).HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = False;
      End-If;
   End-For;
   
   &intLastVisibleSection = 0;
   
   For &i = &rs_JPMContent.ActiveRowCount To 1 Step - 1
      &rowJPMContent = &rs_JPMContent(&i);
      
      If &rowJPMContent.HRS_CE_WRK.HRS_CE_CONT_GPB.Visible Or
            &rowJPMContent.HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible Then
         &intLastVisibleSection = &i;
         Break;
      End-If;
   End-For;
   
   For &i = 1 To &rs_JPMContent.ActiveRowCount
      &rowJPMContent = &rs_JPMContent(&i);
      
      &str_ReturnedText = "";
      
      If &controller.applicantCanAddItems(&rowJPMContent.HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value) Then
         If &rowJPMContent.HRS_CE_WRK.HRS_CE_CONT_GPB.Visible Then
            &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SINST_30"), String(&nbr_SiteId), &rowJPMContent.HRS_RES_SCTJ_VW.DESCR.Value, " ", " ", " ", " ");
         Else
            If &rowJPMContent.HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible Then
               &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SINST_31"), String(&nbr_SiteId), &rowJPMContent.HRS_RES_SCTJ_VW.DESCR.Value, " ", " ", " ", " ");
            End-If;
         End-If;
         
         &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Value = RTrim(&str_ReturnedText);
         &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = (All(&str_ReturnedText) And
            %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
      Else
         If &rowJPMContent.HRS_CE_WRK.HRS_CE_CONT_GPB.Visible Then
            &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SINST_35"), String(&nbr_SiteId), &rowJPMContent.HRS_RES_SCTJ_VW.DESCR.Value, " ", " ", " ", " ");
            &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Value = RTrim(&str_ReturnedText);
            &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible = (All(&str_ReturnedText) And
               %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
         End-If;
      End-If;
      
      If &c_bIsFluidMode And
            &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Visible Then
         &rowJPMContent.HRS_CE_WRK.HRS_SEC_INFO_CONT.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &rowJPMContent.HRS_RES_SCTJ_VW.DESCR.Value;
      End-If;
      
      If Not &c_bIsFluidMode Then
         &rowJPMContent.HRS_CE_WRK.HRS_SPACE_SS.Visible = (&rowJPMContent.HRS_CE_WRK.HRS_CE_NOCNT_GPB.Visible And
            &i <> &intLastVisibleSection);
      End-If;
   End-For;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatJPMContent(&rs_JPMContent, &nSectionPgSeq);
   End-If;
end-method;

method formatPlacement
   /+ &rs_Placement as Rowset +/
   Local string &str_ReturnedText;
   Local number &nbr_SiteId;
   Local HRS_BO:BUS:BODefaults &obj_BODefaults;
   Local boolean &bReviewSubmit;
   
   <*&obj_BODefaults = create HRS_BO:BUS:BODefaults();
   HRS_CE_WRK.GRPB_G_PP.Visible = &obj_BODefaults.isFederal();*>
   
   &bReviewSubmit = (%Page = %This.getPageName(Page.HRS_CE_REVIEW));
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   HRS_CE_WRK.SEC_INFO_G_PRI_PL.Visible = (All(HRS_CE_WRK.SEC_INFO_G_PRI_PL.Value) And
      Not &bReviewSubmit);
   
   If &c_bIsFluidMode And
         HRS_CE_WRK.SEC_INFO_G_PRI_PL.Visible Then
      HRS_CE_WRK.SEC_INFO_G_PRI_PL.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_GRPB_17"), String(&nbr_SiteId));
   End-If;
   
   If Not &c_bIsFluidMode Then
      GetGrid(Page.HRS_CE_REVIEW, "HRS_G_PRI_PL").GetColumn("DELETE").Visible = ( Not &bReviewSubmit);
   End-If;
   HRS_CE_LNK_WRK.ADD_PRI_PLCMT.Visible = ( Not &bReviewSubmit);
   
   HRS_CE_WRK.HRS_REQ_PRI.Visible = False;
   HRS_CE_WRK.HRS_REQ_PRI.Enabled = False;
   
   If &rs_Placement.ActiveRowCount >= 1 And
         All(&rs_Placement.GetRow(1).HRS_G_PRI_PL.GVT_PRIO_PLCMNT_CD.Value) Then
      HRS_CE_WRK.HRS_PRI_PLCMT_GPB.Visible = True;
      HRS_CE_WRK.HRS_NO_PRIPLMT_GPB.Visible = False;
   Else
      HRS_CE_WRK.HRS_PRI_PLCMT_GPB.Visible = False;
      HRS_CE_WRK.HRS_NO_PRIPLMT_GPB.Visible = True;
      HRS_CE_WRK.HRS_NO_PRIPLMT_GPB.Label = MsgGetText(18178, 628, "Message not found.");
      
      If %This.isSectionRequired("PRI") Then
         HRS_CE_WRK.HRS_NO_PRIPLMT_GPB.Label = HRS_CE_WRK.HRS_NO_PRIPLMT_GPB.Label | " " | MsgGetText(18178, 338, "Message not found.");
         &str_ReturnedText = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_SECTIONREQ"), String(&applicant.HRS_SITE_ID), "", " ", " ", " ", " ");
      Else
         &str_ReturnedText = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CEPLCMT_PT01"), String(&nbr_SiteId));
      End-If;
      
      HRS_CE_WRK.HRS_NO_PRIPLMT_MSG.Value = &str_ReturnedText;
   End-If;
   
   /* 9.2.19 It is possible that the customer is on Fluid, but has not taken the */
   /* federal fluid page yet, so check for it's existence before formatting it.  */
   If &c_bIsFluidMode And
         CheckPageExists("HRS_CE_G_S_PP_SBF") Then
      &objFluidPageLayout.formatPlacement();
   End-If;
   
end-method;


method formatFederal
   Local Row &rwProfile;
   
   &rwProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(CurrentRowNumber());
   /* If not a previous Fed EE hide Pay Plan and Grade */
   If &rwProfile.HRS_APP_PROFILE.GVT_PREV_FED_EMPL.Value = "Y" Or
         &rwProfile.HRS_APP_PROFILE.GVT_PREV_AGCY_EMPL.Value = "Y" Or
         &rwProfile.HRS_APP_PROFILE.GVT_CURR_FED_EMPL.Value = "Y" Or
         &rwProfile.HRS_APP_PROFILE.GVT_CURR_AGCY_EMPL.Value = "Y" Then
      &rwProfile.HRS_APP_PROFILE.GVT_HIGH_PAY_PLAN.Visible = True;
      &rwProfile.HRS_APP_PROFILE.GVT_HIGH_GRADE.Visible = True;
      &rwProfile.HRS_APP_PROFILE.GVT_PAY_PLAN.Visible = True;
      &rwProfile.HRS_APP_PROFILE.GRADE.Visible = True;
      &rwProfile.HRS_APP_PROFILE.GVT_TENURE.Visible = True;
   Else
      &rwProfile.HRS_APP_PROFILE.GVT_HIGH_PAY_PLAN.Visible = False;
      &rwProfile.HRS_APP_PROFILE.GVT_HIGH_GRADE.Visible = False;
      &rwProfile.HRS_APP_PROFILE.GVT_PAY_PLAN.Visible = False;
      &rwProfile.HRS_APP_PROFILE.GRADE.Visible = False;
      &rwProfile.HRS_APP_PROFILE.GVT_TENURE.Visible = False;
   End-If;
   
   /* 9.2.19 It is possible that the customer is on Fluid, but has not taken the */
   /* federal fluid page yet, so check for it's existence before formatting it.  */
   If &c_bIsFluidMode And
         CheckPageExists("HRS_CE_G_E_PRF_SBF") Then
      &objFluidPageLayout.formatFederal();
   End-If;
   
end-method;


method populateExistingResume
   /+ &rowUseExisting as Row +/
   Local Rowset &rsExistingResumes;
   Local number &numCount;
   
   &rsExistingResumes = CreateRowset(Record.HRS_RES_PID_VW2);
   &numCount = &rsExistingResumes.Fill("where HRS_PERSON_ID = :1", GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value);
   
   &rowUseExisting.Visible = (&numCount > 0);
end-method;

method populateExistingResumeRowset
   /+ &nbr_ResumeId as Number +/
   
   Local Rowset &rs_ExistingRes;
   &rs_ExistingRes = GetLevel0()(1).GetRowset(Scroll.HRS_RESM_APP_VW);
   &rs_ExistingRes.Flush();
   &rs_ExistingRes.Select(Record.HRS_APP_RES, "WHERE HRS_RESUME_ID=:1", &nbr_ResumeId);
end-method;

method formatResume
   Local Rowset &rsResume, &rsResumeOptions, &rsCoverLetterOptions;
   Local Row &rowResume;
   Local Record &recCoverLetter;
   Local Field &fldNoResume;
   Local number &numResumeID;
   Local integer &i;
   Local boolean &bResumeSet, &bAnyResumeOption, &bResumeRequired, &bCoverLetterSet, &bAnyCoverLetterOption, &bCoverLetterRequired;
   Local string &access = GetUserOption("PPTL", "ACCESS");
   Local string &strRowLabel;
   Local integer &iRow;
   Local array of string &arGridRowHeader;
   Local Grid &gResume;
   
   &rsResume = GetLevel0()(1).GetRowset(Scroll.HRS_RESM_APP_VW);
   
   &rowResume = &rsResume(1);
   &rowResume.HRS_RESM_APP_VW.HRS_RESUME_TITLE.ShowRequiredFieldCue = True;
   
   &numResumeID = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).HRS_APP_PROFILE.HRS_RESUME_ID.Value;
   
   &bResumeSet = (All(&numResumeID) Or
      All(&rowResume.HRS_RESM_APP_VW.ATTACHSYSFILENAME.Value) Or
      All(&rowResume.HRS_RESM_APP_VW.RESUME_TEXT.Value));
   
   If Not &bResumeSet Then
      &rowResume = Null;
   Else
      If Not &c_bIsFluidMode Then
         If &access = "A" Then
            If %Page = Page.HRS_RESUME_OPTION Then
               &strRowLabel = &rsResume.GetRow(1).HRS_CE_WRK.HRS_RES_HDR.GetLongLabel("HRS_RES_HDR");
               #If #ToolsRel>="8.54" #Then
                  &arGridRowHeader = CreateArrayRept("", 0);
                  &gResume = GetGrid(%Page, "HRS_RESM_APP_VW");
                  &arGridRowHeader.Push("RESLABEL");
                  &gResume.SetRowHeader(&arGridRowHeader);
               #End-If;
            Else
               If %Page = Page.HRS_CE_REVIEW Then
                  &strRowLabel = &rsResume.GetRow(1).HRS_REVIEW_WRK.HRS_ROW_HDR.GetLongLabel("HRS_ROW_HDR");
                  #If #ToolsRel>="8.54" #Then
                     &arGridRowHeader = CreateArrayRept("", 0);
                     &gResume = GetGrid(%Page, "HRS_RESM_APP_VW");
                     &arGridRowHeader.Push("ROWLABEL");
                     &gResume.SetRowHeader(&arGridRowHeader);
                  #End-If;
               End-If;
            End-If;
         End-If;
         If %Page = Page.HRS_RESUME_OPTION Then
            For &iRow = 1 To &rsResume.ActiveRowCount
               If &access = "A" Then
                  &rsResume.GetRow(&iRow).GetRecord(Record.HRS_CE_WRK).GetField(Field.HRS_RES_HDR).Value = &strRowLabel | " " | String(&iRow);
               Else
                  &rsResume.GetRow(&iRow).GetRecord(Record.HRS_CE_WRK).GetField(Field.HRS_RES_HDR).Visible = False;
               End-If;
            End-For;
         Else
            If %Page = Page.HRS_CE_REVIEW Then
               For &iRow = 1 To &rsResume.ActiveRowCount
                  If &access = "A" Then
                     &rsResume.GetRow(&iRow).GetRecord(Record.HRS_REVIEW_WRK).GetField(Field.HRS_ROW_HDR).Value = &strRowLabel | " " | String(&iRow);
                  Else
                     &rsResume.GetRow(&iRow).GetRecord(Record.HRS_REVIEW_WRK).GetField(Field.HRS_ROW_HDR).Visible = False;
                  End-If;
               End-For;
            End-If;
         End-If;
      End-If;
   End-If;
   
   &rsResumeOptions = GetLevel0()(1).GetRowset(Scroll.HRS_RES_COLL_VW);
   
   &bAnyResumeOption = %This.hasResumeOptions();
   &bResumeRequired = %This.isResumeRequired();
   
   If &bAnyResumeOption Then
      If &c_bIsFluidMode Then
         HRS_CE_WRK.HRS_CE_RES_OPT_GPB.Label = &obj_c_myCatalog.GetCandTextSimple("HRAM_FL_GRPB_14", String(&applicant.HRS_SITE_ID));
      Else
         HRS_CE_WRK.HRS_CE_RES_OPT_GPB.Label = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_GRPB_14", String(&applicant.HRS_SITE_ID));
      End-If;
      
      If &bResumeRequired And
            %Page <> %This.getPageName(Page.HRS_CE_REVIEW) Then
         HRS_CE_WRK.HRS_CE_RES_OPT_GPB.Label = HRS_CE_WRK.HRS_CE_RES_OPT_GPB.Label | " " | MsgGetText(18178, 338, "Message not found.");
      End-If;
   End-If;
   
   HRS_CE_WRK.GRPB_RES_COLLECT.Visible = ( Not &bResumeSet And
      &bAnyResumeOption);
   HRS_CE_WRK.HRS_CURR_RES_GB.Visible = (&bResumeSet And
      &bAnyResumeOption);
   &rsResume.ShowAllRows();
   
   If %Component = Component.HRS_REFER Or
         %Component = Component.HRS_REFER_FL Then
      HRS_CE_WRK.HRS_RES_OPT_GB.Visible = ( Not &bResumeSet);
   End-If;
   
   If &bResumeSet Then
      If All(&rowResume.HRS_RESM_APP_VW.ATTACHSYSFILENAME.Value) Then /* attachment */
         &rowResume.HRS_CE_LNK_WRK.ATTACHVIEW.Label = &rowResume.HRS_RESM_APP_VW.ATTACHUSERFILE.Value;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("ATTACHVIEW").Visible = True;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("ATTACHVIEW").Label = MsgGetText(18178, 354, "Message not found.");
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_EDIT").Visible = True;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_EDIT").Label = MsgGetText(18178, 212, "Message not found.");
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_LINK").Visible = False;
      Else /* copy & paste */
         &rowResume.HRS_CE_LNK_WRK.HRS_RESUME_LINK.Label = &rowResume.HRS_RESM_APP_VW.HRS_RESUME_TITLE.Value;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("ATTACHVIEW").Visible = False;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_EDIT").Visible = False;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_LINK").Visible = True;
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("TITLE_LINK").Label = MsgGetText(18178, 354, "Message not found.");
      End-If;
      
      If %Page <> Page.HRS_CE_REVIEW Then
         If &c_recSite = Null Then
            &c_recSite = CreateRecord(Record.HRS_SITE_ID);
            &c_recSite.HRS_SITE_ID.Value = &applicant.HRS_SITE_ID;
            &c_recSite.SelectByKey();
         End-If;
         
         GetGrid(%Page, "HRS_RESM_APP_VW").GetColumn("LANG_CD").Visible = (&c_recSite.HRS_SHO_RES_LANG.Value = "Y");
      End-If;
   End-If;
   
   If %Component = Component.HRS_CE Or
         &c_bIsFluidMode And
            %Component <> Component.HRS_REFER_FL Then
      &rsCoverLetterOptions = GetLevel0()(1).GetRowset(Scroll.HRS_COV_COLL_VW);
      
      &bAnyCoverLetterOption = %This.hasCoverLetterOptions();
      &bCoverLetterRequired = %This.isCoverLetterRequired();
      
      If &bAnyCoverLetterOption Then
         If &c_bIsFluidMode Then
            HRS_CE_WRK.HRS_COV_OPT_GB.Label = &obj_c_myCatalog.GetCandTextSimple("HRAM_FL_GRPB_32", String(&applicant.HRS_SITE_ID));
         Else
            HRS_CE_WRK.HRS_COV_OPT_GB.Label = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_GRPB_32", String(&applicant.HRS_SITE_ID));
         End-If;
         
         If &bCoverLetterRequired And
               %Page <> %This.getPageName(Page.HRS_CE_REVIEW) Then
            HRS_CE_WRK.HRS_COV_OPT_GB.Label = HRS_CE_WRK.HRS_COV_OPT_GB.Label | " " | MsgGetText(18178, 338, "Message not found.");
         End-If;
         
         &recCoverLetter = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_COV_SS_VW)(1).HRS_COV_SS_VW;
         &recCoverLetter.DESCR.ShowRequiredFieldCue = True;
      Else
         If &c_bIsFluidMode Then
            HRS_CE_WRK.HRS_COV_OPT_GB.Visible = False;
         End-If;
      End-If;
      
      &bCoverLetterSet = %This.hasCoverLetter();
      
      HRS_CE_WRK.HRS_COV_COLL_GB.Visible = ( Not &bCoverLetterSet And
         &bAnyCoverLetterOption);
      HRS_CE_WRK.HRS_COV_CURR_GB.Visible = (&bCoverLetterSet And
         &bAnyCoverLetterOption);
      
      If &bCoverLetterSet Then
         &recCoverLetter.ATTACHUSERFILE.Label = &recCoverLetter.ATTACHUSERFILE.Value;
         GetGrid(%Page, "HRS_COV_SS_VW").GetColumn("ATTACHUSERFILE").Label = MsgGetText(18178, 667, "Message not found.");
         
         If Not &c_bIsFluidMode Then
            Local Rowset &rsCoverLtr = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_COV_SS_VW);
            If %Page = Page.HRS_RESUME_OPTION Then
               If &access = "A" Then
                  &strRowLabel = &rsCoverLtr.GetRow(1).GetRecord(Record.HRS_CE_WRK).GetField(Field.HRS_RES_HDR).GetLongLabel("HRS_COV_HDR");
                  #If #ToolsRel>="8.54" #Then
                     &arGridRowHeader = CreateArrayRept("", 0);
                     &arGridRowHeader.Push("COVLABEL");
                     GetGrid(%Page, "HRS_COV_SS_VW").SetRowHeader(&arGridRowHeader);
                  #End-If;
               End-If;
               For &iRow = 1 To &rsCoverLtr.ActiveRowCount
                  If &access = "A" Then
                     &rsCoverLtr.GetRow(&iRow).GetRecord(Record.HRS_CE_WRK).GetField(Field.HRS_RES_HDR).Value = &strRowLabel | " " | String(&iRow);
                  Else
                     &rsCoverLtr.GetRow(&iRow).GetRecord(Record.HRS_CE_WRK).GetField(Field.HRS_RES_HDR).Visible = False;
                  End-If;
                  
               End-For;
            Else
               If %Page = Page.HRS_CE_REVIEW Then
                  If &access = "A" Then
                     &strRowLabel = &rsCoverLtr.GetRow(1).GetRecord(Record.HRS_REVIEW_WRK).GetField(Field.HRS_ROW_HDR).GetLongLabel("HRS_ROW_HDR_2");
                     #If #ToolsRel>="8.54" #Then
                        &arGridRowHeader = CreateArrayRept("", 0);
                        &arGridRowHeader.Push("ROWLABEL1");
                        GetGrid(%Page, "HRS_COV_SS_VW").SetRowHeader(&arGridRowHeader);
                     #End-If;
                  End-If;
                  
                  For &iRow = 1 To &rsCoverLtr.ActiveRowCount
                     If &access = "A" Then
                        &rsCoverLtr.GetRow(&iRow).GetRecord(Record.HRS_REVIEW_WRK).GetField(Field.HRS_ROW_HDR).Value = &strRowLabel | " " | String(&iRow);
                     Else
                        &rsCoverLtr.GetRow(&iRow).GetRecord(Record.HRS_REVIEW_WRK).GetField(Field.HRS_ROW_HDR).Visible = False;
                     End-If;
                     
                  End-For;
               End-If;
            End-If;
         End-If;
      End-If;
   End-If;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatResume();
   End-If;
end-method;

method loadJobs
   
   Local Rowset &rs_JobsApplied, &rs_JobFamily, &rs_tempJobsApplied;
   Local string &str_ComboEdit, &str_JobFams;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UTIL:FamilyCombo &families;
   Local number &nbr_TotalFAM, &i, &nbr_tempcount, &j, &insertRow, &targetRow;
   
   &c_bol_isJobsLoaded = True;
   
   &rs_JobsApplied = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   If All(GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value) Then
      &rs_JobsApplied.Select(Record.HRS_RCMNT_I, "WHERE HRS_PERSON_ID=:1 AND HRS_PROFILE_SEQ=:2", HRS_APPLICANT.HRS_PERSON_ID.Value, GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value);
   End-If;
   
   &rs_JobFamily = CreateRowset(Record.HRS_APP_JOBFAM);
   &nbr_TotalFAM = &rs_JobFamily.Fill("WHERE HRS_PERSON_ID=:1 AND HRS_PROFILE_SEQ=:2", HRS_APPLICANT.HRS_PERSON_ID.Value, GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value);
   
   For &i = 1 To &nbr_TotalFAM
      If All(&str_JobFams) Then
         &str_JobFams = &str_JobFams | "," | &rs_JobFamily.GetRow(&i).HRS_APP_JOBFAM.JOB_FAMILY.Value;
      Else
         &str_JobFams = &rs_JobFamily.GetRow(&i).HRS_APP_JOBFAM.JOB_FAMILY.Value;
      End-If;
   End-For;
   
   &str_ComboEdit = %Request.GetParameter("HRS_CE_WRK_HRS_COMBO_VAL1");
   If None(&str_ComboEdit) Then
      &str_ComboEdit = HRS_CE_WRK.HRS_COMBO_VAL1.Value;
   End-If;
   
   If All(&str_ComboEdit) Then
      &str_ComboEdit = &str_ComboEdit | "," | &str_JobFams;
   Else
      &str_ComboEdit = &str_JobFams;
   End-If;
   &families = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UTIL:FamilyCombo(Record.HRS_CE_WRK, Field.HRS_SCH_COMBO1, Record.HRS_CE_WRK, "HRS_COMBO_VAL1", &str_ComboEdit, 3);
   HRS_CE_WRK.HRS_SCH_COMBO1 = &families.getHTML();
   HRS_CE_WRK.HRS_COMBO_VAL1.Value = &str_ComboEdit;
   
end-method;

method loadResume
   Local Rowset &rsResume, &rsCoverLetter;
   
   &rsResume = GetLevel0()(1).GetRowset(Scroll.HRS_RESM_APP_VW);
   &rsResume.Flush();
   &rsResume.Select(Record.HRS_RES_PROF_VW, "where HRS_PERSON_ID = :1 and HRS_PROFILE_SEQ = :2 and HRS_RESUME_ID = :3", HRS_APPLICANT.HRS_PERSON_ID.Value, GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value, GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_RESUME_ID.Value);
   
   &rsCoverLetter = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_COV_SS_VW);
   &rsCoverLetter.Flush();
   &rsCoverLetter.Select(Record.HRS_COV_SS_VW, "where HRS_PERSON_ID = :1 and HRS_PROFILE_SEQ = :2", HRS_APPLICANT.HRS_PERSON_ID.Value, GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value);
   
   &c_bol_isResumeLoaded = True;
end-method;

method hideunhideNextPrevious
   
   <*If &thisIndex < &asection.Len Then
      HRS_CE_LNK_WRK.HRS_NEXT_PB.Enabled = True;
      HRS_CE_LNK_WRK.HRS_NEXT_PB.LabelImage = Image.PS_SCROLL_RIGHT_ICN;
   Else
      HRS_CE_LNK_WRK.HRS_NEXT_PB.Enabled = False;
      HRS_CE_LNK_WRK.HRS_NEXT_PB.LabelImage = Image.PS_SCROLL_RIGHT_ICN_D;
   End-If;

   If &thisIndex > 1 Then
      HRS_CE_LNK_WRK.HRS_PREVIOUS_PB.Enabled = True;
      HRS_CE_LNK_WRK.HRS_PREVIOUS_PB.LabelImage = Image.PS_SCROLL_LEFT_ICN;
   Else
      HRS_CE_LNK_WRK.HRS_PREVIOUS_PB.Enabled = False;
      HRS_CE_LNK_WRK.HRS_PREVIOUS_PB.LabelImage = Image.PS_SCROLL_LEFT_ICN_D;
   End-If;*>
end-method;

method populateCntctInfo
   
end-method;

method isAddressPresent
   /+ &nbr_PersonId as Number +/
   /+ Returns Boolean +/
   
   Local Rowset &rs_PersonAdd, &rs_PersonName;
   Local number &nbr_RetCount, &nbr_NameCount;
   &rs_PersonAdd = CreateRowset(Record.HRS_APP_ADDRESS);
   &rs_PersonName = CreateRowset(Record.HRS_APP_NAMES);
   &nbr_RetCount = &rs_PersonAdd.Fill("WHERE HRS_PERSON_ID=:1", &nbr_PersonId);
   &nbr_NameCount = &rs_PersonName.Fill("WHERE HRS_PERSON_ID=:1", &nbr_PersonId);
   If &nbr_RetCount >= 1 And
         &nbr_NameCount >= 1 Then
      Return True;
   Else
      Return False;
   End-If;
end-method;

method displayProfile
   /+ &nbr_PersonId as Number +/
   
   Local Rowset &rs_applicant = CreateRowset(Record.HRS_APPLICANT);
   Local Rowset &names = CreateRowset(Record.HRS_APP_NAMES);
   Local Rowset &level0 = GetLevel0();
   Local Rowset &rs_AppAddres;
   Local Field &fld1;
   Local Rowset &rs;
   Local string &sqltext, &adr_type, &str_Message, &str_address;
   Local number &i;
   Local SQL &addr_sql;
   Local HRS_BO:BUS:PersonProfile &pProfile;
   Local Rowset &tempPersonAddress = CreateRowset(Record.HRS_APPADDR_WRK); /* Resln. 806669 */
   Local Rowset &tempPersonNames = CreateRowset(Record.HRS_APP_NAMES);
   Local number &rowCount;
   Local number &tempNumber;
   Local EO:CA:Address &obj_LocAddress;
   
   &addr_sql = GetSQL(SQL.HRS_CE_ADDR_TYP);
   &sqltext = &addr_sql.Value;
   SQLExec(&sqltext, &adr_type);
   
   If %Menu = MenuName.HRS_HRAM_EMP Then
      &pProfile = create HRS_BO:BUS:PersonProfile();
      &pProfile.setEmplId(%EmployeeId);
      
      &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
      /* Begin Resln. 806669: Selecting the address in the current EFFDT row. */
      &tempPersonAddress = &pProfile.getPersonAddress_v1(&tempPersonAddress);
      
      If &tempPersonAddress <> Null Then
         For &rowCount = &tempPersonAddress.ActiveRowCount To 1 Step - 1
            If &tempPersonAddress.GetRow(&rowCount).GetRecord(Record.HRS_APPADDR_WRK).GetField(Field.ADDRESS_TYPE).Value = "HOME" And
                  &tempPersonAddress.GetRow(&rowCount).GetRecord(Record.HRS_APPADDR_WRK).GetField(Field.EFFDT).Value <= %Date And
                  &tempPersonAddress.GetRow(&rowCount).GetRecord(Record.HRS_APPADDR_WRK).GetField(Field.EFF_STATUS).Value = "A" Then
               
               &tempPersonAddress.GetRow(&rowCount).GetRecord(Record.HRS_APPADDR_WRK).CopyFieldsTo(&rs_AppAddres(1).HRS_APP_ADDRESS);
            End-If;
            /* End Resln. 806669 */
            
         End-For;
      End-If;
      
      &tempPersonNames = &pProfile.getPersonName(&tempPersonNames);
      
      If &tempPersonNames <> Null Then
         For &rowCount = 1 To &tempPersonNames.ActiveRowCount
            If &tempPersonNames.GetRow(&rowCount).GetRecord(Record.HRS_APP_NAMES).GetField(Field.NAME_TYPE).Value = "PRI" Then
               &tempPersonNames.GetRow(&rowCount).GetRecord(Record.HRS_APP_NAMES).CopyFieldsTo(&names(1).HRS_APP_NAMES);
            End-If;
         End-For;
      End-If;
      
      HRS_APP_SBP_DRV.HRS_PERSON_ID.Value = &nbr_PersonId;
      HRS_APP_SBP_DRV.NAME_DISPLAY.Value = &names(1).HRS_APP_NAMES.NAME_DISPLAY.Value;
      
      
      &obj_LocAddress = create EO:CA:Address(&rs_AppAddres(1).HRS_APP_ADDRESS, Null, Null);
      &str_address = &obj_LocAddress.AddressDisplay();
      
      HRS_APP_SBP_DRV.ADDRESSLONG.Value = &str_address;
   Else
      &names.Fill("WHERE FILL.HRS_PERSON_ID=:1 AND FILL.NAME_TYPE=:2", &nbr_PersonId, "PRI");
      
      &rs_AppAddres = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS);
      HRS_APP_SBP_DRV.HRS_PERSON_ID.Value = &nbr_PersonId;
      HRS_APP_SBP_DRV.NAME_DISPLAY.Value = &names(1).HRS_APP_NAMES.NAME_DISPLAY.Value;
      &rs_AppAddres.Select(Record.HRS_APP_ADDRESS, "WHERE HRS_PERSON_ID=:1 AND ADDRESS_TYPE=:2", &nbr_PersonId, &adr_type);
      
      HRS_APP_SBP_DRV.ADDRESSLONG.Value = &level0(1).GetRowset(Scroll.HRS_APP_ADDRESS)(&rs_AppAddres.ActiveRowCount).DERIVED_ADDR.ADDRESSLONG.Value;
   End-If;
   
end-method;

method setQuestionairre
   /+ &aJobOpenings as Array of Number +/
   Local array of string &aString;
   Local array of number &anumEligibleJobs, &anumIneligibleJobs;
   Local boolean &exists;
   Local number &j, &k;
   Local number &count;
   Local number &inscount;
   Local number &lev1count;
   Local Rowset &rsAppAnswers;
   Local Rowset &rsReqQuestions;
   Local Rowset &rsReqAnswers;
   Local Rowset &rsAppProfile;
   Local Rowset &rsPrescreeningQuestions;
   Local string &jobNumberList, &eligibleJobNumberList, &ineligibleJobNumberList, &queryOne, &queryThree;
   Local number &hrsPersonId;
   Local number &hrsProfileSeq;
   Local string &mysql;
   Local string &currentQstns;
   Local number &nbr_Random, &nbr_QstnId, &nbr_JOId, &nbr_QstnOrder;
   Local integer &intRowCount, &intCorrectAnswerCount, &intQuestionNumber;
   
   &rsAppProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE);
   &hrsPersonId = GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value;
   &hrsProfileSeq = &rsAppProfile(CurrentRowNumber()).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
   
   /* HRS_APP_ANSWER holds the applicants answers to a particular question */
   
   /* See if questions have been answered by the applicant */
   &rsAppAnswers = &rsAppProfile(CurrentRowNumber()).GetRowset(Scroll.HRS_APP_ANSWER);
   
   For &j = 1 To &rsAppAnswers.ActiveRowCount
      If All(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value) Then
         If Find(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value, &currentQstns) = 0 Then
            /* Concatenate if question has not been answered by the applicant */
            If &j > 1 Then
               &currentQstns = &currentQstns | ",";
            End-If;
            
            &currentQstns = &currentQstns | String(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value);
         End-If;
      End-If;
   End-For;
   
   &rsReqQuestions = GetLevel0()(1).GetRowset(Scroll.HRS_JO_QST_NO_I); /*NON OPEN ENDED */
   
   /* Concantenate the selected JO into &jobNumberList */
   &aString = CreateArrayRept("", 0);
   
   &anumEligibleJobs = &controller.getEligibleJobs(&aJobOpenings);
   &anumIneligibleJobs = &controller.getIneligibleJobs(&aJobOpenings);
   
   For &j = 1 To &anumEligibleJobs.Len
      If &anumEligibleJobs [&j] <> 0 Then
         &eligibleJobNumberList = &eligibleJobNumberList | &anumEligibleJobs [&j];
         
         If &j <> &anumEligibleJobs.Len Then
            &eligibleJobNumberList = &eligibleJobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   For &j = 1 To &anumIneligibleJobs.Len
      If &anumIneligibleJobs [&j] <> 0 Then
         &ineligibleJobNumberList = &ineligibleJobNumberList | &anumIneligibleJobs [&j];
         
         If &j <> &anumIneligibleJobs.Len Then
            &ineligibleJobNumberList = &ineligibleJobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   For &j = 1 To &aJobOpenings.Len
      If &aJobOpenings [&j] <> 0 Then
         &jobNumberList = &jobNumberList | &aJobOpenings [&j];
         
         If &j <> &aJobOpenings.Len Then
            &jobNumberList = &jobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   &currentQstns = LTrim(&currentQstns, ","); /* FF 760212 */
   
   If None(&eligibleJobNumberList) Then
      &eligibleJobNumberList = &jobNumberList;
   End-If;
   
   If All(&jobNumberList) Then
      If All(&currentQstns) Then
         /* If there is concatenated questions */
         /* TBG "IN" STATEMENT DOESN'T WORK WITH DEFINITION HRS_JO_QST_NO_I, so changed record to view HRS_JO_QST_OO_I and added non-open ended where clause */
         /* 11641012 */
         rem &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (" | &currentQstns | ")"); /* 660361 */
         If All(&ineligibleJobNumberList) Then
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_1, "where (HRS_JOB_OPENING_ID in (" | &eligibleJobNumberList | ") or HRS_QSTN_ID in (select HRS_QSTN_ID from PS_HRS_JO_PRSCR_VW where HRS_JOB_OPENING_ID in (" | &ineligibleJobNumberList | "))) and HRS_QSTN_ID not in (" | &currentQstns | ")");
         Else
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_1, "where HRS_JOB_OPENING_ID in (" | &jobNumberList | ") and HRS_QSTN_ID not in (" | &currentQstns | ")");
         End-If;
         
         Local number &r, &t;
         Local boolean &found;
         Local Rowset &rsqstn = CreateRowset(Record.HRS_JO_QSTN);
         &rsqstn.Fill("where HRS_JOB_OPENING_ID IN (" | &jobNumberList | ")");
         
         For &r = 1 To &rsqstn.ActiveRowCount
            &found = False;
            
            For &t = 1 To &rsAppAnswers.ActiveRowCount
               If &rsAppAnswers(&t).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value = &rsqstn(&r).HRS_JO_QSTN.HRS_JOB_OPENING_ID.Value And
                     &rsAppAnswers(&t).HRS_APP_ANSWER.HRS_QSTN_ID.Value = &rsqstn(&r).HRS_JO_QSTN.HRS_QSTN_ID.Value Then
                  &found = True;
               End-If;
            End-For;
            
            If Not &found And
                  &anumEligibleJobs.Find(&rsqstn(&r).HRS_JO_QSTN.HRS_JOB_OPENING_ID.Value) > 0 Then
               &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_1, "WHERE HRS_JOB_OPENING_ID =" | &rsqstn(&r).HRS_JO_QSTN.HRS_JOB_OPENING_ID.Value | " AND HRS_QSTN_ID =" | &rsqstn(&r).HRS_JO_QSTN.HRS_QSTN_ID.Value);
            End-If;
         End-For;
      Else
         /* If there is no concatenated questions */
         rem &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_ANSWER A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &hrsPersonId, &hrsProfileSeq);
         If All(&ineligibleJobNumberList) Then
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_1, "WHERE (HRS_JOB_OPENING_ID IN (" | &eligibleJobNumberList | ") or HRS_QSTN_ID in (select HRS_QSTN_ID from PS_HRS_JO_PRSCR_VW where HRS_JOB_OPENING_ID in (" | &ineligibleJobNumberList | "))) AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_ANSWER A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &hrsPersonId, &hrsProfileSeq);
         Else
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_1, "WHERE HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_ANSWER A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &hrsPersonId, &hrsProfileSeq);
         End-If;
      End-If;
      
      &exists = False;
      &inscount = 0;
      
      For &count = 1 To &rsAppAnswers.ActiveRowCount
         For &lev1count = 1 To &rsReqQuestions.ActiveRowCount
            If &rsReqQuestions(&lev1count).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value Then
               &exists = True;
            End-If;
         End-For;
         
         If Not &exists Then
            &inscount = &inscount + 1;
            
            If &inscount = 1 And
                  &rsReqQuestions(1).IsNew Then
               /* FF 760212 */
               If All(&rsReqQuestions(1).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value) Then
                  &rsReqQuestions.InsertRow(&inscount - 1);
               End-If;
               /* FF 760212 */
            Else
               &rsReqQuestions.InsertRow(&inscount - 1);
            End-If;
            
            /* To use for re-arranging questions based on questions order number */
            &nbr_QstnId = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value;
            &nbr_JOId = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value;
            &nbr_QstnOrder = %This.getQuestionOrderNbr(&nbr_JOId, &nbr_QstnId);
            &rsReqQuestions(&inscount).DERIVED_ER.ROW_NUM.Value = &nbr_QstnOrder;
            &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value;
            &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_JOB_OPENING_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value;
            
            /* HRS_CE_JO_ANS_I holds the questions and possible answers associated with a particular job opening*/
            &rsReqAnswers = &rsReqQuestions(&inscount).GetRowset(Scroll.HRS_CE_JO_ANS_I);
            
            /* HRS_QSTN_ANS_I holds the answers for a question and which ones are correct or not ~~ */
            /* &rsReqAnswers.Flush();  FF 760212 */
            rem &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
            &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, " where HRS_QSTN_ID = :1 order by HRS_ANS_ORDER_NUM, HRS_ANSWER_ID ", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
            
            <*&intCorrectAnswerCount = 0;
            
            For &k = 1 To &rsReqAnswers.ActiveRowCount
               If (&rsReqAnswers(&k).HRS_CE_JO_ANS_I.CORRECT_ANSWER.Value = "Y") Then
                  &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
               End-If;
            End-For;*>
            
            For &k = 1 To &rsReqAnswers.ActiveRowCount
               Local number &l;
               
               For &l = 1 To &rsAppAnswers.ActiveRowCount
                  If &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_QSTN_ID.Value = &rsAppAnswers(&l).HRS_APP_ANSWER.HRS_QSTN_ID.Value And
                        &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_ANSWER_ID.Value = &rsAppAnswers(&l).HRS_APP_ANSWER.HRS_ANSWER_ID.Value Then
                     &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y";
                     
                     If &c_bIsFluidMode Then
                        &rsReqAnswers(&k).Selected = True;
                     End-If;
                  End-If;
               End-For;
               
               &rsReqAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = "N";
               
               <*If &intCorrectAnswerCount = 1 Then
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
               Else
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
               End-If;*>
            End-For;
         Else /* &exists */
            &exists = False;
         End-If;
      End-For; /* &count = 1 */
   End-If; /* All(&jobNumberList) */
   
   /* FF 760212 */
   Local number &mnbr;
   
   For &mnbr = &rsReqQuestions.ActiveRowCount To 1 Step - 1
      If None(&rsReqQuestions(&mnbr).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value) Then
         &rsReqQuestions.DeleteRow(&mnbr);
      End-If;
   End-For;
   /* FF 760212 */
   
   If All(&jobNumberList) Then
      &rsPrescreeningQuestions = CreateRowset(Record.HRS_JO_PRSCR_VW);
      
      For &j = 1 To &rsReqQuestions.ActiveRowCount
         &intRowCount = &rsPrescreeningQuestions.Fill("where HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") and HRS_QSTN_ID = :1", &rsReqQuestions(&j).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
         
         If &intRowCount > 0 Then
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y";
         Else
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "N";
         End-If;
      End-For;
      
      For &j = &rsReqQuestions.ActiveRowCount To 1 Step - 1
         If &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y" Then
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible = False;
            rem &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I).HideAllRows();
         Else
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Visible = (GetUserOption("PPTL", "ACCESS") = "A");
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible = True;
            rem &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I).ShowAllRows();
         End-If;
      End-For;
   End-If;
   
   /* Let's re-arrange the questions by random number if Randomization is ON */
   /* Note that if randomization is ON, it will override Question Order number assigned above */
   Local number &nbr_Randomq, &nbr_Randoma;
   
   For &j = 1 To &rsReqQuestions.ActiveRowCount
      If HRS_INST_I.HRS_RANDOM_QSTN = "Y" Then
         &nbr_Randomq = Int(Rand() * 10);
      End-If;
      
      If &nbr_Randomq > 0 Then
         &rsReqQuestions(&j).DERIVED_ER.ROW_NUM.Value = &nbr_Randomq;
      End-If;
      
      &rsReqAnswers = &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I);
      
      For &k = 1 To &rsReqAnswers.ActiveRowCount
         If HRS_INST_I.HRS_RANDOM_ANS = "Y" Then
            &nbr_Randoma = Int(Rand() * 10);
         End-If;
         
         If &nbr_Randoma > 0 Then
            &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = &nbr_Randoma;
         End-If;
      End-For;
      
      &rsReqAnswers.Sort(HRS_DERIVED_RW.ROW_NUM, "A");
   End-For;
   
   &rsReqQuestions.Sort(DERIVED_ER.ROW_NUM, "A");
   
   &intQuestionNumber = 0;
   
   For &j = 1 To &rsReqQuestions.ActiveRowCount
      &rsReqQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Enabled = False;
      &rsReqQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Visible = False;
      
      If &rsReqQuestions(&j).Visible And
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value <> "Y" And
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible And
            All(&rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value) And
            &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I)(1).Visible And
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_NUMBERED_FLG.Value <> "Y" Then
         &intQuestionNumber = &intQuestionNumber + 1;
         REM &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value = &intQuestionNumber | ". " | &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
         
         If &c_bIsFluidMode Then
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Label = &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible = False;
         Else
            If GetUserOption("PPTL", "ACCESS") = "A" Then
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Visible = True;
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Label = MsgGetText(18178, 659, "Message not found.") | " " | &intQuestionNumber;
               &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value = MsgGetText(18178, 659, "Message not found.") | ": " | &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            Else
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
               &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value = &intQuestionNumber | ". " | &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            End-If;
         End-If;
         
         &rsReqQuestions(&j).HRS_CE_WRK.HRS_NUMBERED_FLG.Value = "Y";
      End-If;
   End-For;
   
end-method;

method getQuestionOrderNbr
   /+ &nbr_JobOpeningId as Number, +/
   /+ &nbr_QuestionId as Number +/
   /+ Returns Number +/
   Local Record &rec_JOQstn;
   &rec_JOQstn = CreateRecord(Record.HRS_JO_QST_OR_I);
   &rec_JOQstn.HRS_JOB_OPENING_ID.Value = &nbr_JobOpeningId;
   &rec_JOQstn.HRS_QSTN_ID.Value = &nbr_QuestionId;
   &rec_JOQstn.SelectByKey();
   Return &rec_JOQstn.HRS_QSTN_ORDER_NBR.Value;
end-method;

method setOpenEndedQuestion
   /+ &aJobOpenings as Array of Number +/
   Local array of string &aString;
   Local array of number &anumeligiblejobs;
   Local Rowset &rsOEAppAnswers, &rsJobAppAnswers, &rsJobOEQuestions, &rsReqQuestions, &rsAppProfile;
   Local Row &rowReqQuestion, &rowJobAppAnswer;
   Local string &jobNumberList, &qstn;
   Local number &j, &i, &levelcount, &inscount, &count, &hrsPersonId, &hrsProfileSeq;
   Local integer &intQuestionNumber;
   Local boolean &exists;
   
   &rsAppProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE);
   &hrsPersonId = GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value;
   &hrsProfileSeq = &rsAppProfile(CurrentRowNumber()).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
   &rsOEAppAnswers = &rsAppProfile(CurrentRowNumber()).GetRowset(Scroll.HRS_APP_OPN_ANS);
   &rsJobAppAnswers = GetLevel0()(1).GetRowset(Scroll.HRS_APP_OPANS_I); /* the visible open ended answers on the page*/
   &rsJobOEQuestions = CreateRowset(Record.HRS_JO_QST_OO_I);
   &rsReqQuestions = GetLevel0()(1).GetRowset(Scroll.HRS_JO_QST_NO_I); /*NON OPEN ENDED */
   
   If &hrsProfileSeq = 0 Then
      &hrsProfileSeq = 1;
   End-If;
   
   &anumeligiblejobs = &controller.getEligibleJobs(&aJobOpenings);
   
   /* Get all the Job Opening ID's */
   &aString = CreateArrayRept("", 0);
   
   For &j = 1 To &anumeligiblejobs.Len
      If &anumeligiblejobs [&j] <> 0 Then
         &jobNumberList = &jobNumberList | &anumeligiblejobs [&j];
         
         If &j <> &anumeligiblejobs.Len Then
            &jobNumberList = &jobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   /* Get  the Questions associated with these job openings */
   If All(&jobNumberList) Then
      &rsJobOEQuestions.Fill("WHERE HRS_OPN_ENDED_QSTN = 'Y' AND HRS_JOB_OPENING_ID IN (" | &jobNumberList | ")");
   End-If;
   
   /* sort rowset */
   &rsJobOEQuestions.Sort(HRS_JO_QST_OO_I.HRS_QSTN_ID, "A");
   
   &inscount = 0;
   &count = &rsJobOEQuestions.ActiveRowCount;
   
   For &j = 1 To &count
      &exists = False;
      
      For &levelcount = 1 To &rsJobAppAnswers.ActiveRowCount
         If &rsJobAppAnswers(&levelcount).HRS_APP_OPANS_I.HRS_QSTN_ID.Value = &rsJobOEQuestions(&j).HRS_JO_QST_OO_I.HRS_QSTN_ID.Value Then
            &exists = True;
         End-If;
      End-For;
      
      If Not &exists Then
         &inscount = &inscount + 1;
         
         If &inscount > 1 Then
            &rsJobAppAnswers.InsertRow(&inscount - 1);
         End-If;
         
         &rsJobOEQuestions(&j).CopyTo(&rsJobAppAnswers(&inscount));
         &rsJobOEQuestions(&j).HRS_JO_QST_OO_I.CopyFieldsTo(&rsJobAppAnswers(&inscount).HRS_APP_OPANS_I);
      End-If;
   End-For;
   
   For &i = 1 To &rsOEAppAnswers.ActiveRowCount
      For &j = 1 To &rsJobAppAnswers.ActiveRowCount
         If &rsJobAppAnswers(&j).HRS_APP_OPANS_I.HRS_QSTN_ID.Value = &rsOEAppAnswers(&i).HRS_APP_OPN_ANS.HRS_QSTN_ID.Value Then
            &rsJobAppAnswers(&j).HRS_APP_OPANS_I.HRS_OPEN_ENDED_ANS.Value = &rsOEAppAnswers(&i).HRS_APP_OPN_ANS.HRS_OPEN_ENDED_ANS.Value;
            &rsJobAppAnswers(&j).HRS_APP_OPANS_I.HRS_REF_NUM_LONG.Value = &rsOEAppAnswers(&i).HRS_APP_OPN_ANS.HRS_REF_NUM_LONG.Value;
            &rsJobAppAnswers(&j).HRS_APP_OPANS_I.HRS_PROFILE_SEQ.Value = &hrsProfileSeq;
         End-If;
      End-For;
   End-For;
   
   &intQuestionNumber = 0;
   
   For &i = 1 To &rsReqQuestions.ActiveRowCount
      &rowReqQuestion = &rsReqQuestions(&i);
      
      If &rowReqQuestion.Visible And
            &rowReqQuestion.HRS_CE_WRK.HRS_PRESCREEN_FLG.Value <> "Y" And
            &rowReqQuestion.HRS_QSTN_TBL.DESCRLONG.Visible And
            All(&rowReqQuestion.HRS_QSTN_TBL.DESCRLONG.Value) And
            &rowReqQuestion.GetRowset(Scroll.HRS_CE_JO_ANS_I)(1).Visible Then
         &intQuestionNumber = &intQuestionNumber + 1;
      End-If;
   End-For;
   
   For &i = 1 To &rsJobAppAnswers.ActiveRowCount
      &rowJobAppAnswer = &rsJobAppAnswers(&i);
      
      If &rowJobAppAnswer.Visible And
            &rowJobAppAnswer.HRS_QSTN_TBL.DESCRLONG.Visible And
            All(&rowJobAppAnswer.HRS_QSTN_TBL.DESCRLONG.Value) And
            &rowJobAppAnswer.HRS_CE_WRK.HRS_NUMBERED_FLG.Value <> "Y" Then
         &intQuestionNumber = &intQuestionNumber + 1;
         &rowJobAppAnswer.HRS_QSTN_TBL.DESCRLONG.Value = &intQuestionNumber | ". " | &rowJobAppAnswer.HRS_QSTN_TBL.DESCRLONG.Value;
         &rowJobAppAnswer.HRS_CE_WRK.HRS_NUMBERED_FLG.Value = "Y";
      End-If;
   End-For;
   
end-method;

method formatReferral
   
   Local Rowset &rs_AppReferral;
   Local Row &rw_AppReferral;
   Local number &nbr_SiteId;
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   
   &rs_AppReferral = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE);
   &rw_AppReferral = &rs_AppReferral.GetRow(1);
   
   HRS_CE_WRK.SEC_INFO_REFERRAL.Visible = (All(HRS_CE_WRK.SEC_INFO_REFERRAL.Value) And
      %Page <> %This.getPageName(Page.HRS_CE_REVIEW));
   
   If &c_bIsFluidMode And
         HRS_CE_WRK.SEC_INFO_REFERRAL.Visible Then
      HRS_CE_WRK.SEC_INFO_REFERRAL.Label = MsgGetText(18172, 2128, "Message not found.") | ": " | &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_FL_GRPB_23"), String(&nbr_SiteId));
   End-If;
   
   /*If %Menu = MenuName.HRS_HRAM_EMP Then*/
   If &applicant.APP_PER_STATUS = "E" Then
      &rw_AppReferral.HRS_APP_PROFILE.PREV_EMPL_BY_COMPY.Visible = False;
      &rw_AppReferral.HRS_APP_PROFILE.PREV_TERM_DT.Visible = False;
   Else
      &rw_AppReferral.HRS_APP_PROFILE.PREV_EMPL_BY_COMPY.Visible = True;
      &rw_AppReferral.HRS_APP_PROFILE.PREV_TERM_DT.Visible = True;
      If &rw_AppReferral.HRS_APP_PROFILE.PREV_EMPL_BY_COMPY.Value = "Y" Then
         &rw_AppReferral.HRS_APP_PROFILE.PREV_TERM_DT.Visible = True;
         &rw_AppReferral.HRS_APP_PROFILE.PREV_TERM_DT.Label = MsgGetText(18178, 264, "");
      Else
         &rw_AppReferral.HRS_APP_PROFILE.PREV_TERM_DT.Visible = False;
      End-If;
   End-If;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatReferral();
   End-If;
   
end-method;

method setPersonalInfoPref
   
   Local Record &recHRS_RES_TMPL;
   Local number &i;
   
   GetLevel0()(1).HRS_APPLICANT.BIRTHDATE.Visible = False;
   GetLevel0()(1).HRS_APPLICANT.SEX.Visible = False;
   GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EFFDT.MAR_STATUS.Visible = False;
   GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EDT_WRK.MAR_STATUS.Visible = False;
   
   GetLevel0()(1).HRS_APPLICANT.BIRTHDATE.ShowRequiredFieldCue = False;
   GetLevel0()(1).HRS_APPLICANT.SEX.ShowRequiredFieldCue = False;
   GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EFFDT.MAR_STATUS.ShowRequiredFieldCue = False;
   GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EDT_WRK.MAR_STATUS.ShowRequiredFieldCue = False;
   
   For &i = 1 To %This.i_ary_Templates.Len
      &recHRS_RES_TMPL = CreateRecord(Record.HRS_RES_TMPL);
      &recHRS_RES_TMPL.HRS_RES_TMPL_ID.Value = Value(%This.i_ary_Templates [&i]);
      &recHRS_RES_TMPL.SelectByKey();
      
      If &recHRS_RES_TMPL.BIRTHDATE_FLG.Value Then
         GetLevel0()(1).HRS_APPLICANT.BIRTHDATE.Visible = &recHRS_RES_TMPL.BIRTHDATE_FLG.Value;
      End-If;
      
      If &recHRS_RES_TMPL.SEX_FLG.Value Then
         GetLevel0()(1).HRS_APPLICANT.SEX.Visible = &recHRS_RES_TMPL.SEX_FLG.Value;
      End-If;
      
      If &recHRS_RES_TMPL.MARITAL_STATUS_FLG.Value Then
         GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EFFDT.MAR_STATUS.Visible = &recHRS_RES_TMPL.MARITAL_STATUS_FLG.Value;
         GetLevel0()(1).GetRowset(Scroll.HRS_APP_EFFDT).GetRow(1).HRS_APP_EDT_WRK.MAR_STATUS.Visible = &recHRS_RES_TMPL.MARITAL_STATUS_FLG.Value;
      End-If;
   End-For;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatPersonalInfo();
   End-If;
end-method;

method setOverride
   /+ &bol_Override as Boolean +/
   &isOverride = &bol_Override;
end-method;

method setTemplateCollection
   /+ &ary_Templates as Array of Number +/
   &i_ary_Templates = &ary_Templates;
end-method;

method setAdditionalInfo
   /+ &bol_AddInfo as Boolean +/
   &bol_hasAdditionalInfo = &bol_AddInfo;
end-method;

method JoinTemplateColl
   /+ &ary_Templates as Array of Number +/
   
   Local number &i;
   
   For &i = 1 To &ary_Templates.Len
      &i_ary_Templates.Push(&ary_Templates [&i]);
   End-For;
   
end-method;

method getExistingSections
   /+ Returns Array2 of String +/
   
   Return &asection;
end-method;

method handleDropDownAndPrompt
   /+ &fld_pDropDown as Field, +/
   /+ &fld_pPrompt as Field, +/
   /+ &fld_promptRelatedField as Field, +/
   /+ &str_pKeyFieldName as String, +/
   /+ &str_pValueFieldName as String, +/
   /+ &str_pWhereClause as String +/
   
   Local string &str_lPromptTableName = &fld_pPrompt.PromptTableName;
   Local number &nbr_lNoOfRows;
   Local Rowset &rs_lResults;
   Local Record &rec_lTemp;
   Local number &i;
   Local string &str_lWhereClause;
   SQLExec("SELECT COUNT(*) FROM PS_" | &str_lPromptTableName | " FILL " | &str_pWhereClause, &nbr_lNoOfRows);
   
   If (&nbr_lNoOfRows <= 75) Then
      &rs_lResults = CreateRowset(@("Record." | &str_lPromptTableName));
      &nbr_lNoOfRows = &rs_lResults.Fill(&str_pWhereClause);
      
      &fld_pDropDown.ClearDropDownList();
      For &i = 1 To &nbr_lNoOfRows
         &rec_lTemp = &rs_lResults(&i).GetRecord(@("Record." | &str_lPromptTableName));
         &fld_pDropDown.AddDropDownItem(String(&rec_lTemp.GetField(@("Field." | &str_pKeyFieldName)).Value), String(&rec_lTemp.GetField(@("Field." | &str_pValueFieldName)).Value));
      End-For;
      
      &fld_pDropDown.Visible = True;
      &fld_promptRelatedField.Visible = False;
   Else
      &fld_pDropDown.Visible = False;
      &fld_promptRelatedField.Visible = True;
   End-If;
end-method;

/* Methods below are to be used for pre-screening */
method formatPreScreeningQstn
   /+ &rs_ResumeQuestions as Rowset +/
   If &rs_ResumeQuestions.ActiveRowCount >= 1 Then
      HRS_CE_WRK.GRPB_QUESTIONAIRRE.Visible = True;
   Else
      HRS_CE_WRK.GRPB_QUESTIONAIRRE.Visible = False;
   End-If;
   
   If %Page = %This.getPageName(Page.HRS_APP_JOPRESCRN) Then
      Local integer &i;
      
      For &i = 1 To &rs_ResumeQuestions.ActiveRowCount
         If &rs_ResumeQuestions(&i).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y" Then
            &rs_ResumeQuestions(&i).HRS_CE_WRK.HRS_QUESTION_GB.Visible = (GetUserOption("PPTL", "ACCESS") = "A" Or
               &c_bIsFluidMode);
            &rs_ResumeQuestions(&i).HRS_QSTN_TBL.DESCRLONG.Visible = ( Not &c_bIsFluidMode);
            &rs_ResumeQuestions(&i).HRS_RADIO_WRK.HTMLAREA.Visible = True;
         Else /* question is part of online questionnaire section */
            &rs_ResumeQuestions(&i).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
            &rs_ResumeQuestions(&i).HRS_QSTN_TBL.DESCRLONG.Visible = False;
            &rs_ResumeQuestions(&i).HRS_RADIO_WRK.HTMLAREA.Visible = False;
         End-If;
      End-For;
   End-If;
   
   %This.drawQuestionAnswers();
end-method;

method setResumeTemplateQstn
   /+ &nbr_ResumeTemplateId as Number +/
   
   Local boolean &exists;
   Local number &j, &k;
   Local number &count;
   Local number &inscount;
   Local number &lev1count;
   Local Rowset &rsApplicant, &rsResTemplate, &rsResQuestions, &rsResAnswers, &rsAppResAnswers;
   Local number &hrsPersonId;
   Local number &nbr_ProfileSeq;
   Local number &nbr_ResumeTmplId, &nbr_TotalResQstns, &nbr_TotalResAns, &nbr_SiteId;
   Local string &currentQstns;
   Local number &nbr_QstnId, &nbr_OrderNbr, &nbr_Random;
   Local integer &intCorrectAnswerCount;
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Submit &action;
   
   If &bPrescreeningQuestionsSet Then
      Return;
   Else
      &bPrescreeningQuestionsSet = True;
   End-If;
   
   &action = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:BUS:Submit();
   
   /* Applicant Person ID */
   &hrsPersonId = &applicant.HRS_PERSON_ID;
   /**/
   &nbr_ProfileSeq = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(CurrentRowNumber()).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
   
   If &nbr_ProfileSeq <= 0 Then
      &nbr_ProfileSeq = &action.getMaxProfileSeqNo(&hrsPersonId) + 1;
      GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(CurrentRowNumber()).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value = &nbr_ProfileSeq;
   End-If;
   
   &action.setProfileSeq(&nbr_ProfileSeq);
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   /* Must reset applicant answers before applying */
   &rsApplicant = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   /* Resume Questions */
   &rsResQuestions = GetLevel0()(1).GetRowset(Scroll.HRS_RES_QSTN_I);
   
   /* Resume Applicant Answers */
   &rsAppResAnswers = &rsApplicant(CurrentRowNumber()).GetRowset(Scroll.HRS_APP_PSCRANS);
   &rsAppResAnswers.Select(Record.HRS_APP_PSCRANS, "where HRS_PERSON_ID = :1 and HRS_PROFILE_SEQ = :2", &hrsPersonId, &nbr_ProfileSeq);
   
   /* Flush questions rowset */
   &rsResQuestions.Flush();
   
   If All(&nbr_ResumeTemplateId) Then
      &rsResQuestions.Select(Record.HRS_RES_QSTN_I, "WHERE HRS_RES_TMPL_ID = :1", &nbr_ResumeTemplateId);
   End-If;
   
   &inscount = 0;
   
   For &count = 1 To &rsResQuestions.ActiveRowCount
      &exists = False;
      
      For &lev1count = 1 To &rsAppResAnswers.ActiveRowCount
         If &rsResQuestions(&count).HRS_RES_QSTN_I.HRS_QSTN_ID.Value = &rsAppResAnswers(&lev1count).HRS_APP_PSCRANS.HRS_QSTN_ID.Value Then
            &exists = True;
            Break;
         End-If;
      End-For;
      
      &rsResAnswers = &rsResQuestions(&count).GetRowset(Scroll.HRS_RES_ANS_I);
      
      If &exists Then
         <*&intCorrectAnswerCount = 0;
         
         For &k = 1 To &rsResAnswers.ActiveRowCount
            If (&rsResAnswers(&k).HRS_RES_ANS_I.CORRECT_ANSWER.Value = "Y") Then
               &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
            End-If;
         End-For;*>
         
         For &k = 1 To &rsResAnswers.ActiveRowCount
            For &lev1count = 1 To &rsAppResAnswers.ActiveRowCount
               If &rsResQuestions(&count).HRS_RES_QSTN_I.HRS_QSTN_ID.Value = &rsAppResAnswers(&lev1count).HRS_APP_PSCRANS.HRS_QSTN_ID.Value And
                     &rsResAnswers(&k).HRS_RES_ANS_I.HRS_ANSWER_ID.Value = &rsAppResAnswers(&lev1count).HRS_APP_PSCRANS.HRS_ANSWER_ID.Value Then
                  &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y";
                  
                  If &c_bIsFluidMode Then
                     &rsResAnswers(&k).Selected = True;
                  End-If;
               End-If;
            End-For;
            
            <*If &intCorrectAnswerCount = 1 Then
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
            Else
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
            End-If;*>
         End-For;
      Else
         &inscount = &inscount + 1;
         
         If &inscount > 1 Then
            &rsAppResAnswers.InsertRow(&inscount - 1);
         End-If;
         
         /* Read Resume Answers */
         &rsResAnswers.Flush();
         &rsResAnswers.Select(Record.HRS_RES_ANS_I, "WHERE HRS_RES_TMPL_ID = :1 AND HRS_QSTN_ID = :2", &nbr_ResumeTemplateId, &rsResQuestions(&count).HRS_RES_QSTN_I.HRS_QSTN_ID.Value);
         
         <*&intCorrectAnswerCount = 0;
         
         For &k = 1 To &rsResAnswers.ActiveRowCount
            If (&rsResAnswers(&k).HRS_RES_ANS_I.CORRECT_ANSWER.Value = "Y") Then
               &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
            End-If;
         End-For;*>
         
         For &k = 1 To &rsResAnswers.ActiveRowCount
            <*If &intCorrectAnswerCount = 1 Then
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
            Else
               &rsResAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
               &rsResAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
            End-If;*>
            
            &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_PERSON_ID.Value = &hrsPersonId;
            &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_PROFILE_SEQ.Value = &nbr_ProfileSeq;
            &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_RES_TMPL_ID.Value = &nbr_ResumeTemplateId;
            &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_SITE_ID.Value = &nbr_SiteId;
            &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_QSTN_ID.Value = &rsResQuestions(&count).HRS_RES_QSTN_I.HRS_QSTN_ID.Value;
            REM &rsAppResAnswers(&inscount).HRS_APP_PSCRANS.HRS_ANSWER_ID.Value = &rsResAnswers(&k).HRS_RES_ANS_I.HRS_ANSWER_ID.Value;
            &rsResAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = " ";
         End-For;
      End-If;
   End-For;
   
   /* Let's re-arrange the resume questions by random or by order number defined in JO */
   For &j = 1 To &rsResQuestions.ActiveRowCount
      &rsResQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Enabled = False;
      &rsResQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Visible = False;
      
      &nbr_OrderNbr = &rsResQuestions(&j).HRS_RES_QSTN_I.HRS_QSTN_ORDER_NBR.Value;
      
      If HRS_INST_I.HRS_RANDOM_QSTN = "Y" Then
         &rsResQuestions(&j).DERIVED_ER.ROW_NUM.Value = Int(Rand() * 10);
      Else
         &rsResQuestions(&j).DERIVED_ER.ROW_NUM.Value = &rsResQuestions(&j).HRS_RES_QSTN_I.HRS_QSTN_ORDER_NBR.Value;
      End-If;
      
      &nbr_Random = &rsResQuestions(&j).DERIVED_ER.ROW_NUM.Value;
   End-For;
   
   If &nbr_Random > 0 Then
      &rsResQuestions.Sort(DERIVED_ER.ROW_NUM, "A");
   Else
      &rsResQuestions.Sort(DERIVED_ER.ROW_NUM, "D");
   End-If;
   
   For &count = 1 To &rsResQuestions.ActiveRowCount
      If &c_bIsFluidMode Then
         &rsResQuestions(&count).HRS_CE_WRK.HRS_QUESTION_GB.Label = &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Value;
         &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Visible = False;
      Else
         If GetUserOption("PPTL", "ACCESS") = "A" Then
            &rsResQuestions(&count).HRS_CE_WRK.HRS_QUESTION_GB.Label = MsgGetText(18178, 659, "Message not found.") | " " | &count;
            &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Value = MsgGetText(18178, 659, "Message not found.") | ": " | &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Value;
         Else
            &rsResQuestions(&count).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
            &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Value = &count | ". " | &rsResQuestions(&count).HRS_QSTN_TBL.DESCRLONG.Value;
         End-If;
      End-If;
   End-For;
   
end-method;

/* New method to set pre-screening question for apply with JO */
/* Allows multiple JO to apply. Merges common questions for multiple JOs */
method setJOPreScreeningQstn
   /+ &aJobOpenings as Array of Number +/
   Local array of string &aString;
   Local array of number &anumEligibleJobs, &anumIneligibleJobs;
   Local boolean &exists, &boo_found;
   Local number &j, &k, &count, &inscount, &lev1count, &hrsPersonId, &hrsProfileSeq;
   Local Rowset &rsAppAnswers, &rsReqQuestions, &rsReqAnswers, &rsAppProfile;
   Local string &jobNumberList, &currentQstns, &eligibleJobNumberList, &ineligibleJobNumberList;
   Local number &nbr_Random, &nbr_QstnId, &nbr_JOId, &nbr_QstnOrder, &nbr_OrderNbr;
   Local number &nbr_JOAnsId;
   Local Rowset &rs_AppPscrans, &rs_JOPSQstn;
   Local integer &intCorrectAnswerCount, &intQuestionNumber;
   
   If &bPrescreeningQuestionsSet Then
      Return;
   Else
      &bPrescreeningQuestionsSet = True;
   End-If;
   
   &rs_AppPscrans = CreateRowset(Record.HRS_APP_PSCRANS);
   &rs_JOPSQstn = CreateRowset(Record.HRS_JO_PRSCR_VW);
   
   &rsAppProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE);
   &hrsPersonId = GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value;
   &hrsProfileSeq = &rsAppProfile(CurrentRowNumber()).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
   &rsAppAnswers = &rsAppProfile(CurrentRowNumber()).GetRowset(Scroll.HRS_APP_ANSWER);
   
   For &j = 1 To &rsAppAnswers.ActiveRowCount
      If All(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value) Then
         If Find(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value, &currentQstns) = 0 Then
            If &j > 1 Then
               &currentQstns = &currentQstns | ",";
            End-If;
            
            &currentQstns = &currentQstns | String(&rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value);
         End-If;
      End-If;
   End-For;
   
   &rsReqQuestions = GetLevel0()(1).GetRowset(Scroll.HRS_JO_QST_NO_I);
   
   &aString = CreateArrayRept("", 0);
   
   &anumEligibleJobs = &controller.getEligibleJobs(&aJobOpenings);
   &anumIneligibleJobs = &controller.getIneligibleJobs(&aJobOpenings);
   
   For &j = 1 To &anumEligibleJobs.Len
      If &anumEligibleJobs [&j] <> 0 Then
         &eligibleJobNumberList = &eligibleJobNumberList | &anumEligibleJobs [&j];
         
         If &j <> &anumEligibleJobs.Len Then
            &eligibleJobNumberList = &eligibleJobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   For &j = 1 To &anumIneligibleJobs.Len
      If &anumIneligibleJobs [&j] <> 0 Then
         &ineligibleJobNumberList = &ineligibleJobNumberList | &anumIneligibleJobs [&j];
         
         If &j <> &anumIneligibleJobs.Len Then
            &ineligibleJobNumberList = &ineligibleJobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   For &j = 1 To &aJobOpenings.Len
      If &aJobOpenings [&j] <> 0 Then
         &jobNumberList = &jobNumberList | &aJobOpenings [&j];
         
         If &j <> &aJobOpenings.Len Then
            &jobNumberList = &jobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   If None(&eligibleJobNumberList) Then
      &eligibleJobNumberList = &jobNumberList;
   End-If;
   
   If All(&jobNumberList) Then
      If All(&currentQstns) Then
         If All(&ineligibleJobNumberList) Then
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND (HRS_JOB_OPENING_ID IN (" | &eligibleJobNumberList | ") or HRS_QSTN_ID in (select HRS_QSTN_ID from PS_HRS_JO_PRSCR_VW where HRS_JOB_OPENING_ID in (" | &ineligibleJobNumberList | "))) AND HRS_QSTN_ID NOT IN (" | &currentQstns | ")"); /* 660361 */
         Else
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (" | &currentQstns | ")"); /* 660361 */
         End-If;
      Else
         If All(&ineligibleJobNumberList) Then
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND (HRS_JOB_OPENING_ID IN (" | &eligibleJobNumberList | ") or HRS_QSTN_ID in (select HRS_QSTN_ID from PS_HRS_JO_PRSCR_VW where HRS_JOB_OPENING_ID in (" | &ineligibleJobNumberList | "))) AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_PSCRANS A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &hrsPersonId, &hrsProfileSeq);
         Else
            &rsAppAnswers.SelectNew(Record.HRS_JO_QST_OO_I, "WHERE HRS_OPN_ENDED_QSTN <> 'Y' AND HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_PSCRANS A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &hrsPersonId, &hrsProfileSeq);
         End-If;
      End-If;
      
      &inscount = 0;
      
      For &count = 1 To &rsAppAnswers.ActiveRowCount
         &exists = False;
         
         For &lev1count = 1 To &rsReqQuestions.ActiveRowCount
            If &rsReqQuestions(&lev1count).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value Then
               &inscount = &lev1count;
               &exists = True;
            End-If;
         End-For;
         
         If Not &exists Then
            &inscount = &inscount + 1;
            
            If &inscount = 1 And
                  &rsReqQuestions(1).IsNew Then
            Else
               &rsReqQuestions.InsertRow(&inscount - 1);
            End-If;
            
            &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value;
            &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_JOB_OPENING_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value;
            
            /* Let's get the question order number and assign the */
            &nbr_QstnId = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value;
            &nbr_JOId = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value;
            &nbr_QstnOrder = %This.getQuestionOrderNbr(&nbr_JOId, &nbr_QstnId);
            &rsReqQuestions(&inscount).DERIVED_ER.ROW_NUM.Value = &nbr_QstnOrder;
            
            &rsReqAnswers = &rsReqQuestions(&inscount).GetRowset(Scroll.HRS_CE_JO_ANS_I);
            &rsReqAnswers.Flush();
            rem &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
            &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1 order by HRS_ANS_ORDER_NUM, HRS_ANSWER_ID", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
            
            <*&intCorrectAnswerCount = 0;
            
            For &k = 1 To &rsReqAnswers.ActiveRowCount
               If (&rsReqAnswers(&k).HRS_CE_JO_ANS_I.CORRECT_ANSWER.Value = "Y") Then
                  &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
               End-If;
            End-For;*>
            
            For &k = 1 To &rsReqAnswers.ActiveRowCount
               If &c_bol_isAppStsDraft And
                     &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value And
                     &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_ANSWER_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value Then
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y";
                  
                  If &c_bIsFluidMode Then
                     &rsReqAnswers(&k).Selected = True;
                  End-If;
               End-If;
               
               &rsReqAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = "N";
               /*14022840 &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = Int(Rand() * 10);*/
               &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = &k;
               
               <*If &intCorrectAnswerCount = 1 Then
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
               Else
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
                  &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
               End-If;*>
            End-For;
            
            If HRS_INST_I.HRS_RANDOM_ANS = "Y" Then
               &rsReqAnswers.Sort(HRS_DERIVED_RW.ROW_NUM, "A");
            End-If;
            
         Else /* If &exists */
            If None(&rsReqAnswers) Then
               If All(&rsReqQuestions) Then
                  For &j = 1 To &rsReqQuestions.ActiveRowCount
                     &rsReqAnswers = &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I);
                     &rsReqAnswers.Flush();
                     rem &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1", &rsReqQuestions(&j).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
                     &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1 order by HRS_ANS_ORDER_NUM, HRS_ANSWER_ID", &rsReqQuestions(&j).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
                     
                     <*&intCorrectAnswerCount = 0;
                     
                     For &k = 1 To &rsReqAnswers.ActiveRowCount
                        If (&rsReqAnswers(&k).HRS_CE_JO_ANS_I.CORRECT_ANSWER.Value = "Y") Then
                           &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
                        End-If;
                     End-For;*>
                     
                     For &k = 1 To &rsReqAnswers.ActiveRowCount
                        /* Load previous answers from pre-screening into buffer */
                        If None(&rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value) Then
                           &rs_AppPscrans.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_QSTN_ID = :2", &hrsPersonId, &rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value);
                           &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value = &rs_AppPscrans(1).HRS_APP_PSCRANS.HRS_ANSWER_ID.Value;
                        End-If;
                        
                        If &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value And
                              &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_ANSWER_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value Then
                           If &c_bol_isAppStsDraft Then
                              &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y";
                              
                              If &c_bIsFluidMode Then
                                 &rsReqAnswers(&k).Selected = True;
                              End-If;
                           End-If;
                           &rsReqAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = "N";
                           &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = Int(Rand() * 10);
                        End-If;
                        
                        <*If &intCorrectAnswerCount = 1 Then
                           &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
                           &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
                           &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
                        Else
                           &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
                           &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
                        End-If;*>
                     End-For;
                  End-For;
               End-If;
            Else
               For &j = 1 To &rsReqQuestions.ActiveRowCount
                  &rsReqAnswers = &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I);
                  
                  <*&intCorrectAnswerCount = 0;
                  
                  For &k = 1 To &rsReqAnswers.ActiveRowCount
                     If (&rsReqAnswers(&k).HRS_CE_JO_ANS_I.CORRECT_ANSWER.Value = "Y") Then
                        &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
                     End-If;
                  End-For;*>
                  
                  For &k = 1 To &rsReqAnswers.ActiveRowCount
                     /* Load previous answers from pre-screening into buffer */
                     If &c_bol_isAppStsDraft And
                           None(&rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value) Then
                        &rs_AppPscrans.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_QSTN_ID = :2", &hrsPersonId, &rsAppAnswers(&j).HRS_APP_ANSWER.HRS_QSTN_ID.Value);
                        &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value = &rs_AppPscrans(1).HRS_APP_PSCRANS.HRS_ANSWER_ID.Value;
                     End-If;
                     
                     If &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value And
                           &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_ANSWER_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value Then
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y";
                        
                        If &c_bIsFluidMode Then
                           &rsReqAnswers(&k).Selected = True;
                        End-If;
                        
                        &rsReqAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = "N";
                        /*14022840 &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = Int(Rand() * 10);*/
                     End-If;
                     
                     <*If &intCorrectAnswerCount = 1 Then
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = True;
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Value = &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value;
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
                     Else
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_RADIO_BTN.Visible = False;
                        &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
                     End-If;*>
                  End-For;
               End-For;
            End-If;
            
         End-If; /* Not &exists */
      End-For; /* &count = 1 To &rsAppAnswers.ActiveRowCount */
   End-If; /* All(&jobNumberList) */
   
   /* Let's re-arrange the questions by random number if Randomization is ON */
   /* Note that if randomization is ON, it will override Question Order number assigned above */
   Local number &nbr_Randomq, &nbr_Randoma;
   
   For &j = 1 To &rsReqQuestions.ActiveRowCount
      If HRS_INST_I.HRS_RANDOM_QSTN.Value = "Y" Then
         &nbr_Randomq = Int(Rand() * 10);
         
      End-If;
      
      If &nbr_Randomq > 0 Then
         &rsReqQuestions(&j).DERIVED_ER.ROW_NUM.Value = &nbr_Randomq;
      Else
         If HRS_INST_I.HRS_RANDOM_QSTN.Value = "Y" Then
            &rsReqQuestions(&j).DERIVED_ER.ROW_NUM.Value = &j;
         Else
            /*19336816*/
            &nbr_QstnId = &rsReqQuestions(&j).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value;
            &nbr_JOId = &rsAppAnswers(&j).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value;
            &nbr_QstnOrder = %This.getQuestionOrderNbr(&nbr_JOId, &nbr_QstnId);
            
            &rsReqQuestions(&j).DERIVED_ER.ROW_NUM.Value = &nbr_QstnOrder;
            
            If &nbr_QstnOrder > 0 Then
               
            Else
               &rsReqQuestions(&j).DERIVED_ER.ROW_NUM.Value = &j;
            End-If;
            /*19336816*/
         End-If;
         
      End-If;
      
      &rsReqAnswers = &rsReqQuestions(&j).GetRowset(Scroll.HRS_CE_JO_ANS_I);
      
      For &k = 1 To &rsReqAnswers.ActiveRowCount
         If HRS_INST_I.HRS_RANDOM_ANS.Value = "Y" Then
            &nbr_Randoma = Int(Rand() * 10);
            
         End-If;
         
         If &nbr_Randoma > 0 Then
            &rsReqAnswers(&k).HRS_DERIVED_RW.ROW_NUM.Value = &nbr_Randoma;
         End-If;
         
      End-For;
      
      &rsReqAnswers.Sort(HRS_DERIVED_RW.ROW_NUM, "A");
      
   End-For;
   
   &rsReqQuestions.Sort(DERIVED_ER.ROW_NUM, "A");
   
   /* Let's read through all the questions again and remove (or do not display) the question */
   /* that may have been answered already in previous pre-screening */
   /* or questions that may not belong to the selected JO */
   Local number &mnbr, &nbr_Rows;
   Local Row &rw_ReqQuestions;
   
   For &mnbr = &rsReqQuestions.ActiveRowCount To 1 Step - 1
      &rw_ReqQuestions = &rsReqQuestions.GetRow(&mnbr);
      &nbr_QstnId = &rsReqQuestions(&mnbr).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value;
      &nbr_JOId = &rsReqQuestions(&mnbr).HRS_JO_QST_NO_I.HRS_JOB_OPENING_ID.Value;
      /* --- */
      &nbr_Rows = &rs_AppPscrans.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_QSTN_ID = :2", &hrsPersonId, &nbr_QstnId);
      
      If &nbr_Rows > 0 Then
         /* If the question has already been answered before */
         /* do not display the question and its answers */
         <*&rw_ReqQuestions.HRS_QSTN_TBL.DESCRLONG.Visible = False;
         &rsReqAnswers = &rsReqQuestions(&mnbr).GetRowset(Scroll.HRS_CE_JO_ANS_I);
         &rsReqAnswers.HideAllRows();*>
         
         <*For &k = 1 To &rsReqAnswers.ActiveRowCount
            &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
            &rsReqAnswers(&k).HRS_ANS_I.DESCR254.Visible = False;
         End-For;*>
      Else
         /* If the question has not been answered before */
         &rw_ReqQuestions.HRS_QSTN_TBL.DESCRLONG.Visible = True;
         &rsReqAnswers = &rsReqQuestions(&mnbr).GetRowset(Scroll.HRS_CE_JO_ANS_I);
         <*&rsReqAnswers.ShowAllRows();
         
         For &k = 1 To &rsReqAnswers.ActiveRowCount
            &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
            &rsReqAnswers(&k).HRS_ANS_I.DESCR254.Visible = True;
         End-For;*>
      End-If;
      
      /* Check If JO and Question is a selected pre-screening question  */
      &nbr_Rows = &rs_JOPSQstn.Fill("WHERE HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID = :1", &nbr_QstnId);
      
      If &nbr_Rows = 0 Then
         /* If the question is not a selected pre-screening question */
         /* do not display the question and its answers */
         &rw_ReqQuestions.HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
         &rw_ReqQuestions.HRS_QSTN_TBL.DESCRLONG.Visible = False;
         &rw_ReqQuestions.HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "N";
         <*&rsReqAnswers = &rsReqQuestions(&mnbr).GetRowset(Scroll.HRS_CE_JO_ANS_I);
         &rsReqAnswers.HideAllRows();
         
         For &k = 1 To &rsReqAnswers.ActiveRowCount
            &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = False;
            &rsReqAnswers(&k).HRS_ANS_I.DESCR254.Visible = False;
         End-For;*>
      Else
         /* If the question is a selected pre-screening question */
         /* display the question and its answers */
         &rw_ReqQuestions.HRS_QSTN_TBL.DESCRLONG.Visible = True;
         &rw_ReqQuestions.HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y";
         <*&rsReqAnswers = &rsReqQuestions(&mnbr).GetRowset(Scroll.HRS_CE_JO_ANS_I);
         &rsReqAnswers.ShowAllRows();
         
         For &k = 1 To &rsReqAnswers.ActiveRowCount
            &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Visible = True;
            &rsReqAnswers(&k).HRS_ANS_I.DESCR254.Visible = True;
         End-For;*>
      End-If;
   End-For;
   
   &intQuestionNumber = 0;
   &rsReqQuestions.Sort(DERIVED_ER.ROW_NUM, "A"); /*19336816*/
   
   For &j = 1 To &rsReqQuestions.ActiveRowCount
      &rsReqQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Enabled = False;
      &rsReqQuestions(&j).HRS_CE_WRK.HRS_REQUIRED.Visible = False;
      
      If &rsReqQuestions(&j).Visible And
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y" And
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible And
            All(&rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value) And
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_NUMBERED_FLG.Value <> "Y" Then
         &intQuestionNumber = &intQuestionNumber + 1;
         
         If &c_bIsFluidMode Then
            &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Label = &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible = False;
         Else
            If GetUserOption("PPTL", "ACCESS") = "A" Then
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Label = MsgGetText(18178, 659, "Message not found.") | " " | &intQuestionNumber;
               &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value = MsgGetText(18178, 659, "Message not found.") | ": " | &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            Else
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_QUESTION_GB.Visible = False;
               &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value = &intQuestionNumber | ". " | &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value;
            End-If;
         End-If;
         
         &rsReqQuestions(&j).HRS_CE_WRK.HRS_NUMBERED_FLG.Value = "Y";
      End-If;
   End-For;
end-method;

method formatPreScreeningResults
   /+ &boo_PreScreenPassed as Boolean +/
   Local string &strResultText;
   Local number &numSiteID;
   
   &numSiteID = &applicant.HRS_SITE_ID;
   
   If &boo_PreScreenPassed Then
      HRS_JO_WRK.HRS_PRESCRN_IMG.Value = Image.PS_CONFIRM_CHECK_GREEN_ICN;
      HRS_JO_WRK.HRS_PRESCRN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_PASSN", String(&numSiteID));
      &strResultText = &obj_c_myCatalog.GetCandTextSimple(&str_PassMsgTxtCatID, String(&numSiteID));
      
      If Not &c_bIsFluidMode Then
         HRS_JO_WRK.HRS_PSCRN_CNTNU_PB.Label = MsgGetText(18032, 158, "Message not found.");
      End-If;
   Else
      HRS_JO_WRK.HRS_PRESCRN_IMG.Value = Image.PS_CONFIRM_X_RED_ICN;
      HRS_JO_WRK.HRS_PRESCRN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_FAILN", String(&numSiteID));
      &strResultText = &obj_c_myCatalog.GetCandTextSimple(&str_FailMsgTxtCatID, String(&numSiteID));
      
      If Not &c_bIsFluidMode Then
         HRS_JO_WRK.HRS_PSCRN_CNTNU_PB.Label = MsgGetText(124, 326, "Message not found.");
      End-If;
   End-If;
   
   HRS_JO_WRK.DESCRLONG.Value = &strResultText;
end-method;

method formatJOPreScreeningResults
   Local string &str_ScrRsltsTxtCat;
   REM , &str_PassMsgTxtCatID, &str_FailMsgTxtCatID;
   Local number &nbr_SiteId, &i, &j, &nbr_JobOpeningId, &nbr_joScrSummId, &nbr_joScrSeq, &nbr_PersonId, &nbr_ProfileSeq;
   Local Rowset &rs_AppRcmnt, &rs_AppRcmnt2, &rs_AppJOPreScreen, &rs_JOPrScrVw;
   Local Rowset &rsAppRcmntPass, &rsAppRcmntFail;
   Local Record &rec_JOScrLevel;
   Local boolean &boo_found;
   Local string &pstJobTitle;
   Local integer &iFirst;
   Local string &prscrnStatus;
   
   rem &nbr_PersonId = &c_recApplicant.HRS_PERSON_ID.Value;
   &nbr_PersonId = &applicant.HRS_PERSON_ID;
   &nbr_ProfileSeq = &c_numProfileSeq;
   
   If &nbr_ProfileSeq = 0 Then
      SQLExec("SELECT MAX(HRS_PROFILE_SEQ) FROM PS_HRS_APP_PROFILE WHERE HRS_PERSON_ID=:1", &nbr_PersonId, &nbr_ProfileSeq);
   End-If;
   
   &rs_AppRcmnt = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rs_JOPrScrVw = CreateRowset(Record.HRS_JO_PRSCR_VW);
   &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
   &rs_AppJOPreScreen = CreateRowset(Record.HRS_APP_JOPSCRN);
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   Local number &nJobsAppliedFor = &rs_AppRcmnt.ActiveRowCount;
   
   &rsAppRcmntPass = GetLevel0()(1).GetRowset(Scroll.HRS_PSCRN_PASS);
   &rsAppRcmntPass.Flush();
   &rsAppRcmntPass.Select(Record.HRS_PSCRN_PASS, "where hrs_person_id = :1 and hrs_profile_seq = :2", &nbr_PersonId, &nbr_ProfileSeq);
   &rsAppRcmntPass.Sort(HRS_PSCRN_PASS.HRS_SCR_STATUS, "D", HRS_PSCRN_PASS.HRS_JOB_OPENING_ID, "D");
   Local number &nJobsAppliedForPass = &rsAppRcmntPass.ActiveRowCount;
   
   If &nJobsAppliedForPass = 1 And
         &rsAppRcmntPass(1).HRS_PSCRN_PASS.HRS_JOB_OPENING_ID.Value = 0 Then
      &nJobsAppliedForPass = 0;
   End-If;
   
   &c_nJobsAppliedForPass = &nJobsAppliedForPass;
   
   &rsAppRcmntFail = GetLevel0()(1).GetRowset(Scroll.HRS_PSCRN_FAIL);
   &rsAppRcmntFail.Flush();
   &rsAppRcmntFail.Select(Record.HRS_PSCRN_FAIL, "where hrs_person_id = :1 and hrs_profile_seq = :2", &nbr_PersonId, &nbr_ProfileSeq);
   &rsAppRcmntFail.Sort(HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID, "D");
   Local number &nJobsAppliedForFail = &rsAppRcmntFail.ActiveRowCount;
   
   If &nJobsAppliedForFail = 1 And
         &rsAppRcmntFail(1).HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID.Value = 0 Then
      &nJobsAppliedForFail = 0;
   End-If;
   
   &c_nJobsAppliedForFail = &nJobsAppliedForFail;
   
   /*  set title of pre-screening display */
   If &nJobsAppliedForPass > 0 Then
      HRS_JO_WRK.HRS_PRESCRN_TITLE.Value = MsgGetText(18178, 1133, "message not found", &nJobsAppliedForPass);
   Else
      HRS_JO_WRK.HRS_PRESCRN_TITLE.Value = "";
   End-If;
   
   If &nJobsAppliedForFail > 0 Then
      If HRS_JO_WRK.HRS_PRESCRN_TITLE.Value <> "" And
            HRS_JO_WRK.HRS_PRESCRN_TITLE.Value <> " " Then
         HRS_JO_WRK.HRS_PRESCRN_TITLE.Value = HRS_JO_WRK.HRS_PRESCRN_TITLE.Value | " " | MsgGetText(18178, 1134, "message not found", &nJobsAppliedForFail);
      Else
         HRS_JO_WRK.HRS_PRESCRN_TITLE.Value = MsgGetText(18178, 1134, "message not found", &nJobsAppliedForFail);
      End-If;
   End-If;
   
   If HRS_JO_WRK.HRS_PRESCRN_TITLE.Value <> "" And
         HRS_JO_WRK.HRS_PRESCRN_TITLE.Value <> " " Then
      HRS_JO_WRK.HRS_PSCR_TITLE_GB.Visible = True;
   Else
      HRS_JO_WRK.HRS_PSCR_TITLE_GB.Visible = False;
   End-If;
   
   HRS_JO_WRK.HRS_JO_PSCR_GRPB.Visible = False;
   HRS_JO_WRK.HRS_JO_PSCR_GRPB2.Visible = False;
   
   /* handle passed pre-screening jobs */
   For &i = 1 To &rsAppRcmntPass.ActiveRowCount
      If &rsAppRcmntPass(&i).HRS_PSCRN_PASS.HRS_JOB_OPENING_ID.Value <> 0 Then
         &rsAppRcmntPass(&i).HRS_JO_I.POSTING_TITLE.Value = &controller.getPostingTitle(&rsAppRcmntPass(&i).HRS_PSCRN_PASS.HRS_JOB_OPENING_ID.Value);
         
         &rs_JOPrScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &rsAppRcmntPass(&i).HRS_PSCRN_PASS.HRS_JOB_OPENING_ID.Value);
         /* Get Text ID from screening level */
         &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
         &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SEQ.Value;
         &boo_found = &rec_JOScrLevel.SelectByKey();
         
         If &boo_found Then
            &str_PassMsgTxtCatID = &rec_JOScrLevel.HRS_PASS_TEXT_ID.Value;
            &rs_AppJOPreScreen.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_PROFILE_SEQ = :2 AND HRS_JOB_OPENING_ID = :3", &nbr_PersonId, &nbr_ProfileSeq, &rsAppRcmntPass(&i).HRS_PSCRN_PASS.HRS_JOB_OPENING_ID.Value);
            &str_ScrRsltsTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_PassMsgTxtCatID, String(&nbr_SiteId));
         Else
            &str_ScrRsltsTxtCat = MsgGetText(18178, 1201, "You are automatically eligible for this job as no prequalification questions existed.");
         End-If;
         
         If &c_bIsFluidMode Then
            HRS_CE_WRK.HRS_CLOSE_BTN.Visible = False;
         Else
            HRS_JO_WRK.HRS_PSCRN_CNTNU_PB.Label = MsgGetText(18032, 158, "Continue");
         End-If;
         
         If &rsAppRcmntPass.ActiveRowCount > 1 Then
            HRS_JO_WRK.HRS_PRESCRN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_PASSS", String(&nbr_SiteId));
         Else
            HRS_JO_WRK.HRS_PRESCRN_MSG.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_PASS", String(&nbr_SiteId));
         End-If;
         
         If &c_bIsFluidMode Then
            HRS_JO_WRK.HRS_PRESCRN_IMG.Value = Image.PS_SUCCESS_L_FL;
         Else
            HRS_JO_WRK.HRS_PRESCRN_IMG.Value = Image.PS_CONFIRM_CHECK_GREEN_ICN;
         End-If;
         
         HRS_JO_WRK.HRS_JO_PSCR_GRPB.Visible = True;
         If &iFirst = 0 Then
            &iFirst = &i;
         End-If;
         
         If All(&str_ScrRsltsTxtCat) Then
            &rsAppRcmntPass(&i).HRS_JO_WRK.DESCRLONG.Visible = True;
            &rsAppRcmntPass(&i).HRS_JO_WRK.DESCRLONG.Value = &str_ScrRsltsTxtCat;
            
            If &i > &iFirst Then
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = False;
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_PRESCRN_BTN.LabelImage = Image.PS_EXPAND_ICN;
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_PRESCRN_BTN.HoverText = MsgGetText(126, 53, "Message not found.") | " " | &rsAppRcmntPass(&i).HRS_JO_I.POSTING_TITLE.Value;
            Else
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_JO_IND_GRPB.Visible = True;
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_PRESCRN_BTN.LabelImage = Image.PS_COLLAPSE_ICN;
               &rsAppRcmntPass(&i).HRS_JO_WRK.HRS_PRESCRN_BTN.HoverText = MsgGetText(126, 54, "Message not found.") | " " | &rsAppRcmntPass(&i).HRS_JO_I.POSTING_TITLE.Value;
            End-If;
         End-If;
      End-If;
   End-For;
   
   /* handle failed pre-screening jobs */
   &str_ScrRsltsTxtCat = "";
   For &i = 1 To &rsAppRcmntFail.ActiveRowCount
      If &rsAppRcmntFail(&i).HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID.Value <> 0 Then
         &rsAppRcmntFail(&i).HRS_JO_I.POSTING_TITLE.Value = &controller.getPostingTitle(&rsAppRcmntFail(&i).HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID.Value);
         
         &rs_JOPrScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &rsAppRcmntFail(&i).HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID.Value);
         /* Get Text ID from screening level */
         &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
         &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SEQ.Value;
         &boo_found = &rec_JOScrLevel.SelectByKey();
         
         If &boo_found Then
            &str_FailMsgTxtCatID = &rec_JOScrLevel.HRS_FAIL_TEXT_ID.Value;
            &rs_AppJOPreScreen.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_PROFILE_SEQ = :2 AND HRS_JOB_OPENING_ID = :3", &nbr_PersonId, &nbr_ProfileSeq, &rsAppRcmntFail(&i).HRS_PSCRN_FAIL.HRS_JOB_OPENING_ID.Value);
            &str_ScrRsltsTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_FailMsgTxtCatID, String(&nbr_SiteId));
            REM HRS_CE_TERMS_AG.HRS_CONTINUE_BTN.Label = MsgGetText(124, 276, "Ok");
            If &nJobsAppliedForPass = 0 Then
               If &c_bIsFluidMode Then
                  HRS_CE_WRK.HRS_CONTINUE_PB.Visible = False;
               Else
                  HRS_JO_WRK.HRS_PSCRN_CNTNU_PB.Label = MsgGetText(124, 326, "Close");
               End-If;
            End-If;
            
            If &rsAppRcmntFail.ActiveRowCount > 1 Then
               HRS_JO_WRK.HRS_PRESCRN_MSG2.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_FAILS", String(&nbr_SiteId));
            Else
               HRS_JO_WRK.HRS_PRESCRN_MSG2.Value = &obj_c_myCatalog.GetCandTextSimple("HRAM_CE_PREQ_FAIL", String(&nbr_SiteId));
            End-If;
            
            If &c_bIsFluidMode Then
               HRS_JO_WRK.HRS_PRESCRN_IMG2.Value = Image.PS_NOT_ELIGIBLE_S_FL;
            Else
               HRS_JO_WRK.HRS_PRESCRN_IMG2.Value = Image.PS_CONFIRM_X_RED_ICN;
            End-If;
            
            HRS_JO_WRK.HRS_JO_PSCR_GRPB2.Visible = True;
            If &iFirst = 0 Then
               &iFirst = &i;
            End-If;
            
            If All(&str_ScrRsltsTxtCat) Then
               &rsAppRcmntFail(&i).HRS_JO_WRK.DESCRLONG.Visible = True;
               &rsAppRcmntFail(&i).HRS_JO_WRK.DESCRLONG.Value = &str_ScrRsltsTxtCat;
               
               If &i > &iFirst Then
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_JO_IND_GRPB2.Visible = False;
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_PRESCRN_BTN2.LabelImage = Image.PS_EXPAND_ICN;
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_PRESCRN_BTN2.HoverText = MsgGetText(126, 53, "Message not found.") | " " | &rsAppRcmntFail(&i).HRS_JO_I.POSTING_TITLE.Value;
               Else
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_JO_IND_GRPB2.Visible = True;
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_PRESCRN_BTN2.LabelImage = Image.PS_COLLAPSE_ICN;
                  &rsAppRcmntFail(&i).HRS_JO_WRK.HRS_PRESCRN_BTN2.HoverText = MsgGetText(126, 54, "Message not found.") | " " | &rsAppRcmntFail(&i).HRS_JO_I.POSTING_TITLE.Value;
               End-If;
            End-If;
         End-If;
      End-If;
   End-For;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatJOPreScreeningResults();
   Else
      HRS_JO_WRK.HRS_PSCRN_CNTNU_PB.Visible = True;
   End-If;
end-method;

/* This will return a message if applicant is eligible to apply to the JO selectec */
method ShowIfEligibleToApply
   /+ &nbr_Person_Id as Number, +/
   /+ &nbr_ProfileSeq as Number, +/
   /+ &nbr_JO_Id as Number +/
   /+ Returns String +/
   
   Local Rowset &rs_AppJOPreScreen;
   Local number &nbr_ResTotal, &i;
   Local boolean &bol_ResVal;
   Local string &str_Return_Msg;
   Local string &str_Scr_Status;
   
   SQLExec("SELECT HRS_SCR_STATUS FROM PS_HRS_APP_JOPSCRN WHERE HRS_PERSON_ID = :1 AND HRS_JOB_OPENING_ID = :2 AND HRS_PROFILE_SEQ = (SELECT MAX(A.HRS_PROFILE_SEQ) FROM PS_HRS_APP_JOPSCRN A WHERE A.HRS_JOB_OPENING_ID = :2 AND A.HRS_PERSON_ID = :1)", &nbr_Person_Id, &nbr_JO_Id, &str_Scr_Status);
   
   If All(&str_Scr_Status) Then
      If &str_Scr_Status = "1" Then
         &str_Return_Msg = MsgGetText(18032, 1531, "");
      Else
         &str_Return_Msg = MsgGetText(18032, 1532, "");
      End-If;
   Else
      &str_Return_Msg = " ";
   End-If;
   
   Return &str_Return_Msg;
end-method;

method hasNoApplAddItems
   /+ &aJPMsections as Array of String +/
   /+ Returns Boolean +/
   Local array of string &ary_tempSectionName;
   Local string &str_tempSectionName, &str_ApplAddItems;
   Local number &nbr_counter1, &nbr_counter2, &aJPMsections_index;
   Local boolean &ret_value;
   
   &ret_value = False;
   &aJPMsections_index = 0;
   
   If &asection <> Null Then
      For &nbr_counter1 = 1 To &asection.Len
         &ary_tempSectionName = &asection [&nbr_counter1];
         /* The first element is the resume "page number" - sections start at 2nd element */
         For &nbr_counter2 = 2 To &ary_tempSectionName.Len;
            &str_tempSectionName = &ary_tempSectionName [&nbr_counter2];
            
            Evaluate &str_tempSectionName
            When = "PRF"
            When = "FPR"
            When = "PRI"
            When = "TRA"
            When = "WRK"
            When = "CNN"
            When = "CNA"
            When = "CNE"
            When = "CNP"
            When = "RFR"
            When = "PER"
            When = "QUE"
            When = "REF"
            When = "RES"
            When = "REA"
            When = "REC"
               
            When-Other
               
               /* get 'Is Add Items' allowed flag */
               If &controller.applicantCanAddItems(&str_tempSectionName) Then
                  &str_ApplAddItems = "Y";
               Else
                  &str_ApplAddItems = "N";
               End-If;
               
               If &str_ApplAddItems <> "Y" Then
                  &aJPMsections.Push(&str_tempSectionName);
                  
                  &ret_value = True;
               End-If;
            End-Evaluate;
         End-For;
      End-For;
   End-If;
   
   Return &ret_value;
end-method;

method formatLocation
   Local Row &rowProfile;
   Local Record &recProfile;
   Local number &nbr_SiteId, &i;
   Local string &strBU, &strSetIdList;
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   &rowProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1);
   &recProfile = &rowProfile.HRS_APP_PROFILE;
   
   /* Get Business Unit from the Job Opening being applied for, if there is one. Otherwise use the default SetId from the Site, or the operator default. */
   Local string &PrevBusUnit = &recProfile.BUSINESS_UNIT.Value;
   Local Rowset &rsRcmnt = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   If All(GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I)(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then
      For &i = 1 To &rsRcmnt.ActiveRowCount
         SQLExec("Select BUSINESS_UNIT from PS_HRS_JOB_OPENING where HRS_JOB_OPENING_ID = :1", GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I)(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value, &strBU);
         
         If &i = 1 Then
            &strSetIdList = "'" | GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "") | "'";
         Else
            &strSetIdList = &strSetIdList | ", '" | GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "") | "'";
         End-If;
      End-For;
   Else /* applying without a job */
      SQLExec("Select B.BUSINESS_UNIT From PS_HRS_SITE_ID S, PS_BUS_UNIT_TBL_HR B, PS_SET_CNTRL_GROUP G Where S.HRS_SITE_ID = :1 and S.SETID <> ' ' and G.REC_GROUP_ID = 'RS_LOC' and G.SETID = S.SETID and G.SETCNTRLVALUE = B.BUSINESS_UNIT and B.ACTIVE_INACTIVE = 'A'", &nbr_SiteId, &strBU);
      
      If None(&strBU) Then
         SQLExec("Select BUSINESS_UNIT from PS_OPR_DEF_TBL_HR where OPRCLASS = :1", %OperatorClass, &strBU);
      End-If;
      
      If All(&strBU) Then
         &strSetIdList = "'" | GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "") | "'";
         
         If None(&recProfile.BUSINESS_UNIT.Value) Then
            &recProfile.BUSINESS_UNIT.Value = &strBU;
         End-If;
      End-If;
   End-If;
   
   /* If Business Unit is different to the old one, and has a different SetId associated, clear the desired location fields, as they are invalid. */
   If All(&PrevBusUnit) And
         &PrevBusUnit <> &recProfile.BUSINESS_UNIT.Value And
         GetSetId(Field.BUSINESS_UNIT, &PrevBusUnit, Record.HRS_LOCATION, "") <> GetSetId(Field.BUSINESS_UNIT, &recProfile.BUSINESS_UNIT.Value, Record.HRS_LOCATION, "") Then
      &recProfile.HRS_DES_LOC1.SetDefault();
      &recProfile.HRS_DES_LOC2.SetDefault();
   End-If;
   
   If All(&strSetIdList) Then
      &recProfile.HRS_DES_LOC1.SqlText = "Select * from PS_HRS_RECR_LOC_I3 where SETID in (" | &strSetIdList | ")";
      &recProfile.HRS_DES_LOC2.SqlText = "Select * from PS_HRS_RECR_LOC_I3 where SETID in (" | &strSetIdList | ")";
   End-If;
   
   %This.handleLocDropDownAndPrompt(&rowProfile.HRS_CE_WRK.HRS_DES_LOC1, &recProfile.HRS_DES_LOC1, &rowProfile.HRS_GEO_LOC_I.DESCR, "HRS_LOCATION_ID", "DESCR", &strSetIdList, "1");
   %This.handleLocDropDownAndPrompt(&rowProfile.HRS_CE_WRK.HRS_DES_LOC2, &recProfile.HRS_DES_LOC2, &rowProfile.HRS_GEO_LOC_I2.DESCR, "HRS_LOCATION_ID", "DESCR", &strSetIdList, "2");
end-method;

method handleLocDropDownAndPrompt
   /+ &fld_pDropDown as Field, +/
   /+ &fld_pPrompt as Field, +/
   /+ &fld_promptRelatedField as Field, +/
   /+ &str_pKeyFieldName as String, +/
   /+ &str_pValueFieldName as String, +/
   /+ &str_pSetIDList as String, +/
   /+ &str_WhichField as String +/
   Local number &nbr_lNoOfRows;
   Local Rowset &rs_lResults;
   Local Record &rec_lTemp;
   Local number &i;
   Local string &str_lWhereClause;
   Local string &FieldLabel;
   Local number &nMsgSet = 18178;
   
   /* Fluid messages are in a different message set catalog */
   If &c_bIsFluidMode Then
      &nMsgSet = 18172;
   End-If;
   
   If &str_WhichField = "1" Then
      &FieldLabel = MsgGetText(&nMsgSet, 821, "my fist choice");
   Else
      &FieldLabel = MsgGetText(&nMsgSet, 822, "my second choice");
   End-If;
   
   If All(&str_pSetIDList) Then
      &str_lWhereClause = "where FILL.SETID in (" | &str_pSetIDList | ")";
      SQLExec("SELECT COUNT(*) FROM PS_HRS_RECR_LOC_I FILL " | &str_lWhereClause, &nbr_lNoOfRows);
   End-If;
   
   If &nbr_lNoOfRows <= 75 Then
      &rs_lResults = CreateRowset(Record.HRS_RECR_LOC_I);
      
      If All(&str_lWhereClause) Then
         &nbr_lNoOfRows = &rs_lResults.Fill(&str_lWhereClause);
      End-If;
      
      &fld_pDropDown.ClearDropDownList();
      
      For &i = 1 To &nbr_lNoOfRows
         &rec_lTemp = &rs_lResults(&i).GetRecord(Record.HRS_RECR_LOC_I);
         &fld_pDropDown.AddDropDownItem(String(&rec_lTemp.GetField(@("Field." | &str_pKeyFieldName)).Value), String(&rec_lTemp.GetField(@("Field." | &str_pValueFieldName)).Value));
      End-For;
      
      &fld_pDropDown.Visible = True;
      &fld_pDropDown.Label = &FieldLabel;
      &fld_promptRelatedField.Visible = False;
   Else
      &fld_pDropDown.Visible = False;
      &fld_promptRelatedField.Visible = True;
      &fld_promptRelatedField.Label = &FieldLabel;
   End-If;
end-method;


method resetLocation
   Local Rowset &rsRcmnt, &rs_AppProfile;
   Local Row &rowProfile;
   Local Record &recProfile;
   Local boolean &delLocation;
   Local string &strBU, &setid, &setidToDel, &setidLoc1, &setidLoc2;
   Local number &i, &j, &nbr_SiteId;
   Local array of string &setIdList;
   
   &rsRcmnt = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rowProfile = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1);
   &recProfile = &rowProfile.HRS_APP_PROFILE;
   &setIdList = CreateArrayRept(&setid, 0);
   
   For &i = 1 To &rsRcmnt.ActiveRowCount
      SQLExec("Select BUSINESS_UNIT from PS_HRS_JOB_OPENING where HRS_JOB_OPENING_ID = :1", GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I)(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value, &strBU);
      
      If CurrentRowNumber(CurrentLevelNumber()) <> &i Then
         &setid = GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "");
         &setIdList.Push(&setid);
      Else
         &setidToDel = GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "");
      End-If;
   End-For;
   
   If &setIdList.Find(&setidToDel) = 0 Then
      &setid = " ";
      
      For &j = 1 To &setIdList.Len
         If &j = 1 Then
            &setid = "'" | &setIdList.Get(&j) | "'";
         Else
            &setid = &setid | ",'" | &setIdList.Get(&j) | "'";
         End-If;
      End-For;
      
      If &setIdList.Len = 0 Then
         &nbr_SiteId = &applicant.HRS_SITE_ID;
         SQLExec("Select B.BUSINESS_UNIT From PS_HRS_SITE_ID S, PS_BUS_UNIT_TBL_HR B, PS_SET_CNTRL_GROUP G Where S.HRS_SITE_ID = :1 and S.SETID <> ' ' and G.REC_GROUP_ID = 'RS_LOC' and G.SETID = S.SETID and B.BUSINESS_UNIT = G.SETCNTRLVALUE and B.ACTIVE_INACTIVE = 'A'", &nbr_SiteId, &strBU);
         
         If &strBU = "" Then
            SQLExec("Select BUSINESS_UNIT from PS_OPR_DEF_TBL_HR where OPRCLASS = :1", %OperatorClass, &strBU);
         End-If;
         
         &setid = "'" | GetSetId(Field.BUSINESS_UNIT, &strBU, Record.HRS_LOC_I, "") | "'";
      End-If;
      
      &recProfile.HRS_DES_LOC1.SqlText = "Select * from PS_HRS_RECR_LOC_I3 where SETID in (" | &setid | ")";
      &recProfile.HRS_DES_LOC2.SqlText = "Select * from PS_HRS_RECR_LOC_I3 where SETID in (" | &setid | ")";
      
      SQLExec("Select SETID from PS_HRS_LOC_I where HRS_LOCATION_ID = :1", &recProfile.HRS_DES_LOC1.Value, &setidLoc1);
      SQLExec("Select SETID from PS_HRS_LOC_I where HRS_LOCATION_ID = :1", &recProfile.HRS_DES_LOC2.Value, &setidLoc2);
      
      If &setidLoc1 = &setidToDel Then
         &rowProfile.HRS_GEO_LOC_I.DESCR.Value = "";
         &rowProfile.HRS_CE_WRK.HRS_DES_LOC1.Value = "";
      End-If;
      
      If &setidLoc2 = &setidToDel Then
         &rowProfile.HRS_GEO_LOC_I2.DESCR.Value = "";
         &rowProfile.HRS_CE_WRK.HRS_DES_LOC2.Value = "";
      End-If;
      
      %This.handleLocDropDownAndPrompt(&rowProfile.HRS_CE_WRK.HRS_DES_LOC1, &recProfile.HRS_DES_LOC1, &rowProfile.HRS_GEO_LOC_I.DESCR, "HRS_LOCATION_ID", "DESCR", &setid, "1");
      %This.handleLocDropDownAndPrompt(&rowProfile.HRS_CE_WRK.HRS_DES_LOC2, &recProfile.HRS_DES_LOC2, &rowProfile.HRS_GEO_LOC_I2.DESCR, "HRS_LOCATION_ID", "DESCR", &setid, "2");
   End-If;
end-method;

method resetQuestionairre
   /+ &aJobOpenings as Array of Number, +/
   /+ &personId as Number, +/
   /+ &profileSeq as Number +/
   
   Local array of string &aString;
   Local boolean &exists;
   Local number &j, &k, &i;
   Local number &count;
   Local number &inscount;
   Local number &lev1count;
   Local Rowset &rsAppAnswers, &rsReqQuestions, &rsReqAnswers, &rsAnswers;
   Local string &jobNumberList;
   
   &rsAppAnswers = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_APP_ANSWER);
   &rsReqQuestions = GetLevel0()(1).GetRowset(Scroll.HRS_JO_QST_NO_I);
   &rsAppAnswers.Flush();
   &rsReqQuestions.Flush();
   
   &aString = CreateArrayRept("", 0);
   
   For &i = 1 To &rsAppAnswers.ActiveRowCount
      &aString.Push(&rsAppAnswers(&i).HRS_APP_ANSWER.HRS_JOB_OPENING_ID.Value);
   End-For;
   
   For &j = 1 To &aJobOpenings.Len
      If &aString.Find(&aJobOpenings [&j]) = 0 Then
         &jobNumberList = &jobNumberList | &aJobOpenings [&j];
         
         If &j <> &aJobOpenings.Len Then
            &jobNumberList = &jobNumberList | ",";
         End-If;
      End-If;
   End-For;
   
   If All(&jobNumberList) Then
      &rsAppAnswers.SelectNew(Record.HRS_JO_QST_NO_I, "WHERE HRS_JOB_OPENING_ID IN (" | &jobNumberList | ") AND HRS_QSTN_ID NOT IN (SELECT A.HRS_QSTN_ID FROM PS_HRS_APP_ANSWER A WHERE A.HRS_PERSON_ID = :1 AND A.HRS_PROFILE_SEQ = :2)", &personId, &profileSeq);
   End-If;
   
   &exists = False;
   &inscount = 0;
   For &count = 1 To &rsAppAnswers.ActiveRowCount
      For &lev1count = 1 To &rsReqQuestions.ActiveRowCount
         If &rsReqQuestions(&lev1count).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value Then
            &exists = True;
         End-If;
      End-For;
      
      If Not &exists And
            All(&rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value) Then
         &inscount = &inscount + 1;
         If &inscount = 1 And
               &rsReqQuestions(1).IsNew Then
         Else
            &rsReqQuestions.InsertRow(&inscount - 1);
         End-If;
         &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_QSTN_ID.Value;
         &rsReqAnswers = &rsReqQuestions(&inscount).GetRowset(Scroll.HRS_CE_JO_ANS_I);
         &rsReqAnswers.Flush();
         rem &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
         &rsReqAnswers.Select(Record.HRS_QSTN_ANS_I, "where HRS_QSTN_ID = :1 order by HRS_ANS_ORDER_NUM, HRS_ANSWER_ID", &rsReqQuestions(&inscount).HRS_JO_QST_NO_I.HRS_QSTN_ID.Value);
         For &k = 1 To &rsReqAnswers.ActiveRowCount
            If &rsReqAnswers(&k).HRS_CE_JO_ANS_I.HRS_ANSWER_ID.Value = &rsAppAnswers(&count).HRS_APP_ANSWER.HRS_ANSWER_ID.Value Then
               &rsReqAnswers(&k).Selected = True;
            Else
               &rsReqAnswers(&k).Selected = False;
            End-If;
            &rsReqAnswers(&k).HRS_CE_WRK.CORRECT_ANSWER.Value = "N";
         End-For;
      Else
         &exists = False;
      End-If;
   End-For;
end-method;

method hideQuestionnaireSections
   Local array of string &aSectionName = &asection [&thisIndex];
   Local integer &counter;
   Local string &sSectionName;
   Local boolean &bQuesOnCurrIndex = False;
   
   /* Only hide the questionnaire sections if not displayed in current index */
   For &counter = 2 To &aSectionName.Len
      &sSectionName = &aSectionName [&counter];
      
      If &sSectionName = "QUE" Then
         &bQuesOnCurrIndex = True;
         Break;
      End-If;
   End-For;
   
   If Not &bQuesOnCurrIndex Then
      HRS_CE_WRK.GRPB_QUESTIONAIRRE.Visible = False;
      HRS_CE_WRK.HRS_SEC_INFO_QSTN.Visible = False;
      /*HRS_CE_WRK.GRPB_OPEN_ENDED.Visible = False;*/
   End-If;
end-method;

method getPageCount
   /+ Returns Integer +/
   Return &asection.Len;
end-method;

method getSectionPageNumber
   /+ &strSection as String +/
   /+ Returns Integer +/
   Local array of string &astrSections;
   Local integer &intPage, &intSection;
   Local boolean &bFound;
   
   &bFound = False;
   
   For &intPage = 1 To &asection.Len
      &astrSections = &asection [&intPage];
      
      For &intSection = 1 To &astrSections.Len
         If Not %This.isPageHidden(&intPage) And
               &astrSections [&intSection] = &strSection Then
            &bFound = True;
            Break;
         End-If;
      End-For;
      
      If &bFound Then
         Break;
      End-If;
   End-For;
   
   If &bFound Then
      Return &intPage;
   Else
      Return 0;
   End-If;
end-method;

method sectionExists
   /+ &strSection as String +/
   /+ Returns Boolean +/
   Return (%This.getSectionPageNumber(&strSection) > 0);
end-method;

method getPageNumberStep
   /+ &intPageNumber as Integer +/
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &arrObjSteps;
   Local EOTL_WIZARD:StepDefn &objStep;
   Local integer &i;
   
   &arrObjSteps = &c_objWizard.GetProcessDefn().GetFlatProcessTree();
   
   For &i = 1 To &arrObjSteps.Len
      &objStep = &arrObjSteps [&i];
      
      If &objStep.AppData = &intPageNumber Then
         Return &objStep;
      End-If;
   End-For;
   
   Return Null;
end-method;

method getCurrentPageNumber
   /+ Returns Integer +/
   Return %This.getStepPageNumber(%This.getCurrentStep().TemplateId);
end-method;

method getStepPageNumber
   /+ &strTemplateID as String +/
   /+ Returns Integer +/
   Return %This.getStep(&strTemplateID).AppData;
end-method;

method getStepByIndex
   /+ &intIndex as Integer +/
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   
   &aobjSteps = %This.getAllSteps();
   
   If &aobjSteps = Null Or
         &aobjSteps.Len = 0 Or
         &aobjSteps.Len < &intIndex Then
      Return Null;
   Else
      Return &aobjSteps [&intIndex];
   End-If;
end-method;

method goToStepBySection
   /+ &strSection as String +/
   %This.goToStepByPageNumber(%This.getSectionPageNumber(&strSection));
end-method;

method goToStepByPageNumber
   /+ &intPageNumber as Integer +/
   If &c_bIsFluidMode Then
      &objFluidPageLayout.goToStep("STEP-" | Substitute(%This.getPageNumberStep(&intPageNumber).TemplateId, "@@", "__"));
   Else
      &c_objWizard.DoGotoStep(%This.getPageNumberStep(&intPageNumber), False);
   End-If;
end-method;

method goToStepByTemplateID
   /+ &strStepTemplateID as String +/
   If &c_bIsFluidMode Then
      %This.getFluidPageLayout().goToStep("STEP-" | Substitute(&strStepTemplateID, "@@", "__"));
   Else
      &c_objWizard.DoGotoStep(&c_objWizard.GetProcessDefn().GetStepsByTemplateId(&strStepTemplateID, True)[1], True);
   End-If;
end-method;

method stepContainsSection
   /+ &objStep as EOTL_WIZARD:StepDefn, +/
   /+ &strSection as String +/
   /+ Returns Boolean +/
   Local integer &intPageNumber = %This.getSectionPageNumber(&strSection);
   
   If &intPageNumber <= 0 Then
      Return False;
   End-If;
   
   Local EOTL_WIZARD:StepDefn &objSectionStep = %This.getPageNumberStep(&intPageNumber);
   
   If &objSectionStep = Null Then
      Return False;
   End-If;
   
   Return (&objStep.TemplateId = &objSectionStep.TemplateId);
end-method;

method stepContainsAnySection
   /+ &objStep as EOTL_WIZARD:StepDefn, +/
   /+ &astrSections as Array of String +/
   /+ Returns Boolean +/
   Local array of string &astrStepSections;
   Local integer &i;
   Local boolean &bFound;
   
   &astrStepSections = %This.getStepSections(&objStep.TemplateId);
   
   If &astrStepSections <> Null And
         &astrStepSections.Len > 0 Then
      &bFound = False;
      
      For &i = 1 To &astrSections.Len
         If &astrStepSections.Find(&astrSections [&i]) > 0 Then
            &bFound = True;
            Break;
         End-If;
      End-For;
      
      Return &bFound;
   Else
      Return False;
   End-If;
end-method;

method currentStepContainsSection
   /+ &strSection as String +/
   /+ Returns Boolean +/
   Return %This.stepContainsSection(%This.getCurrentStep(), &strSection);
end-method;

method getStepSections
   /+ &strTemplateID as String +/
   /+ Returns Array of String +/
   Local array of string &astrSections, &astrSectionsFiltered;
   Local integer &intPageNumber, &i;
   
   &astrSectionsFiltered = CreateArrayRept("", 0);
   
   &intPageNumber = %This.getStepPageNumber(&strTemplateID);
   
   If &intPageNumber <= 0 Then
      Return &astrSectionsFiltered;
   End-If;
   
   &astrSections = &asection [&intPageNumber];
   
   For &i = 2 To &astrSections.Len
      &astrSectionsFiltered.Push(&astrSections [&i]);
   End-For;
   
   Return &astrSectionsFiltered;
end-method;

method getCurrentStepSections
   /+ Returns Array of String +/
   Return %This.getStepSections(%This.getCurrentStep().TemplateId);
end-method;

method getCurrentStepSectionCount
   /+ Returns Integer +/
   Local array of string &astrSections;
   
   &astrSections = %This.getCurrentStepSections();
   
   If &astrSections = Null Then
      Return 0;
   Else
      Return &astrSections.Len;
   End-If;
end-method;

method getAllSections
   /+ Returns Array of String +/
   Local array of string &astrAllsections, &astrSections;
   Local integer &i, &j;
   
   &astrAllsections = CreateArrayRept("", 0);
   
   For &i = 1 To &asection.Len - 1 /* don't include Review/Submit */
      &astrSections = &asection [&i];
      
      For &j = 2 To &astrSections.Len
         &astrAllsections.Push(&astrSections [&j]);
      End-For;
   End-For;
   
   Return &astrAllsections;
end-method;

method stepExists
   /+ &strStepTemplateID as String +/
   /+ Returns Boolean +/
   Return (&c_objWizard.GetProcessDefn().GetStepsByTemplateId(&strStepTemplateID, True).Len > 0);
end-method;

method getCurrentStep
   /+ Returns EOTL_WIZARD:StepDefn +/
   If &c_bIsFluidMode Then
      Return &objFluidPageLayout.getCurrentWizardStep();
   Else
      Return &c_objWizard.GetProcessDefn().CurrentStep;
   End-If;
end-method;

method getFurthestVisitedStep
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   Local EOTL_WIZARD:ProcessDefn &objProcess;
   Local EOTL_WIZARD:StepDefn &objStep;
   Local integer &i;
   
   &objProcess = &c_objWizard.GetProcessDefn();
   &aobjSteps = &objProcess.GetFlatProcessTree();
   
   For &i = &aobjSteps.Len To 1 Step - 1
      &objStep = &aobjSteps [&i];
      
      If Not &objStep.IsContainer And
            &objStep.Visited Then
         Break;
      End-If;
   End-For;
   
   Return &objStep;
end-method;

method isFurthestVisitedStep
   /+ Returns Boolean +/
   If &c_bIsFluidMode Then
      Return %This.getFluidPageLayout().isFurthestVisitedStep();
   End-If;
   
   Return (%This.getCurrentStep().TemplateId = %This.getFurthestVisitedStep().TemplateId);
end-method;

method isFirstStep
   /+ Returns Boolean +/
   Return (%This.getCurrentStepNumber() = 1);
end-method;

method isSectionRequired
   /+ &strSection as String +/
   /+ Returns Boolean +/
   Local string &strRequired, &strMayAddItems;
   
   SQLExec("select REQUIRED_FLG from PS_HRS_RES_SECTION where HRS_RES_TMPL_ID = :1 and HRS_RES_SEC_NAME12 = :2", &rs_Res_Template(1).HRS_RES_TMPL.HRS_RES_TMPL_ID.Value, &strSection, &strRequired);
   
   Return (&strRequired = "Y" And
      &controller.applicantCanAddItems(&strSection));
end-method;

method getStep
   /+ &strTemplateID as String +/
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   
   &aobjSteps = &c_objWizard.GetProcessDefn().GetStepsByTemplateId(&strTemplateID, True);
   
   If &aobjSteps.Len = 1 Then
      Return &aobjSteps [1];
   Else
      Return Null;
   End-If;
end-method;

method getStepCount
   /+ Returns Integer +/
   Return &c_objWizard.GetProcessDefn().TotalSteps;
end-method;

method formatReviewContactInfo
   Local Rowset &rsPhones;
   Local Record &recAddress;
   Local integer &i;
   
   HRS_REVIEW_WRK.EMAIL_ADDR.Value = GetRowset(Scroll.HRS_APP_EMAIL)(1).HRS_APP_EMAIL.EMAIL_ADDR.Value;
   
   &rsPhones = GetRowset(Scroll.HRS_APP_PHONE);
   
   For &i = 1 To &rsPhones.ActiveRowCount
      If &rsPhones(&i).HRS_APP_PHONE.PREF_PHONE_FLAG.Value = "Y" Then
         HRS_REVIEW_WRK.PHONE.Value = &rsPhones(&i).HRS_APP_PHONE.PHONE.Value;
         HRS_REVIEW_WRK.PHONE.Label = &rsPhones(&i).HRS_APP_PHONE.HRS_PHONE_TYPE.FormattedValue | " " | HRS_REVIEW_WRK.PHONE.GetLongLabel("PHONE2");
         Break;
      End-If;
   End-For;
   
   If None(HRS_REVIEW_WRK.PHONE.Value) Then
      HRS_REVIEW_WRK.PHONE.Label = HRS_REVIEW_WRK.PHONE.GetLongLabel("PHONE2");
   End-If;
   
   &recAddress = &AppAddressRecord;
   
   If None(&recAddress) Then
      &recAddress = GetLevel0()(1).GetRowset(Scroll.HRS_APP_ADDRESS)(1).HRS_APP_ADDRESS;
   End-If;
   
   If None(&recAddress) Or
         None(&recAddress.ADDRESS1.Value) Then
      &recAddress = GetLevel0()(1).HRS_ADDR_WORK;
   End-If;
   
   If All(&recAddress.ADDRESS1.Value) Then
      HRS_REVIEW_WRK.ADDRESSLONG.Value = &recAddress.ADDRESS1.Value | ", " | &recAddress.CITY.Value | ", " | &recAddress.STATE.Value | " " | &recAddress.POSTAL.Value;
   Else
      HRS_REVIEW_WRK.ADDRESSLONG.Value = "";
   End-If;
end-method;

method formatTextCatalogHTML
   /+ &strInput as String +/
   /+ Returns String +/
   Local integer &intLeftAngleBracketPosition, &intrightanglebracketposition;
   Local boolean &bContainsHTML;
   
   &bContainsHTML = False;
   
   &intLeftAngleBracketPosition = Find("<", &strInput);
   
   If &intLeftAngleBracketPosition > 0 Then
      &intrightanglebracketposition = Find(">", &strInput, &intLeftAngleBracketPosition + 1);
      
      If &intrightanglebracketposition > &intLeftAngleBracketPosition Then
         &bContainsHTML = True;
      End-If;
   End-If;
   
   If &bContainsHTML Then
      Return &strInput;
   Else
      Return "<span class=""PAPAGEINSTRUCTIONS"">" | Substitute(EscapeHTML(&strInput), Char(10), "<br>") | "</span>";
   End-If;
end-method;

method formatStartStep
   Local Record &rec_JOScrLevel;
   Local string &strSelfIdent, &str_ExplMsgTxtCat, &str_TermAgreTxtCat, &str_ExplMsgTxtCatID, &strTerms, &strJobIDLabel, &strJobTitleLabel, &strStartHeadingtext; /* 22619949 */
   Local Rowset &rs_JOPrScrVw, &rs_JOScrLevel, &rs_JobsApplied;
   Local Record &rec_AppJOPscrn, &recResumeTemplate;
   Local Field &fldLastDivider;
   Local number &nbr_ProfileSeq, &nbr_SiteId, &j, &i, &nbr_JOId, &nbr_PersonId;
   Local boolean &bPrescreening, &boo_IfApplied, &boo_found, &bAnyPrequalTerms, &bTermsFooterOnPage;
   
   &nbr_SiteId = &applicant.HRS_SITE_ID;
   &bPrescreening = (&gbl_bol_isTherePreScreening Or
      &gbl_bol_isThereJOPreScreening);
   
   If None(&c_recSite) Then
      &c_recSite = CreateRecord(Record.HRS_SITE_ID);
      &c_recSite.HRS_SITE_ID.Value = &nbr_SiteId;
      &c_recSite.SelectByKey();
   End-If;
   
   /* Disability/veteran text for internal applicants */
   
   &strTerms = "";
   
   If &applicant.APP_PER_STATUS = "E" Then
      &strSelfIdent = &c_recSite.HRS_DIS_SELF_IDFY.Value;
      
      If &strSelfIdent = "D" Or
            &strSelfIdent = "V" Or
            &strSelfIdent = "B" Then
         &strTerms = &obj_c_myCatalog.GetCandText(%This.getTextCatalogID("HRAM_CE_DIS_INSTR4"), String(&nbr_SiteId), "", "", "", "", "");
         
         If All(&strTerms) Then
            HRS_START_WRK.HTMLAREA6.Value = %This.formatTextCatalogHTML(&strTerms);
         End-If;
      End-If;
   End-If;
   
   HRS_START_WRK.GROUPBOX5.Visible = All(&strTerms);
   
   /* Administrator-configured text */
   
   &strTerms = "";
   
   If &c_recSite.HRS_SSACT_FLG.Value = "Y" Then
      &strTerms = &obj_c_myCatalog.GetCandTextSimpleWithSubID(%This.getTextCatalogID("HRAM_CE_ADMIN_TXT"), "CG", String(&applicant.HRS_SITE_ID));
      
      If All(&strTerms) Then
         HRS_START_WRK.HTMLAREA1.Value = %This.formatTextCatalogHTML(&strTerms);
      End-If;
   End-If;
   
   HRS_START_WRK.GROUPBOX1.Visible = All(&strTerms);
   
   /* Instructional text */
   
   &strTerms = "";
   /* 22619949 Begin*/
   If Not (&c_bIsFluidMode) Then
      HRS_START_WRK.HTMLAREA7.Visible = False;
   End-If;
   /* 22619949 End*/
   
   If &c_recSite.HRS_SSIT_FLG.Value = "Y" Then
      /* 22619949 Begin*/
      If &bAccessibilityMode And
            Not (&c_bIsFluidMode) Then
         Local EOTL_WIZARD:StepDefn &CurrentStep;
         &CurrentStep = %This.getCurrentStep();
         If All(&CurrentStep) Then
            &strStartHeadingtext = MsgGetText(18178, 658, "Message not found.", String(%This.getCurrentStepNumber()), String(%This.getStepCount()), &CurrentStep.Label);
         End-If;
         
         &strTerms = &obj_c_myCatalog.GetAdminText6Keys("HRAM", "CG", %This.getTextCatalogID("HRAM_CE_INSTR_TXT1"), String(&applicant.HRS_SITE_ID), "", "", "", "", "", &strStartHeadingtext, "", "", "", "");
         
         If All(&strTerms) Then
            HRS_START_WRK.HTMLAREA7.Value = "<legend ><h1 class='PSGROUPBOXLABEL'>" | &obj_c_myCatalog.GetCandTextSimpleWithSubID(%This.getTextCatalogID("HRAM_CE_INS_GBLBL"), "CG", String(&applicant.HRS_SITE_ID)) | "</h1></legend> " | %This.formatTextCatalogHTML(&strTerms);
         End-If;
         HRS_START_WRK.HTMLAREA7.Visible = All(&strTerms);
      Else
         /* 22619949 End*/
         
         &strTerms = &obj_c_myCatalog.GetCandTextSimpleWithSubID(%This.getTextCatalogID("HRAM_CE_INSTR_TXT"), "CG", String(&applicant.HRS_SITE_ID));
         
         If All(&strTerms) Then
            HRS_START_WRK.HTMLAREA2.Value = %This.formatTextCatalogHTML(&strTerms);
         End-If;
         HRS_START_WRK.GROUPBOX2.Visible = All(&strTerms);
      End-If; /* 22619949 */
      
   End-If;
   
   /* Application terms & agreements */
   
   &strTerms = "";
   
   If &c_recSite.HRS_ATAG_FLG.Value = "Y" Then
      &strTerms = &obj_c_myCatalog.GetCandTextSimpleWithSubID(%This.getTextCatalogID("HRAM_CE_APPL_INSTR"), "CG", String(&applicant.HRS_SITE_ID));
      
      If All(&strTerms) Then
         HRS_START_WRK.HTMLAREA4.Value = %This.formatTextCatalogHTML(&strTerms);
      End-If;
   Else
   End-If;
   
   HRS_START_WRK.HRS_START2_GB.Visible = All(&strTerms);
   
   /* Prequalification terms & agreements */
   
   &strTerms = "";
   
   If &bPrescreening And
         &c_recSite.HRS_PTAG_FLG.Value = "Y" Then
      &strTerms = &obj_c_myCatalog.GetCandTextSimpleWithSubID(%This.getTextCatalogID("HRAM_CE_PREQ_INSTR"), "CG", String(&applicant.HRS_SITE_ID));
      
      If All(&strTerms) Then
         HRS_START_WRK.HTMLAREA5.Value = %This.formatTextCatalogHTML(&strTerms);
      End-If;
   End-If;
   
   HRS_START_WRK.HRS_START3_GB.Visible = All(&strTerms);
   
   &bAnyPrequalTerms = False;
   &rs_JobsApplied = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   /* Prequalification notices */
   
   If &bPrescreening Then
      If &rs_JobsApplied.ActiveRowCount = 1 And
            None(&rs_JobsApplied(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then /* applying without a job */
         If &gbl_bol_isTherePreScreening Then
            &recResumeTemplate = CreateRecord(Record.HRS_RES_TMPL);
            &recResumeTemplate.HRS_RES_TMPL_ID.Value = &myTemplate;
            
            If &recResumeTemplate.SelectByKey() Then
               &str_ExplMsgTxtCatID = &recResumeTemplate.HRS_EMSG_TEXT_ID.Value;
               
               If All(&str_ExplMsgTxtCatID) Then
                  &str_ExplMsgTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_ExplMsgTxtCatID, String(&nbr_SiteId));
                  &rs_JobsApplied(1).HRS_WRK.HRS_JOB_TITLE_TEXT.Visible = False;
                  &rs_JobsApplied(1).HRS_WRK.HRS_JOB_ID_TEXT.Visible = False;
                  &rs_JobsApplied(1).Visible = True;
                  &rs_JobsApplied(1).HRS_WRK.DESCRLONG.Value = %This.formatTextCatalogHTML(&str_ExplMsgTxtCat);
                  &bAnyPrequalTerms = True;
                  
                  If &c_bIsFluidMode Then
                     &rs_JobsApplied(1).HRS_JO_I.POSTING_TITLE.Visible = False;
                     &rs_JobsApplied(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Visible = False;
                  End-If;
               End-If;
            End-If;
         End-If;
         
         If None(&rs_JobsApplied(1).HRS_WRK.DESCRLONG.Value) Then
            &rs_JobsApplied(1).Visible = False;
         End-If;
      Else /* applying with a job */
         &rs_JOPrScrVw = CreateRowset(Record.HRS_JO_PRSCR_VW);
         &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
         &rec_AppJOPscrn = CreateRecord(Record.HRS_APP_JOPSCRN);
         
         For &i = &rs_JobsApplied.ActiveRowCount To 1 Step - 1
            /* Let's see if the JO has pre-screening */
            &nbr_JOId = &rs_JobsApplied.GetRow(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
            &rs_JOPrScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &nbr_JOId);
            &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
            &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SEQ.Value;
            &boo_found = &rec_JOScrLevel.SelectByKey();
            
            If &boo_found Then
               /* Check and See if the applicant has applied and passed the pre-screening of the JO being applied */
               &boo_IfApplied = True;
               &rec_AppJOPscrn.HRS_PERSON_ID.Value = &rs_JobsApplied.GetRow(&i).HRS_APP_RCMNT_I.HRS_PERSON_ID.Value;
               &nbr_ProfileSeq = &rs_JobsApplied.GetRow(&i).HRS_APP_RCMNT_I.HRS_PROFILE_SEQ.Value;
               
               If &nbr_ProfileSeq = 0 Then
                  SQLExec("SELECT MAX(HRS_PROFILE_SEQ) FROM PS_HRS_APP_PROFILE WHERE HRS_PERSON_ID=:1", &nbr_PersonId, &nbr_ProfileSeq);
                  /* If profile seq is still zero, this will only happen if applicant did not */
                  /* save or submit application but passed through pre-screening. */
                  If &nbr_ProfileSeq = 0 Then
                     &nbr_ProfileSeq = 1;
                  End-If;
               End-If;
               
               &rec_AppJOPscrn.HRS_PROFILE_SEQ.Value = &nbr_ProfileSeq;
               &rec_AppJOPscrn.HRS_JO_SCR_SUMM_ID.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
               &rec_AppJOPscrn.HRS_JO_SCR_SEQ.Value = &rs_JOPrScrVw(1).HRS_JO_PRSCR_VW.HRS_JO_SCR_SEQ.Value;
               &boo_IfApplied = &rec_AppJOPscrn.SelectByKey();
               
               &str_ExplMsgTxtCatID = &rec_JOScrLevel.HRS_EMSG_TEXT_ID.Value;
               &str_ExplMsgTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_ExplMsgTxtCatID, String(&nbr_SiteId));
               
               If All(&str_ExplMsgTxtCat) Then
                  &rs_JobsApplied(&i).Visible = True;
                  
                  If None(&strJobIDLabel) Then
                     &strJobIDLabel = &rs_JobsApplied(&i).HRS_WRK.HRS_JOB_ID_TEXT.GetLongLabel("JOB_ID");
                     &strJobTitleLabel = &rs_JobsApplied(&i).HRS_WRK.HRS_JOB_TITLE_TEXT.GetLongLabel("JOB_TITLE");
                  End-If;
                  
                  &rs_JobsApplied(&i).HRS_WRK.HRS_JOB_ID_TEXT.Value = &strJobIDLabel | ": " | &rs_JobsApplied(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
                  &rs_JobsApplied(&i).HRS_WRK.HRS_JOB_TITLE_TEXT.Value = &strJobTitleLabel | ": " | &rs_JobsApplied(&i).HRS_JO_I.POSTING_TITLE.Value;
                  
                  &rs_JobsApplied(&i).HRS_WRK.DESCRLONG.Value = %This.formatTextCatalogHTML(&str_ExplMsgTxtCat);
                  &bAnyPrequalTerms = True;
               Else
                  &rs_JobsApplied(&i).Visible = False;
               End-If;
            Else /* &boo_found If JO has no pre-screening, do not display the JO's group box */
               &rs_JobsApplied(&i).Visible = False;
            End-If;
         End-For;
      End-If;
   End-If;
   
   If &bAnyPrequalTerms Then
      &rs_JobsApplied.Sort(HRS_WRK.DESCRLONG, "A");
      
      &fldLastDivider = Null;
      
      For &i = 1 To &rs_JobsApplied.ActiveRowCount
         If &rs_JobsApplied(&i).Visible Then
            &rs_JobsApplied(&i).HRS_WRK.DESCRLONG.Visible = True;
            &strTerms = &rs_JobsApplied(&i).HRS_WRK.DESCRLONG.Value;
            &rs_JobsApplied(&i).HRS_START_WRK.HRS_DIVIDER.Visible = True;
            
            For &j = &i + 1 To &rs_JobsApplied.ActiveRowCount
               If &rs_JobsApplied(&j).HRS_WRK.DESCRLONG.Value = &strTerms Then
                  &rs_JobsApplied(&i).HRS_WRK.DESCRLONG.Visible = False;
                  &rs_JobsApplied(&i).HRS_START_WRK.HRS_DIVIDER.Visible = False;
                  Break;
               End-If;
            End-For;
            
            If &rs_JobsApplied(&i).HRS_START_WRK.HRS_DIVIDER.Visible Then
               &fldLastDivider = &rs_JobsApplied(&i).HRS_START_WRK.HRS_DIVIDER;
            End-If;
         End-If;
      End-For;
      
      If &fldLastDivider <> Null Then
         &fldLastDivider.Visible = False;
      End-If;
   Else
      &rs_JobsApplied.HideAllRows();
   End-If;
   
   HRS_START_WRK.HRS_START1_GB.Visible = (HRS_START_WRK.HRS_START2_GB.Visible Or
      HRS_START_WRK.HRS_START3_GB.Visible);
   
   &bTermsFooterOnPage = ( Not &c_bIsFluidMode Or
      CheckPageFieldExists("HRS_CE_START_FL", Field.GROUPBOX4));
   
   If HRS_START_WRK.HRS_START1_GB.Visible Then /* agreements are present */
      If &c_bIsFluidMode Then
         HRS_START_WRK.HRS_CE_AGREE_TERMS.Label = MsgGetText(18172, 323, "Message not found.");
      Else
         HRS_START_WRK.HRS_CE_AGREE_TERMS.Label = MsgGetText(18178, 323, "Message not found.");
         HRS_START_WRK.HRS_START2_GB.Label = MsgGetText(18178, 371, "Message not found.");
         HRS_START_WRK.HRS_START3_GB.Label = MsgGetText(18178, 372, "Message not found.");
      End-If;
      
      If &bTermsFooterOnPage Then
         HRS_START_WRK.GROUPBOX4.Visible = True;
      End-If;
      
      /* Dynamic instructional text */
      
      &strTerms = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DINSTR_TXT"), String(&applicant.HRS_SITE_ID));
      
      If All(&strTerms) Then
         HRS_START_WRK.HTMLAREA3.Value = %This.formatTextCatalogHTML(&strTerms);
      End-If;
      
      HRS_START_WRK.GROUPBOX3.Visible = All(&strTerms);
   Else
      HRS_START_WRK.GROUPBOX3.Visible = False;
      If &bTermsFooterOnPage Then
         HRS_START_WRK.GROUPBOX4.Visible = False;
      End-If;
   End-If;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.formatStartStep();
   End-If;
end-method;

method startStepHasText
   /+ Returns Boolean +/
   Return (HRS_START_WRK.GROUPBOX5.Visible Or
      HRS_START_WRK.GROUPBOX1.Visible Or
      HRS_START_WRK.GROUPBOX2.Visible Or
      HRS_START_WRK.GROUPBOX3.Visible Or
      HRS_START_WRK.HRS_START1_GB.Visible);
end-method;

method calculateStartTermsHash
   /+ Returns String +/
   Local string &strInput;
   
   &strInput = "";
   
   If HRS_START_WRK.HRS_START2_GB.Visible And
         All(HRS_START_WRK.HTMLAREA4.Value) Then /* Application Terms & Agreements */
      &strInput = &strInput | "ATAG" | HRS_START_WRK.HTMLAREA4.Value;
   End-If;
   
   If HRS_START_WRK.HRS_START3_GB.Visible And
         All(HRS_START_WRK.HTMLAREA5.Value) Then /* Prequalification Terms & Agreements */
      &strInput = &strInput | "PTAG" | HRS_START_WRK.HTMLAREA5.Value;
   End-If;
   
   If All(&strInput) Then
      Return Hash(&strInput);
   Else
      Return "";
   End-If;
end-method;

method checkRequiredSections
   /+ &strPageNumber as Number +/
   Local array of string &astrSections;
   Local Rowset &rsJPM;
   Local Row &rowJPM;
   Local string &strSection, &strRequiredSuffix, &strSectionLabel, &strSectionList;
   Local Field &fldNoRowsGroupBox, &fldReqImage, &fldAddButton, &fldAddButtonFocus;
   Local integer &i, &j;
   Local boolean &bError, &bGridSection;
   
   If &strPageNumber = - 1 Then /* Submit */
      &astrSections = %This.getAllSections();
   Else
      &astrSections = %This.getStepSections(%This.getCurrentStep().TemplateId);
   End-If;
   
   &bError = False;
   
   &strRequiredSuffix = MsgGetText(18178, 338, "");
   &strSectionList = "";
   
   For &i = 1 To &astrSections.Len;
      &strSection = &astrSections [&i];
      
      &bGridSection = False;
      
      If %This.isSectionRequired(&strSection) Then
         Evaluate &strSection
         When = "ATT" /* Attachments */
            &fldReqImage = GetLevel0()(1).HRS_CE_WRK.HRS_REQ_ATT;
            &fldNoRowsGroupBox = GetLevel0()(1).HRS_CE_WRK.HRS_ATTACH_NONE_GB;
            &fldAddButton = GetLevel0()(1).HRS_CE_LNK_WRK.HRS_ADD_ATTACH_PB;
            &bGridSection = True;
            
            Break;
         When = "WRK" /* Work Experience */
            &fldReqImage = GetLevel0()(1).HRS_CE_WRK.HRS_REQ_WRK;
            &fldNoRowsGroupBox = GetLevel0()(1).HRS_CE_WRK.HRS_NOWRK_EXP_GPB;
            &fldAddButton = GetLevel0()(1).HRS_CE_LNK_WRK.ADD_WORK_EXP;
            &bGridSection = True;
            
            Break;
         When = "TRA" /* Job Training */
            &fldReqImage = GetLevel0()(1).HRS_CE_WRK.HRS_REQ_TRA;
            &fldNoRowsGroupBox = GetLevel0()(1).HRS_CE_WRK.HRS_CE_NOTRNG_GPB;
            &fldAddButton = GetLevel0()(1).HRS_CE_LNK_WRK.ADD_TRAINING;
            &bGridSection = True;
            
            Break;
         When = "RFR" /* References */
            &fldReqImage = GetLevel0()(1).HRS_CE_WRK.HRS_REQ_RFR;
            &fldNoRowsGroupBox = GetLevel0()(1).HRS_CE_WRK.HRS_NO_REFS_GPB;
            &fldAddButton = GetLevel0()(1).HRS_CE_LNK_WRK.ADD_REFERENCES;
            &bGridSection = True;
            
            Break;
         When = "PRI" /* Federal Priority Placement */
            &fldReqImage = GetLevel0()(1).HRS_CE_WRK.HRS_REQ_PRI;
            &fldNoRowsGroupBox = GetLevel0()(1).HRS_CE_WRK.HRS_NO_PRIPLMT_GPB;
            &fldAddButton = GetLevel0()(1).HRS_CE_LNK_WRK.ADD_PRI_PLCMT;
            &bGridSection = True;
            
            Break;
         When-Other /* JPM */
            &rsJPM = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_RES_SCTJ_VW);
            
            For &j = 1 To &rsJPM.ActiveRowCount
               &rowJPM = &rsJPM(&j);
               
               If &rowJPM.HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value = &strSection Then
                  &fldReqImage = &rowJPM.HRS_CE_WRK.HRS_REQ_JPM;
                  &fldNoRowsGroupBox = &rowJPM.HRS_CE_WRK.HRS_CE_NOCNT_GPB;
                  &fldAddButton = &rowJPM.HRS_CE_LNK_WRK.HRS_ADD_CONTENT;
                  &bGridSection = True;
                  
                  Break;
               End-If;
            End-For;
            
            Break;
         End-Evaluate;
         
         If &bGridSection And
               &fldNoRowsGroupBox.Visible Then
            If &fldAddButtonFocus = Null Then
               &fldAddButtonFocus = &fldAddButton;
            End-If;
            
            &strSectionLabel = &fldNoRowsGroupBox.Label;
            
            If All(&strRequiredSuffix) Then
               &strSectionLabel = RTrim(Substitute(&strSectionLabel, &strRequiredSuffix, ""));
            End-If;
            
            If &c_bIsFluidMode Then
               If All(&strSectionList) Then
                  &strSectionList = &strSectionList | ", " | &strSectionLabel;
               Else
                  &strSectionList = &strSectionLabel;
               End-If;
            Else
               &strSectionList = &strSectionList | Char(10) | &strSectionLabel;
            End-If;
            
            &fldReqImage.Visible = True;
            &bError = True;
         End-If;
      End-If;
   End-For;
   
   If &bError Then
      &fldAddButtonFocus.SetCursorPos(%Page);
      Error MsgGetText(18178, 675, "Message not found.") | Char(10) | &strSectionList;
   End-If;
end-method;

method checkResumeData
   Local Rowset &rsJPMSections, &rsItems, &rsWork, &rsReferences;
   Local Row &rowJPMSection, &rowItem, &rowWork, &rowReference;
   Local Record &recItem, &recWork, &recReference;
   Local string &strContentType;
   Local integer &intMissingRows, &intMissingRowsTotal, &i, &j;
   Local boolean &bAnyMissing, &bAnySectionItemsMissing;
   /* Bug - 18241424 - Begin */
   Local integer &k, &l, &m;
   Local Record &recItem1, &recItem2;
   Local Row &rowItem1, &rowItem2;
   Local Rowset &rsItems1, &rsItems2;
   Local boolean &blnDuplicate, &blnUnmapped;
   /* Bug - 18241424 - End */
   
   Local string &dup_jpm_text = "";
   Local string &jpm_text = "";
   Local number &p, &z, &grd_nbr;
   Local Grid &grid;
   Local GridColumn &column;
   
   &intMissingRowsTotal = 0;
   
   &rsJPMSections = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_RES_SCTJ_VW);
   Local Record &rec1 = GetRecord(Record.HRS_CE_WRK);
   Local string &exists;
   Local string &rcnm, &flnm;
   &rcnm = "HRS_CE_WRK";
   &flnm = "PAGE_INSTRUCTIONS";
   SQLExec("select 'Y' from PSRECFIELD where recname=:1 and fieldname=:2", &rcnm, &flnm, &exists);
   &flnm = "Field.PAGE_INSTRUCTIONS";
   
   &grd_nbr = 0;
   
   
   For &i = 1 To &rsJPMSections.ActiveRowCount
      &rowJPMSection = &rsJPMSections(&i);
      
      &strContentType = &rowJPMSection.HRS_RES_SCTJ_VW.JPM_CAT_TYPE.Value;
      &grd_nbr = &grd_nbr + 1;
      If %This.stepContainsSection(%This.getCurrentStep(), &strContentType) Then
         &rsItems = &rowJPMSection.GetRowset(Scroll.HRS_APPITM01_VW);
         &intMissingRows = 0;
         &p = 0;
         &z = 0;
         If &bAccessibilityMode Then /*Begin--22959255	*/
            &grid = GetGrid(%Page, "HRS_CONTENT_ITEMS", &grd_nbr);
            &column = &grid.GetColumn("HRS_REQ_RES_VAL");
            &column.Label = " ";
            
         End-If;
         
         
         For &j = 1 To &rsItems.ActiveRowCount
            &rowItem = &rsItems(&j);
            &recItem = &rowItem.HRS_APPITM01_VW;
            
            If All(&recItem.HRS_CAT_ITEM_TXT.Value) And
                  None(&recItem.JPM_CAT_ITEM_ID.Value) Then
               /* &intMissingRows = &intMissingRows + 1; */ /* 18241424 */
               &blnUnmapped = True; /* 18241424 */
               &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = True;
               &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Value = Image.PS_REQUIRED_INFO16_ICN;
               If &bAccessibilityMode Then /*Begin--22959255	*/
                  &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Label = MsgGetText(18178, 1354, "Message not found.") | &rowItem.HRS_CE_LNK_WRK.DESCR100.Value; /*Alt text contents having unknown value data*/
                  
                  If &z = 0 Then
                     &jpm_text = &jpm_text | &rowJPMSection.HRS_RES_SCTJ_VW.DESCR.Value | ","; /*contents having unknown value data*/
                     &z = &z + 1;
                  End-If;
               End-If;
               /*End--22959255	*/
               
               /* Bug - 18241424 - Comment Begin 

            Else
               &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = False;
                Bug - 18241424 - Comment End */
            End-If;
            
            /* Bug - 18241424 - Begin */
            /* Mapped */
            If &recItem.HRS_PERSON_ID.Value <> 0 And
                  All(&recItem.JPM_CAT_ITEM_ID.Value) Then
               &l = 0;
               &rsItems1 = &rowJPMSection.GetRowset(Scroll.HRS_APPITM01_VW);
               
               For &k = 1 To &rsItems1.ActiveRowCount
                  &rowItem1 = &rsItems1(&k);
                  &recItem1 = &rowItem1.HRS_APPITM01_VW;
                  
                  If All(&recItem1.JPM_CAT_ITEM_ID.Value) Then
                     If &recItem.JPM_CAT_TYPE.Value = &recItem1.JPM_CAT_TYPE.Value And
                           &recItem.JPM_CAT_ITEM_ID.Value = &recItem1.JPM_CAT_ITEM_ID.Value And
                           &recItem.JPM_CAT_ITEM_QUAL.Value = &recItem1.JPM_CAT_ITEM_QUAL.Value And
                           &recItem.JPM_CAT_ITEM_QUAL2.Value = &recItem1.JPM_CAT_ITEM_QUAL2.Value Then
                        &l = &l + 1;
                        If &l > 1 Then
                           &l = 1;
                           &rowItem1.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = True;
                           &rowItem1.HRS_CE_WRK.HRS_REQ_RES_VAL.Value = Image.PS_REQUIRED_INFO16_ICN;
                           &blnDuplicate = True;
                           If &bAccessibilityMode Then /*Begin--22959255	*/
                              
                              If &p = 0 Then
                                 &rowItem1.HRS_CE_LNK_WRK.DESCR100.Value = MsgGetText(18178, 1355, "Message not found.") | &rowItem1.HRS_CE_LNK_WRK.DESCR100.Value;
                                 &dup_jpm_text = &dup_jpm_text | &rowJPMSection.HRS_RES_SCTJ_VW.DESCR.Value | ","; /*contents having duplicate data*/
                                 &p = 1;
                                 
                              End-If;
                              &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Label = MsgGetText(18178, 1354, "Message not found.") | &rowItem.HRS_CE_LNK_WRK.DESCR100.Value /*alte text for graphic in accesibility*/
                           End-If; /*End--22959255	*/
                           
                        End-If;
                     End-If;
                  End-If;
               End-For;
            End-If;
            /* Mapped */
            
            If &j = &rsItems.ActiveRowCount Then
               If &blnUnmapped Or
                     &blnDuplicate Then
                  
                  &rsItems2 = &rowJPMSection.GetRowset(Scroll.HRS_APPITM01_VW);
                  
                  For &m = 1 To &rsItems2.ActiveRowCount
                     &rowItem2 = &rsItems2(&m);
                     &recItem2 = &rowItem2.HRS_APPITM01_VW;
                     
                     If &rowItem2.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible And
                           All(&rowItem2.HRS_CE_WRK.HRS_REQ_RES_VAL.Value) Then
                        &intMissingRows = &intMissingRows + 1;
                     End-If;
                  End-For;
                  
               End-If
            End-If;
            /* Bug - 18241424 - End */
            
         End-For;
         
         &rowJPMSection.HRS_CE_WRK.HRS_MISSING_ROWS.Value = &intMissingRows;
         &intMissingRowsTotal = &intMissingRowsTotal + &intMissingRows;
         
         GetGrid(%Page, "HRS_CONTENT_ITEMS", &rowJPMSection.RowNumber).GetColumn("HRS_REQ_RES_VAL").Visible = (&intMissingRows > 0);
      End-If;
   End-For;
   
   If %This.stepContainsSection(%This.getCurrentStep(), "WRK") Then
      &rsWork = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE)(1).GetRowset(Scroll.HRS_APP_WRK_EXP);
      &intMissingRows = 0;
      
      For &i = 1 To &rsWork.ActiveRowCount
         &rowWork = &rsWork(&i);
         &recWork = &rowWork.HRS_APP_WRK_EXP;
         
         If Not None(&recWork.START_DT.Value, &recWork.EMPLOYER.Value, &recWork.ENDING_TITLE.Value) And
               Not All(&recWork.START_DT.Value, &recWork.EMPLOYER.Value, &recWork.ENDING_TITLE.Value) Then
            &blnUnmapped = True;
            &intMissingRows = &intMissingRows + 1;
            &rowWork.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = True;
            &rowWork.HRS_CE_WRK.HRS_REQ_RES_VAL.Value = Image.PS_REQUIRED_INFO16_ICN;
         Else
            &rowWork.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = False;
         End-If;
      End-For;
      
      HRS_CE_WRK.HRS_MISSING_WRK.Value = &intMissingRows;
      &intMissingRowsTotal = &intMissingRowsTotal + &intMissingRows;
      
      GetGrid(%Page, "HRS_APP_WRK_EXP").GetColumn("HRS_REQ_RES_VAL").Visible = (&intMissingRows > 0);
   End-If;
   
   If %This.stepContainsSection(%This.getCurrentStep(), "RFR") Then
      &rsReferences = GetLevel0()(1).GetRowset(Scroll.HRS_REFF_SS_VW);
      &intMissingRows = 0;
      
      For &i = 1 To &rsReferences.ActiveRowCount
         &rowReference = &rsReferences(&i);
         &recReference = &rowReference.HRS_REFF_SS_VW;
         
         If Not &rowReference.IsNew And
               Not All(&recReference.HRS_REF_NAME.Value, &recReference.REF_TITLE.Value) Then
            &blnUnmapped = True;
            &intMissingRows = &intMissingRows + 1;
            &rowReference.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = True;
            &rowReference.HRS_CE_WRK.HRS_REQ_RES_VAL.Value = Image.PS_REQUIRED_INFO16_ICN;
         Else
            &rowReference.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = False;
         End-If;
      End-For;
      
      HRS_CE_WRK.HRS_MISSING_RFR.Value = &intMissingRows;
      &intMissingRowsTotal = &intMissingRowsTotal + &intMissingRows;
      
      GetGrid(%Page, "HRS_REFF_SS_VW").GetColumn("HRS_REQ_RES_VAL").Visible = (&intMissingRows > 0);
   End-If;
   
   If None(HRS_CE_WRK.HRS_REQ_RES_VAL.Value) Then
      HRS_CE_WRK.HRS_REQ_RES_VAL.Value = Image.PS_REQUIRED_INFO16_ICN;
   End-If;
   
   HRS_CE_WRK.HRS_MISSING_ROWS.Value = &intMissingRowsTotal;
   HRS_CE_WRK.HRS_REQ_GB.Visible = (&intMissingRowsTotal > 0);
   
   If Not &c_bIsFluidMode Then
      If &exists = "Y" Then
         
         &rec1.GetField(@&flnm).Visible = False;
      End-If;
   End-If;
   
   /* Bug - 18241424 - Begin */
   
   If HRS_CE_WRK.HRS_REQ_GB.Visible And
         All(HRS_CE_WRK.HRS_REQ_RES_VAL.Value) And
         (&blnUnmapped Or
            &blnDuplicate) Then
      If &blnUnmapped Then
         If &c_bIsFluidMode And
               Not &bAccessibilityMode Then
            
            HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value = MsgGetExplainText(18172, 381, "Message not found.");
         Else
            If Not &bAccessibilityMode Then /*khushboo*/
               HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value = MsgGetExplainText(18178, 381, "Message not found.");
            Else
               
               HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value = MsgGetExplainText(18178, 1352, "Message not found.", Substring(&jpm_text, 1, (Len(&jpm_text) - 1))); /*message for unknown values in resume data in accessibility*/
               HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Visible = False;
               WinMessage(HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value, 0);
               If Not &c_bIsFluidMode Then
                  If &exists = "Y" Then
                     &rec1.GetField(@&flnm).Visible = True;
                     &rec1.GetField(@&flnm).Value = HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value;
                     
                  End-If;
               End-If;
            End-If;
         End-If;
      Else
         If Not &bAccessibilityMode Then
            HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value = MsgGetText(18178, 26, "Message not found.");
         Else
            
            HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value = MsgGetExplainText(18178, 1353, "Message not found.", Substring(&dup_jpm_text, 1, (Len(&dup_jpm_text) - 1))); /*message for duplicate values in resume data in accessibility*/
            HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Visible = False;
            WinMessage(HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value, 0);
            
            If Not &c_bIsFluidMode Then
               If &exists = "Y" Then
                  &rec1.GetField(@&flnm).Visible = True;
                  &rec1.GetField(@&flnm).Value = HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value;
                  
               End-If;
            End-If;
         End-If;
      End-If;
      
      If &c_bIsFluidMode And
            Not &bAccessibilityMode Then
         
         MessageBox(0, "", 0, 0, HRS_CE_WRK.HRS_NOAPP_APLC_MSG.Value);
      End-If;
   End-If;
   
   /* Bug - 18241424 - End */
   
end-method;

method checkResumeDataAfterEdit
   /+ &rowItem as Row +/
   Local Grid &gridSection;
   Local Field &fldTotalMissingRows, &fldSectionMissingRows;
   
   &fldTotalMissingRows = GetLevel0()(1).HRS_CE_WRK.HRS_MISSING_ROWS;
   
   If &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible And
         All(&rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Value) Then
      &rowItem.HRS_CE_WRK.HRS_REQ_RES_VAL.Visible = False;
      
      Evaluate &rowItem.GetRecord(1).Name
      When = Record.HRS_APPITM01_VW
         &fldSectionMissingRows = &rowItem.ParentRowset.ParentRow.HRS_CE_WRK.HRS_MISSING_ROWS;
         &gridSection = GetGrid(%Page, "HRS_CONTENT_ITEMS", &rowItem.ParentRowset.ParentRow.RowNumber);
         Break;
      When = Record.HRS_APP_WRK_EXP
         &fldSectionMissingRows = GetLevel0()(1).HRS_CE_WRK.HRS_MISSING_WRK;
         &gridSection = GetGrid(%Page, "HRS_APP_WRK_EXP");
         Break;
      When = Record.HRS_REFF_SS_VW
         &fldSectionMissingRows = GetLevel0()(1).HRS_CE_WRK.HRS_MISSING_RFR;
         &gridSection = GetGrid(%Page, "HRS_REFF_SS_VW");
         Break;
      End-Evaluate;
      
      &fldSectionMissingRows.Value = &fldSectionMissingRows.Value - 1;
      &fldTotalMissingRows.Value = &fldTotalMissingRows.Value - 1;
      HRS_CE_WRK.HRS_REQ_GB.Visible = (&fldTotalMissingRows.Value > 0);
      
      If &fldSectionMissingRows.Value = 0 Then
         &gridSection.GetColumn("HRS_REQ_RES_VAL").Visible = False;
      End-If;
   End-If;
end-method;

method checkResumeDataAfterDelete
   /+ &rowItem as Row +/
   %This.checkResumeDataAfterEdit(&rowItem);
end-method;

method defaultCurrency
   /+ &nbr_JobOpeningId as Number +/
   /+ Returns String +/
   
   Local string &currencyCD;
   
   SQLExec("select CURRENCY_CD from PS_" | Record.HRS_JO_RQMT | " where HRS_JOB_OPENING_ID = :1 and HRS_JO_PRM_JCD_FLG = 'Y'", &nbr_JobOpeningId, &currencyCD);
   
   Return &currencyCD;
end-method;

method competenciesApplicable
   /+ Returns Boolean +/
   Local array of number &anumJobIDs, &anumEligibleJobs;
   Local string &strInList;
   Local integer &intCount;
   
   &anumJobIDs = %This.getJobOpeningIDsArray();
   &anumEligibleJobs = &controller.getEligibleJobs(&anumJobIDs);
   
   If &anumEligibleJobs.Len = 0 Then
      Return False;
   End-If;
   
   &strInList = &anumEligibleJobs.Join();
   
   SQLExec("select COUNT(*) from PS_HRS_JO_ITM01_VW where HRS_JOB_OPENING_ID in " | &strInList, &intCount);
   
   Return (&intCount > 0);
end-method;

method questionnaireApplicable
   /+ Returns Boolean +/
   Local array of number &anumJobIDs, &anumEligibleJobs;
   Local string &strInList;
   Local integer &intCount;
   
   &anumJobIDs = %This.getJobOpeningIDsArray();
   &anumEligibleJobs = &controller.getEligibleJobs(&anumJobIDs);
   
   If &anumEligibleJobs.Len = 0 Then
      Return False;
   End-If;
   
   &strInList = &anumEligibleJobs.Join();
   
   SQLExec("select COUNT(*) from PS_HRS_JO_QSTN_I JQ where HRS_JOB_OPENING_ID in " | &strInList | " and not exists (select 1 from PS_HRS_JO_PRSCR_VW JPQ where JQ.HRS_JOB_OPENING_ID = JPQ.HRS_JOB_OPENING_ID and JQ.HRS_QSTN_ID = JPQ.HRS_QSTN_ID)", &intCount);
   
   Return (&intCount > 0);
end-method;

method priorityPlacementApplicable
   /+ Returns Boolean +/
   Return &controller.isFederal();
end-method;

method federalPreferencesApplicable
   /+ Returns Boolean +/
   Return &controller.isFederal();
end-method;

method getJobOpeningIDsArray
   /+ Returns Array of Number +/
   Local array of number &anumJobIDs;
   Local Rowset &rsJobs;
   Local integer &i;
   
   &anumJobIDs = CreateArrayRept(0, 0);
   &rsJobs = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   
   If All(&rsJobs(1).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) Then
      For &i = 1 To &rsJobs.ActiveRowCount
         &anumJobIDs.Push(&rsJobs(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
      End-For;
   End-If;
   
   Return &anumJobIDs;
end-method;

method isPageHidden
   /+ &intPageNumber as Integer +/
   /+ Returns Boolean +/
   Return (&anumHiddenPages.Find(&intPageNumber) > 0);
end-method;

method isReferralSourceRequired
   /+ Returns Boolean +/
   Return %This.bReferralSourceRequired;
end-method;

method isReferralSubsourceRequired
   /+ Returns Boolean +/
   Return %This.bReferralSubsourceRequired;
end-method;

method getAllSteps
   /+ Returns Array of EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjStepsTemp, &aobjSteps;
   Local integer &i;
   
   If &c_objWizard = Null Then
      Return Null;
   Else
      &aobjStepsTemp = &c_objWizard.GetProcessDefn().GetFlatProcessTree();
      &aobjSteps = &aobjStepsTemp.Clone();
      
      If &aobjSteps <> Null And
            &aobjSteps.Len > 0 Then
         For &i = &aobjSteps.Len To 1 Step - 1
            If &aobjSteps [&i].IsContainer Then
               &aobjSteps.Replace(&i, 1);
            End-If;
         End-For;
      End-If;
      
      Return &aobjSteps;
   End-If;
end-method;

method getAllStepsWithContainers
   /+ Returns Array of EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjStepsTemp, &aobjSteps;
   Local integer &i;
   
   If &c_objWizard = Null Then
      Return Null;
   Else
      &aobjStepsTemp = &c_objWizard.GetProcessDefn().GetFlatProcessTree();
      &aobjSteps = &aobjStepsTemp.Clone();
      
      If &aobjSteps <> Null And
            &aobjSteps.Len > 0 Then
         For &i = &aobjSteps.Len To 1 Step - 1
            If &aobjSteps [&i].TemplateId = "@@APPLICATION" Then
               &aobjSteps.Replace(&i, 1);
            End-If;
         End-For;
      End-If;
      
      Return &aobjSteps;
   End-If;
end-method;

method getFirstStep
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   
   &aobjSteps = %This.getAllSteps();
   
   If &aobjSteps <> Null And
         &aobjSteps.Len > 0 Then
      Return &aobjSteps [1];
   Else
      Return Null;
   End-If;
end-method;

method getStepByNumber
   /+ &intIndex as Integer +/
   /+ Returns EOTL_WIZARD:StepDefn +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   
   &aobjSteps = %This.getAllSteps();
   
   If &aobjSteps <> Null And
         &aobjSteps.Len >= &intIndex Then
      Return &aobjSteps [&intIndex];
   Else
      Return Null;
   End-If;
end-method;

method isResumeTemplateChanged
   /+ Returns Boolean +/
   Return &bReset;
end-method;

method areStartTermsChanged
   /+ Returns Boolean +/
   Return &bResetTerms;
end-method;

method getSavedLastStepID
   /+ Returns String +/
   Return &strLastStep;
end-method;

method getSavedCurrentStepID
   /+ Returns String +/
   Return &strCurrentStep;
end-method;

method getStepNumber
   /+ &strStep as String +/
   /+ Returns Integer +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   Local integer &i;
   
   &aobjSteps = %This.getAllSteps();
   
   If &aobjSteps = Null Or
         &aobjSteps.Len = 0 Then
      Return 0;
   End-If;
   
   For &i = 1 To &aobjSteps.Len
      If &aobjSteps [&i].TemplateId = &strStep Then
         Return &i;
      End-If;
   End-For;
   
   Return 0;
end-method;

method getCurrentStepNumber
   /+ Returns Integer +/
   Local array of EOTL_WIZARD:StepDefn &aobjSteps;
   Local EOTL_WIZARD:StepDefn &objCurrentStep;
   Local integer &i;
   
   &objCurrentStep = %This.getCurrentStep();
   
   &aobjSteps = %This.getAllSteps();
   
   If &aobjSteps = Null Or
         &aobjSteps.Len = 0 Then
      Return 0;
   End-If;
   
   For &i = 1 To &aobjSteps.Len
      If &aobjSteps [&i].TemplateId = &objCurrentStep.TemplateId Then
         Return &i;
      End-If;
   End-For;
   
   Return 0;
end-method;

method setCurrentStep
   /+ &strCurrentStepNew as String +/
   &strCurrentStep = &strCurrentStepNew;
end-method;

method setLastStep
   /+ &strLastStepNew as String +/
   &strLastStep = &strLastStepNew;
end-method;

method arePrescreeningQuestionsSet
   /+ Returns Boolean +/
   Return &bPrescreeningQuestionsSet;
end-method;

method formatOnlineScreeningNotices
   /+ &bForceRefresh as Boolean, +/
   /+ &intDeletedJobID as Number +/
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate &objPageValidate;
   Local Rowset &rsJobBasket, &rsOnlineScreeningNotices, &rs_JOOnScrVw;
   Local Record &rec_JOScrLevel;
   Local Field &fldLastDivider;
   Local string &str_ExplMsgTxtCatID, &str_ExplMsgTxtCat, &strTerms, &strJobIDLabel, &strJobTitleLabel;
   Local integer &i, &j;
   
   &rsJobBasket = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rsOnlineScreeningNotices = GetLevel0()(1).GetRowset(Scroll.HRS_SCR_NOTC_VW);
   
   &objPageValidate = create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:UI:PageValidate();
   
   For &i = 1 To &rsJobBasket.ActiveRowCount
      &gbl_bol_isThereOnlineScreening = &objPageValidate.validateJOOnlineScreening(&rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
      
      If &gbl_bol_isThereOnlineScreening Then
         Break;
      End-If;
   End-For;
   
   If &gbl_bol_isThereOnlineScreening And
         Not &c_bReviewSubmitted Then
      If None(&rsOnlineScreeningNotices(1).HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID.Value) Or
            &bForceRefresh Then
         &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
         &rs_JOOnScrVw = CreateRowset(Record.HRS_JO_ONSCR_VW);
         
         For &i = &rsOnlineScreeningNotices.ActiveRowCount To 1 Step - 1
            &rsOnlineScreeningNotices.DeleteRow(&i);
         End-For;
         
         &rsOnlineScreeningNotices.ShowAllRows();
         
         For &i = 1 To &rsJobBasket.ActiveRowCount
            If (&intDeletedJobID <= 0 Or
                  &rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value <> &intDeletedJobID) And
                  &controller.getPrescreeningStatus(&rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) <> "2" Then
               If All(&rsOnlineScreeningNotices(1).HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID.Value) Then
                  &rsOnlineScreeningNotices.InsertRow(&rsOnlineScreeningNotices.ActiveRowCount);
               End-If;
               
               &j = &rsOnlineScreeningNotices.ActiveRowCount;
               
               &rsOnlineScreeningNotices(&j).HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID.Value = &rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
               
               &rs_JOOnScrVw.Fill("WHERE HRS_JOB_OPENING_ID = :1", &rsOnlineScreeningNotices(&j).HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID.Value);
               &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SUMM_ID.Value;
               &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &rs_JOOnScrVw(1).HRS_JO_ONSCR_VW.HRS_JO_SCR_SEQ.Value;
               &rec_JOScrLevel.SelectByKey();
               &str_ExplMsgTxtCatID = &rec_JOScrLevel.HRS_EMSG_TEXT_ID.Value;
               
               If All(&str_ExplMsgTxtCatID) Then
                  If None(&strJobIDLabel) Then
                     &strJobIDLabel = &rsOnlineScreeningNotices(&j).HRS_WRK.HRS_JOB_ID_TEXT.GetLongLabel("JOB_ID");
                     &strJobTitleLabel = &rsOnlineScreeningNotices(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.GetLongLabel("JOB_TITLE");
                  End-If;
                  
                  If Not &c_bIsFluidMode Then
                     &rsOnlineScreeningNotices(&j).HRS_WRK.HRS_JOB_ID_TEXT.Value = &strJobIDLabel | ": " | &rsOnlineScreeningNotices(&j).HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID.Value;
                     rem &rsOnlineScreeningNotices(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.Value = &strJobTitleLabel | ": " | &rsOnlineScreeningNotices(&j).HRS_JO_I.POSTING_TITLE.Value;
                     &rsOnlineScreeningNotices(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.Value = &strJobTitleLabel | ": " | &controller.getPostingTitle(&rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
                  End-If;
                  
                  &str_ExplMsgTxtCat = &obj_c_myCatalog.GetCandTextSimple(&str_ExplMsgTxtCatID, String(&applicant.HRS_SITE_ID));
                  &rsOnlineScreeningNotices(&j).HRS_WRK.DESCRLONG.Value = &str_ExplMsgTxtCat;
               End-If;
            End-If;
         End-For;
         
         For &i = &rsOnlineScreeningNotices.ActiveRowCount To 1 Step - 1
            &rsOnlineScreeningNotices(&i).Visible = All(&rsOnlineScreeningNotices(&i).HRS_WRK.DESCRLONG.Value);
         End-For;
         
         &rsOnlineScreeningNotices.Sort(HRS_WRK.DESCRLONG, "A", HRS_SCR_NOTC_VW.HRS_JOB_OPENING_ID, "A");
         
         For &i = 1 To &rsOnlineScreeningNotices.ActiveRowCount
            If &rsOnlineScreeningNotices(&i).Visible Then
               &rsOnlineScreeningNotices(&i).HRS_WRK.DESCRLONG.Visible = True;
               &strTerms = &rsOnlineScreeningNotices(&i).HRS_WRK.DESCRLONG.Value;
               
               If Not &c_bIsFluidMode Then
                  &rsOnlineScreeningNotices(&i).HRS_JO_WRK.HRS_DIVIDER.Visible = True;
               End-If;
               
               For &j = &i + 1 To &rsOnlineScreeningNotices.ActiveRowCount
                  If &rsOnlineScreeningNotices(&j).Visible And
                        &rsOnlineScreeningNotices(&j).HRS_WRK.DESCRLONG.Value = &strTerms Then
                     &rsOnlineScreeningNotices(&i).HRS_WRK.DESCRLONG.Visible = False;
                     
                     If Not &c_bIsFluidMode Then
                        &rsOnlineScreeningNotices(&i).HRS_JO_WRK.HRS_DIVIDER.Visible = False;
                     End-If;
                     Break;
                  End-If;
               End-For;
               
               If Not &c_bIsFluidMode Then
                  If &rsOnlineScreeningNotices(&i).HRS_JO_WRK.HRS_DIVIDER.Visible Then
                     &fldLastDivider = &rsOnlineScreeningNotices(&i).HRS_JO_WRK.HRS_DIVIDER;
                  End-If;
               End-If;
            End-If;
         End-For;
         
         If &fldLastDivider <> Null Then
            &fldLastDivider.Visible = False;
         End-If;
      End-If;
   Else
      If &c_bIsFluidMode Then
         HRS_REVIEW_WRK.HRS_OSCR_NOT_GB.Visible = False;
      End-If;
      
      &rsOnlineScreeningNotices.HideAllRows();
   End-If;
end-method;

method formatOnlineScreeningResults
   Local Rowset &rsJobBasket, &rsOnlineScreeningResults, &rs_JOOnScrVw;
   Local Record &rec_JOScrLevel;
   Local Field &fldLastDivider;
   Local string &str_ScrRsltsTxtCat, &strTerms, &strJobIDLabel, &strJobTitleLabel;
   Local number &nbr_PersonId, &nbr_ProfileSeq, &nbr_joScrSummId, &nbr_joScrSeq, &nbr_AppJOPreScreen;
   Local integer &i, &j;
   
   If &obj_c_myCatalog = Null Then
      &obj_c_myCatalog = create HRS_COMMON:COMMON:UTIL:GetText();
   End-If;
   
   &rsJobBasket = GetLevel0()(1).GetRowset(Scroll.HRS_APP_RCMNT_I);
   &rsOnlineScreeningResults = GetLevel0()(1).GetRowset(Scroll.HRS_SCR_RSLT_VW);
   
   If &gbl_bol_isThereOnlineScreening And
         (&c_bReviewSubmitted Or
            %Page = %This.getPageName(Page.HRS_CE_CONFIRM)) Then
      &rec_JOScrLevel = CreateRecord(Record.HRS_JO_SCR_LVL);
      &rs_JOOnScrVw = CreateRowset(Record.HRS_APP_JOPSCRN);
      
      &nbr_PersonId = GetLevel0()(1).HRS_APPLICANT.HRS_PERSON_ID.Value;
      &nbr_ProfileSeq = GetLevel0()(1).GetRowset(Scroll.HRS_APP_PROFILE).GetRow(1).HRS_APP_PROFILE.HRS_PROFILE_SEQ.Value;
      
      If &nbr_ProfileSeq = 0 Then
         SQLExec("SELECT MAX(HRS_PROFILE_SEQ) FROM PS_HRS_APP_PROFILE WHERE HRS_PERSON_ID=:1", &nbr_PersonId, &nbr_ProfileSeq);
      End-If;
      
      For &i = &rsOnlineScreeningResults.ActiveRowCount To 1 Step - 1
         &rsOnlineScreeningResults.DeleteRow(&i);
      End-For;
      
      &rsOnlineScreeningResults.ShowAllRows();
      
      For &i = 1 To &rsJobBasket.ActiveRowCount
         If &controller.getPrescreeningStatus(&rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value) <> "2" Then
            If All(&rsOnlineScreeningResults(1).HRS_SCR_RSLT_VW.HRS_JOB_OPENING_ID.Value) Then
               &rsOnlineScreeningResults.InsertRow(&rsOnlineScreeningResults.ActiveRowCount);
            End-If;
            
            &j = &rsOnlineScreeningResults.ActiveRowCount;
            
            &rsOnlineScreeningResults(&j).HRS_SCR_RSLT_VW.HRS_JOB_OPENING_ID.Value = &rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value;
            
            SQLExec("SELECT HRS_JO_SCR_SUMM_ID, HRS_JO_SCR_SEQ FROM PS_HRS_JO_ONSCR_VW WHERE HRS_JOB_OPENING_ID = :1", &rsOnlineScreeningResults(&j).HRS_SCR_RSLT_VW.HRS_JOB_OPENING_ID.Value, &nbr_joScrSummId, &nbr_joScrSeq);
            
            &rec_JOScrLevel.HRS_JO_SCR_SUMM_ID.Value = &nbr_joScrSummId;
            &rec_JOScrLevel.HRS_JO_SCR_SEQ.Value = &nbr_joScrSeq;
            
            If &rec_JOScrLevel.SelectByKey() Then
               &rs_JOOnScrVw.Flush();
               &nbr_AppJOPreScreen = &rs_JOOnScrVw.Fill("WHERE HRS_PERSON_ID = :1 AND HRS_PROFILE_SEQ = :2 AND HRS_JO_SCR_SUMM_ID = :3 AND HRS_JO_SCR_SEQ = :4", &nbr_PersonId, &nbr_ProfileSeq, &nbr_joScrSummId, &nbr_joScrSeq);
               
               If &nbr_AppJOPreScreen > 0 Then
                  If &rs_JOOnScrVw(1).HRS_APP_JOPSCRN.HRS_SCR_STATUS.Value = "1" Then
                     &str_ScrRsltsTxtCat = &obj_c_myCatalog.GetCandTextSimple(&rec_JOScrLevel.HRS_PASS_TEXT_ID.Value, String(&applicant.HRS_SITE_ID));
                  Else
                     &str_ScrRsltsTxtCat = &obj_c_myCatalog.GetCandTextSimple(&rec_JOScrLevel.HRS_FAIL_TEXT_ID.Value, String(&applicant.HRS_SITE_ID));
                  End-If;
                  
                  If All(&str_ScrRsltsTxtCat) Then
                     If None(&strJobIDLabel) Then
                        &strJobIDLabel = &rsOnlineScreeningResults(&j).HRS_WRK.HRS_JOB_ID_TEXT.GetLongLabel("JOB_ID");
                        &strJobTitleLabel = &rsOnlineScreeningResults(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.GetLongLabel("JOB_TITLE");
                     End-If;
                     
                     If Not &c_bIsFluidMode Then
                        &rsOnlineScreeningResults(&j).HRS_WRK.HRS_JOB_ID_TEXT.Value = &strJobIDLabel | ": " | &rsOnlineScreeningResults(&j).HRS_SCR_RSLT_VW.HRS_JOB_OPENING_ID.Value;
                        rem &rsOnlineScreeningResults(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.Value = &strJobTitleLabel | ": " | &rsOnlineScreeningResults(&j).HRS_JO_I.POSTING_TITLE.Value;
                        &rsOnlineScreeningResults(&j).HRS_WRK.HRS_JOB_TITLE_TEXT.Value = &strJobTitleLabel | ": " | &controller.getPostingTitle(&rsJobBasket(&i).HRS_APP_RCMNT_I.HRS_JOB_OPENING_ID.Value);
                     End-If;
                     
                     &rsOnlineScreeningResults(&j).HRS_WRK.DESCRLONG.Value = &str_ScrRsltsTxtCat;
                  End-If;
               End-If;
            End-If;
         End-If;
      End-For;
      
      For &i = &rsOnlineScreeningResults.ActiveRowCount To 1 Step - 1
         &rsOnlineScreeningResults(&i).Visible = All(&rsOnlineScreeningResults(&i).HRS_WRK.DESCRLONG.Value);
      End-For;
      
      &rsOnlineScreeningResults.Sort(HRS_WRK.DESCRLONG, "A", HRS_SCR_RSLT_VW.HRS_JOB_OPENING_ID, "A");
      
      For &i = 1 To &rsOnlineScreeningResults.ActiveRowCount
         If &rsOnlineScreeningResults(&i).Visible Then
            &rsOnlineScreeningResults(&i).HRS_WRK.DESCRLONG.Visible = True;
            &strTerms = &rsOnlineScreeningResults(&i).HRS_WRK.DESCRLONG.Value;
            
            If Not &c_bIsFluidMode Then
               &rsOnlineScreeningResults(&i).HRS_JO_WRK.HRS_DIVIDER.Visible = True;
            End-If;
            
            For &j = &i + 1 To &rsOnlineScreeningResults.ActiveRowCount
               If &rsOnlineScreeningResults(&j).Visible And
                     &rsOnlineScreeningResults(&j).HRS_WRK.DESCRLONG.Value = &strTerms Then
                  &rsOnlineScreeningResults(&i).HRS_WRK.DESCRLONG.Visible = False;
                  
                  If Not &c_bIsFluidMode Then
                     &rsOnlineScreeningResults(&i).HRS_JO_WRK.HRS_DIVIDER.Visible = False;
                  End-If;
                  Break;
               End-If;
            End-For;
            
            If Not &c_bIsFluidMode Then
               If &rsOnlineScreeningResults(&i).HRS_JO_WRK.HRS_DIVIDER.Visible Then
                  &fldLastDivider = &rsOnlineScreeningResults(&i).HRS_JO_WRK.HRS_DIVIDER;
               End-If;
            End-If;
         End-If;
      End-For;
      
      If &fldLastDivider <> Null Then
         &fldLastDivider.Visible = False;
      End-If;
   Else
      If &c_bIsFluidMode Then
         HRS_REVIEW_WRK.HRS_OSCR_RSLT_GB.Visible = False;
      End-If;
      
      &rsOnlineScreeningResults.HideAllRows();
   End-If;
end-method;

/**
  * method formatDisability
  * 
  * Formats the Disability section on the job application.  
  * Called both when applying and when viewing an application.
  * 
  * This method is called for both classic PIA and Fluid pages.  Therefore,
  * references to page names have been replaced with %This.getPageName, which
  * will return the correct classic or Fluid page name.
  * Also, when running from a fluid component, a fluid specific version of 
  * this method in class UI:FluidPageLayout will be called.
  *
  * To see if the long or simplified page should be displayed, go to 
  * the Installation table, under country specific tab. 
  *
  * @param None
  * @return None
*/
method formatDisability
   
   If Not &c_bDisabilityLabelsSet Then
      HRS_CE_DIS_WRK.HTMLAREA1.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_HDR"), String(&applicant.HRS_SITE_ID)));
      HRS_CE_DIS_WRK.GROUPBOX1.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_SEC1"), String(&applicant.HRS_SITE_ID));
      HRS_CE_DIS_WRK.HTMLAREA2.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_INSTR1"), String(&applicant.HRS_SITE_ID)));
      HRS_CE_DIS_WRK.GROUPBOX2.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_SEC2"), String(&applicant.HRS_SITE_ID));
      HRS_CE_DIS_WRK.HTMLAREA3.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_INSTR2"), String(&applicant.HRS_SITE_ID)));
      HRS_CE_DIS_WRK.GROUPBOX3.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL1"), String(&applicant.HRS_SITE_ID));
      
      /* Set radio buttons: Disabled, Not Disabled, Not Indicated */
      GetPageField(%This.getPageName(Page.HRS_CE_DISABILITY), "DISABILITY_STS_Y").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL1_Y"), String(&applicant.HRS_SITE_ID));
      GetPageField(%This.getPageName(Page.HRS_CE_DISABILITY), "DISABILITY_STS_N").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL1_N"), String(&applicant.HRS_SITE_ID));
      GetPageField(%This.getPageName(Page.HRS_CE_DISABILITY), "DISABILITY_STS_X").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL1_X"), String(&applicant.HRS_SITE_ID));
      
      HRS_CE_DIS_WRK.HR_EE_SIGNATURE.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL2"), String(&applicant.HRS_SITE_ID));
      HRS_CE_DIS_WRK.HR_DISCLOSURE_DT.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_LBL3"), String(&applicant.HRS_SITE_ID));
      HRS_CE_DIS_WRK.GROUPBOX4.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_SEC3"), String(&applicant.HRS_SITE_ID));
      HRS_CE_DIS_WRK.HTMLAREA4.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_INSTR3"), String(&applicant.HRS_SITE_ID)));
      HRS_CE_DIS_WRK.HTMLAREA5.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_DIS_FTR"), String(&applicant.HRS_SITE_ID)));
      
      &c_bDisabilityLabelsSet = True;
   End-If;
end-method;

/**
  * method formatVeteran
  * 
  * Formats the Veteran section on the job application.  
  * Called both when applying and when viewing an application.
  * 
  * This method is called for both classic PIA and Fluid pages.  Therefore,
  * references to page names have been replaced with %This.getPageName, which
  * will return the correct classic or Fluid page name.
  * Also, when running from a fluid component, a fluid specific version of 
  * this method in class UI:FluidPageLayout will be called.
  *
  * @param None
  * @return None
*/
method formatVeteran
   Local HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:OFCCPController &objOFCCPController;
   Local string &strText;
   Local boolean &bSimplifiedVeteran, &bClassified;
   
   /* Determine if the Veteran section is to display as long or short version. */
   &bSimplifiedVeteran = (create HRS_CANDIDATE_MANAGER:CMP_CAND_EXP:INTFC:OFCCPController()).isSimplifiedVeteran();
   
   /* In order to reduce the number of calls to the text catalog, the labels */
   /* will only be set once, as determined by a component variable.          */
   If Not &c_bVeteranLabelsSet Then
      HRS_CE_VET_WRK.GROUPBOX1.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_SEC1"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.HTMLAREA1.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_INSTR1"), String(&applicant.HRS_SITE_ID)));
      HRS_CE_VET_WRK.GROUPBOX2.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_SEC2"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.HTMLAREA2.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_INSTR2"), String(&applicant.HRS_SITE_ID)));
      
      /* Display either the simplified or the long format group box */
      HRS_CE_VET_WRK.HRS_VET_FULL_GB.Visible = ( Not &bSimplifiedVeteran);
      HRS_CE_VET_WRK.HRS_VET_SIMP_GB.Visible = &bSimplifiedVeteran;
      
      /* Set radio buttons: Not a veteran, Protected veteran, etc. */
      GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_P").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL1_P"), String(&applicant.HRS_SITE_ID));
      GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_D").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL1_D"), String(&applicant.HRS_SITE_ID));
      GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_Z").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL1_Z"), String(&applicant.HRS_SITE_ID));
      GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_X").Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL1_X"), String(&applicant.HRS_SITE_ID));
      
      HRS_CE_VET_WRK.CHKBOX1.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL2"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.CHKBOX2.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL3"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.CHKBOX3.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL4"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.CHKBOX4.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL5"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.MIL_DISCHRG_DT_USA.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_LBL6"), String(&applicant.HRS_SITE_ID));
      
      If &bSimplifiedVeteran Then
         If %Page = %This.getPageName(Page.HRS_CE_VETERAN) Then
            GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_P_SIMP").Label = GetPageField(%Page, "VETERAN_STS_P").Label;
            GetPageField(%This.getPageName(Page.HRS_CE_VETERAN), "VETERAN_STS_Z_SIMP").Label = GetPageField(%Page, "VETERAN_STS_Z").Label;
         End-If;
      End-If;
      
      HRS_CE_VET_WRK.GROUPBOX3.Label = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_SEC3"), String(&applicant.HRS_SITE_ID));
      HRS_CE_VET_WRK.HTMLAREA3.Value = %This.formatTextCatalogHTML(&obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_INSTR3"), String(&applicant.HRS_SITE_ID)));
      
      &strText = &obj_c_myCatalog.GetCandTextSimple(%This.getTextCatalogID("HRAM_CE_VET_INSTR4"), String(&applicant.HRS_SITE_ID));
      
      If All(&strText) Then
         HRS_CE_VET_WRK.HTMLAREA4.Value = %This.formatTextCatalogHTML(&strText);
      End-If;
      
      HRS_CE_VET_WRK.GROUPBOX4.Visible = All(HRS_CE_VET_WRK.HTMLAREA4.Value);
      
      &c_bVeteranLabelsSet = True;
   End-If;
   
   If Not &bSimplifiedVeteran Then
      &bClassified = (HRS_CE_VET_WRK.VETERAN_STS_USA.Value = "P");
      
      HRS_CE_VET_WRK.CHKBOX1.Enabled = &bClassified;
      HRS_CE_VET_WRK.CHKBOX2.Enabled = &bClassified;
      HRS_CE_VET_WRK.CHKBOX3.Enabled = &bClassified;
      HRS_CE_VET_WRK.CHKBOX4.Enabled = &bClassified;
      
      HRS_CE_VET_WRK.MIL_DISCHRG_DT_USA.Enabled = (All(HRS_CE_VET_WRK.VETERAN_STS_USA.Value) And
         HRS_CE_VET_WRK.VETERAN_STS_USA.Value <> "X");
   End-If;
end-method;

method drawQuestionAnswers
   Local Rowset &rsReqQuestions, &rsReqAnswers;
   Local Row &rowAnswer;
   Local Record &recAnswer;
   Local string &strQuestionScrollName, &strAnswerScrollName, &strHTML, &strControlName, &strControlID, &strHiddenControlID, &strDisabled, &strOtherProperties, &strOnClick;
   Local number &numAnswerID;
   Local integer &j, &k, &intAnswerIndex, &intCorrectAnswerCount;
   Local boolean &bJobPrescreening, &bNonJobPrescreening, &bOnlineQuestionnaire, &bDisabled;
   
   If &c_bIsFluidMode Then
      &objFluidPageLayout.drawQuestionAnswers();
      Return;
   End-If;
   
   Evaluate %Page
   When = Page.HRS_APP_JOPRESCRN /* job-specific prescreening */
      &bJobPrescreening = True;
      &strQuestionScrollName = Record.HRS_JO_QST_NO_I;
      &strAnswerScrollName = Record.HRS_CE_JO_ANS_I;
      Break;
   When = Page.HRS_APP_PRESCREEN /* non job-specific (apply without a job) prescreening */
      &bNonJobPrescreening = True;
      &strQuestionScrollName = Record.HRS_RES_QSTN_I;
      &strAnswerScrollName = Record.HRS_RES_ANS_I;
      Break;
   When = Page.HRS_CE_PROFILE /* online questionnaire */
      &bOnlineQuestionnaire = True;
      &strQuestionScrollName = Record.HRS_JO_QST_NO_I;
      &strAnswerScrollName = Record.HRS_CE_JO_ANS_I;
      Break;
   When-Other;
      Return;
   End-Evaluate;
   
   &rsReqQuestions = GetLevel0()(1).GetRowset(@("Scroll." | &strQuestionScrollName));
   
   &intAnswerIndex = 0;
   
   If (&bJobPrescreening Or
         &bNonJobPrescreening) And
         Not %This.isFurthestVisitedStep() Then
      &strDisabled = "disabled";
   Else
      &strDisabled = "";
   End-If;
   
   For &j = 1 To &rsReqQuestions.ActiveRowCount
      If &rsReqQuestions(&j).Visible And
            (&bJobPrescreening And
               &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value = "Y" Or
               &bNonJobPrescreening Or
               &bOnlineQuestionnaire And
                  &rsReqQuestions(&j).HRS_CE_WRK.HRS_PRESCREEN_FLG.Value <> "Y") And
            &rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Visible And
            All(&rsReqQuestions(&j).HRS_QSTN_TBL.DESCRLONG.Value) Then
         &rsReqAnswers = &rsReqQuestions(&j).GetRowset(@("Scroll." | &strAnswerScrollName));
         &intCorrectAnswerCount = 0;
         &strHTML = "";
         
         For &k = 1 To &rsReqAnswers.ActiveRowCount
            If &rsReqAnswers(&k).GetRecord(@("Record." | &strAnswerScrollName)).CORRECT_ANSWER.Value = "Y" Then
               &intCorrectAnswerCount = &intCorrectAnswerCount + 1;
            End-If;
         End-For;
         
         &strHTML = &strHTML | "<table class=""PABACKGROUNDINVISIBLE"" role=""presentation"" cellspacing=""0"" cellpadding=""0"" border=""0"" style=""border-style:none""><tbody>";
         
         If &intCorrectAnswerCount = 1 Then /* radio buttons */
            &strControlName = "HRS_RADIO_BTN$Q" | &j;
            &strHiddenControlID = "HRS_ANSWER_HIDDEN$" | (&j - 1);
            
            If None(&strDisabled) Then
               &strHTML = &strHTML | GetHTMLText(HTML.HRS_HIDDEN_CONTROL, &strHiddenControlID);
            End-If;
            
            For &k = 1 To &rsReqAnswers.RowCount
               &rowAnswer = &rsReqAnswers(&k);
               &recAnswer = &rowAnswer.GetRecord(@("Record." | &strAnswerScrollName));
               
               &strControlID = &strControlName | "A" | &k;
               &strOtherProperties = &strDisabled;
               
               &strHTML = &strHTML | "<tr>";
               
               If &rsReqAnswers(&k).HRS_CE_WRK.HRS_SELECTED.Value = "Y" Then
                  &strOtherProperties = &strOtherProperties | " checked";
               End-If;
               
               If All(&strDisabled) Then
                  &strOnClick = "void(0);";
               Else
                  &strOnClick = "document.getElementById('" | &strHiddenControlID | "').value = 'R" | &k | "Y|';";
               End-If;
               
               &strHTML = &strHTML | "<td style=""vertical-align: top;"">" | GetHTMLText(HTML.HRS_RADIO_BUTTON, &strControlName, &strControlID, &recAnswer.HRS_ANSWER_ID.Value, &strOnClick, &strOtherProperties) | "</td>";
               &strHTML = &strHTML | "<td>" | GetHTMLText(HTML.HRS_ANSWER_LABEL, &strControlID | "_LBL", &strControlID, &rowAnswer.HRS_ANS_I.DESCR254.Value) | "</td>";
               
               &strHTML = &strHTML | "</tr>";
               
               &intAnswerIndex = &intAnswerIndex + 1;
            End-For;
         Else /* checkboxes */
            &strControlName = "HRS_CHECKBOX$Q" | &j;
            &strHiddenControlID = "HRS_ANSWER_HIDDEN$" | (&j - 1);
            
            If None(&strDisabled) Then
               &strHTML = &strHTML | GetHTMLText(HTML.HRS_HIDDEN_CONTROL, &strHiddenControlID);
            End-If;
            
            For &k = 1 To &rsReqAnswers.RowCount
               &rowAnswer = &rsReqAnswers(&k);
               &recAnswer = &rowAnswer.GetRecord(@("Record." | &strAnswerScrollName));
               
               &strControlID = &strControlName | "A" | &k;
               &strOtherProperties = &strDisabled;
               
               &strHTML = &strHTML | "<tr>";
               
               If &rowAnswer.HRS_CE_WRK.HRS_SELECTED.Value = "Y" Then
                  &strOtherProperties = &strOtherProperties | " checked";
               End-If;
               
               If All(&strDisabled) Then
                  &strOnClick = "void(0);";
               Else
                  &strOnClick = "var HRSHiddenAnswerField = document.getElementById('" | &strHiddenControlID | "'); HRSHiddenAnswerField.value = HRSHiddenAnswerField.value + 'C" | &k | "' + (this.checked?'Y':'N') + '|';";
               End-If;
               
               &strHTML = &strHTML | "<td style=""vertical-align: top;"">" | GetHTMLText(HTML.HRS_CHECKBOX, &strControlName, &strControlID, &strOnClick, &strOtherProperties) | "</td>";
               &strHTML = &strHTML | "<td>" | GetHTMLText(HTML.HRS_ANSWER_LABEL, &strControlID | "_LBL", &strControlID, &rowAnswer.HRS_ANS_I.DESCR254.Value) | "</td>";
               
               &strHTML = &strHTML | "</tr>";
               
               &intAnswerIndex = &intAnswerIndex + 1;
            End-For;
         End-If;
         
         &strHTML = &strHTML | "</tbody></table>";
         
         &rsReqQuestions(&j).HRS_RADIO_WRK.HTMLAREA.Value = &strHTML;
      End-If;
   End-For;
end-method;

method getFluidPageLayout
   /+ Returns Object +/
   Return &objFluidPageLayout;
end-method;

method getPageName
   /+ &strClassicPageName as String +/
   /+ Returns String +/
   If &c_bIsFluidMode Then
      Return %This.getFluidPageName(&strClassicPageName);
   Else
      Return &strClassicPageName;
   End-If;
end-method;

method getFluidPageName
   /+ &strClassicPageName as String +/
   /+ Returns String +/
   If &objFluidPageLayout <> Null Then
      Return &objFluidPageLayout.getFluidPageName(&strClassicPageName);
   Else
      Return &strClassicPageName;
   End-If;
end-method;

method getMenuName
   /+ &strClassicMenuName as String +/
   /+ Returns String +/
   If &c_bIsFluidMode Then
      Return %This.getFluidMenuName(&strClassicMenuName);
   Else
      Return &strClassicMenuName;
   End-If;
end-method;

method getFluidMenuName
   /+ &strClassicMenuName as String +/
   /+ Returns String +/
   If &objFluidPageLayout <> Null Then
      Return &objFluidPageLayout.getfluidmenuname(&strClassicMenuName);
   Else
      Return &strClassicMenuName;
   End-If;
end-method;

method getTextCatalogID
   /+ &strClassicTextCatalogID as String +/
   /+ Returns String +/
   If &c_bIsFluidMode Then
      Return Substitute(&strClassicTextCatalogID, "CE", "FL");
   Else
      Return &strClassicTextCatalogID;
   End-If;
end-method;

