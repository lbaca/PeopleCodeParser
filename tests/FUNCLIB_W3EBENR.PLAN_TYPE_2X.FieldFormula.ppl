import BN_RATES:RateAccessMgmt:*;

REM ===============================================================;
REM This PeopleCode program contains all of the functions used to         
REM generate and process the Life/AD&D Plan Types in the eBenefits Self-  
REM Service Enrollment application.                                       
REM In addition, several functions used by the Plan Type Summary page of  
REM this application are stored here. These functions return information  
REM regarding current, new and/or default coverage.                       
REM --------------------------------------------------------------------- 
REM                                                                       
REM Major Function             PeopleCode Function                    
REM -------------------------- -----------------------------          
REM Build Election Page        Present2xOptions()                     
REM                         InitializeVariables()                
REM                         HideAllGroups()                      
REM                         ClearAllErrors()                     
REM                         GetCurrent2x()                       
REM                           Set2xDescriptions()                
REM                         LoadOptnScroll()                     
REM                           GetCost()                          
REM                           Insert2xOption()                   
REM                                BuildPlanDescr()                   
REM                         DetermineVisualMethod()              
REM                         ApplyDefaultOption()                 
REM                         ApplyInitialCrossPlan()              
REM                         BuildOptionRestrictions()            
REM                         ExposeOptions()                      
REM                           BuildScrollGroup()                 
REM                             GetPlanTypeDescr()               
REM                             GetBenPlanDescr()                
REM                           BuildYesNoGroup()                  
REM                                  Process2xYesNoSelection()        
REM                           BuildAutoGroup()                   
REM                           HideUserEntryArea()                
REM                         BuildDepBenArea()                
REM                           LoadDepBenGrid()                   
REM                             InsertDepBenGridRow()            
REM                                    SetDepBenRider()               
REM                                  ClearAllocations()               
REM                                  UpdateAllocations()              
REM                                  DeleteDeceasedDeps()             
REM                               DepBenDeceased()               
REM                                  InitDepBenExcess()               
REM                                  SetPctOrFlatAmount()             
REM                               DepBenDeceased()               
REM                                 UpdateAllocationSum()          
REM                                  CollapseDepBenGrid()             
REM                                 ExposeExcessBenef()            
REM                         BuildCourtOrdersText()               
REM                                                                       
REM Option Selected                                                       
REM   If "Scroll" Style:       Process2xScrollSelection()             
REM                         ResetRadioButtons()                  
REM                         HideUserEntryArea()                  
REM                         ExposeUserEntryArea()                
REM                             BuildEEInstructions()              
REM                             BuildEERestrictions()              
REM                         CollapseDepBenGrid()                 
REM   If "Yes/No" Style:       ProcessYesNoSelection()                
REM                         HideUserEntryArea()                  
REM                         ExposeUserEntryArea()                
REM                           BuildEEInstructions()              
REM                           BuildEERestrictions()              
REM                                                                       
REM Option Hyperlink Selected  JumpToInfo()  (via Component PC)       
REM                         SaveGridAttribs()                    
REM Allocation Method Changed                                             
REM                       ClearPrimaryAllocations()              
REM                       ClearSecondaryAllocations()            
REM                       ExposeExcessBenef()                    
REM                                                                       
REM Allocation Amount Entered                                             
REM                       UpdateAllocationSum()                  
REM                                                                       
REM REVIEW DEP/BEN Button Pressed                                         
REM                       RefreshDepBenGrid()                    
REM                         InsertDepBenGridRow()                
REM                         DeleteDeceasedDeps()                 
REM                         UpdateAllocationSum()                
REM                                                                       
REM STORE Button Pressed
REM                       ValidatePage()     
REM                         ClearAllErrors() 
REM                         SaveGridAttribs()
REM Recap Page Activation 
REM                       BuildRecapPage()                       
REM                         RoundCoverage()                      
REM                                                                       
REM Election Page Activation        ResetGridAttribs()                     
REM   (Edit button pressed from Recap page)                                                 
REM                                                                       
REM Recap OK Button Pressed                                      
REM                       StoreData()                       
REM --------------------------------------------------------------------- 
REM Utility Functions                                                     
REM -----------------                                                     
REM GetCurrent2x()   Called by Election Summary Page                     
REM                  Called by Present2xOptions()                        
REM GetNew2x()       Called by Election Summary Page                     
REM GetDefault2x()   Called by the Election Summary Page                 
REM Set2xDescriptions() Called by each of the above functions              
REM Edit2XElection() Called by Election Summary Page ("Submit" Edits)    
REM Edit2xCovrgGrp() called by Election Summary Page ("Submit" Edit)     
REM =====================================================================;

Declare Function AgeInYears PeopleCode FUNCLIB_HR.AGE FieldFormula;
Declare Function LifePlanEnrolleeType PeopleCode FUNCLIB_BEN.BENEFIT_PLAN FieldFormula;
Declare Function GetBasParPlanRec PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetBasParOptnRec PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetBasParCostRec PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetBasParDpndRec PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetBasParInvtRec PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetSpecificRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetSpecificRowSet PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetCurrCovrgRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetPlanDefnRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;

Declare Function GetPgmPlanRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetPgmOptnRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetPgmCostRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetParPlanRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetParOptnRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetParOptnRow2 PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetDfltOptnRow PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function WrapURL PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function WrapText PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function FormatAmount PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function AppendText PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function RebuildDepBen PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function UpdateRS PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetRateRuleIDs PeopleCode FUNCLIB_W3EBENR.PLAN_TYPE_COMMON FieldFormula;
Declare Function GetFormulaText PeopleCode W3EB_BENEF_SMRY.PLAN_TYPE FieldFormula;
/* Text Management */
Declare Function Get_Text PeopleCode FUNCLIB_W3EBENR.W3EB_TEXT FieldFormula;
/* Authoria / Provider URL Management */
Declare Function EnrCheckMerchantDescr PeopleCode FUNCLIB_W3EB.ENRCHECKMERCHDESCR FieldFormula;
Declare Function EnrDisplayMerchantDescr PeopleCode FUNCLIB_W3EB.ENRCHECKMERCHDESCR FieldFormula;

/* Globals */
Global Rowset &W3EBGBLRS_PARTIC;
Global Rowset &W3EBGBLRS_2X_PLANS;
Global Rowset &W3EBGBLRS_2X_COVRG;
Global Rowset &W3EBGBLRS_PGM_DEF;
Global Rowset &W3EBGBLRS_DEP_BEN;
Global Rowset &W3EBGBLRS_COVG_GRP;
Global Record &W3EBGBLREC_WORK;
Global boolean &AllowAdd;
Global BN_RATES:RateAccessMgmt:BenefitRate &W3EBGBLOBJ_RATEMGR;
Global BN_RATES:RateAccessMgmt:UserRateInput &W3EBGBLOBJ_RATEKEYS;

Global date &UseEventDT;

Global string &gblPlanType;


/* Component (PanelGroup) Variables */
Component Rowset &OPTNScroll;
Component Rowset &DEPBENGrid;
Component Rowset &PriBenGrid;
Component Rowset &SecBenGrid;
Component Row &PlanRow;
Component Row &DEFNRow;
Component Record &OPTNRec;
Component Record &PGMPlanRec;
Component Record &OPTNPgmRec;
Component Record &COSTPgmRec;
Component Record &PlanRec;

Component number &OptnCount;
Component number &PlanTypeCredits;
Component string &WaiveAvailable;
Component string &DefaultDefined;
Component string &WaiveIsDefault;
Component string &ProofRequired;
Component string &EELevelPlanExists;
Component string &SumOfCvgExists;
Component string &XPlanExists;
Component string &XPlanIdentical;
Component string &DisabledOptnExists;
Component string &CovgGroupCdExists;
Component string &DuplicateCoverage;
Component string &CurrElectInd;
Component string &CurrElectOptionCd;
Component string &CvrgElect;
Component string &ElectRequired;
Component string &IgnoreDepBenEdit;
Component number &SelectedOptionRow;
Component number &DepBenCount;
Component string &RidersExist;
Component string &CourtOrdersExist;
Component string &SpWaiverExists;
Component string &PreEnteredDeps;
Component string &CoverageBeginDt;
Component string &DeductionBeginDt;
Component string &FreqText;
Component string &FreqTextCap;
Component number &EERateUnit;
Component string &OPTNErrorsExist;
Component string &DEPBENErrorsExist;
Component string &NewLine;
Component string &HTMLNewLine;
Component string &HTMLParagraph;
Component string &Asterisk;
Component string &Carat;
Component string &Pound;
Component string &Plus;
Component string &SalaryText;
Component string &VisualMethod;
Component string &DependentPlan;
Component string &WaiveText;
/* Variables to restore state */
Component string &ResetGridAttribs;

Component string &LabelName;
Component boolean &VisibleName;
Component number &CurrentRow2x;

Component string &LabelRelationship;
Component string &LabelCurrPriAmt;
Component string &LabelCurrPriPct;
Component string &LabelCurrSecAmt;
Component string &LabelCurrSecPct;
Component string &LabelNewPrimary;
Component string &LabelNewSecondary;
Component string &LabelCovered;
Component boolean &VisibleCurrPriAmt;
Component boolean &VisibleCurrPriPct;
Component boolean &VisibleCurrSecAmt;
Component boolean &VisibleCurrSecPct;
Component boolean &VisibleNewPri;
Component boolean &VisibleNewSec;
Component boolean &VisibleSelected;
/* Variables passed via Global Record */
Component string &SCHED_ID;
Component string &EMPLID;
Component number &EMPL_RCD;
Component number &EVENT_ID;
Component string &EVENT_DT;
Component date &EVENT_DT_DT;
Component string &PERSON_NAME;
Component string &PLAN_TYPE;
Component string &COLLECT_DEPBEN;
Component string &SHOW_CREDIT;
Component string &COST_FREQUENCY;
Component number &TOT_CREDIT;

/* Variables to support EE-Specified Coverage precise rate determination */
Component number &PreciseRate, &PreciseUnit;
Component string &PreciseFreq;
Local date &RateEffdt;

/* Locals */
Local Rowset &LocalRS;
Local array of string &CvgGrpCdArr; /* Array of Coverage Group Codes */
Local array of number &CvgGrpTotalArr; /* Array of Total Coverage by Group Code */
Local array of array of string &CvgGrpPlansArr; /* Array of Benefit Plans by Group Code */


Function InitializeVariables()
   
   &Asterisk = Char(42);
   &Pound = Char(35);
   &Carat = Char(94);
   &Plus = "+";
   &NewLine = Char(10) | Char(13);
   &HTMLNewLine = "<BR>";
   &HTMLParagraph = "<P>";
   &EERateUnit = 1000; /* BenAdmin rate unit for EE-Specified Covrg*/
   &OptionResExists = "N";
   &ElectRequired = "N";
   &IgnoreDepBenEdit = "N";
   &ResetGridAttribs = "N";
   &VisibleCurrPriAmt = True;
   &VisibleCurrPriPct = True;
   &VisibleCurrSecAmt = True;
   &VisibleCurrSecPct = True;
   &VisibleNewPri = True;
   &VisibleNewSec = True;
   &VisibleSelected = True;
   
   &VisibleName = True;
   
   
   &PLAN_TYPE = &W3EBGBLREC_WORK.PLAN_TYPE.Value;
   
   /* code to get variables when back button is used */
   
   If All(&PLAN_TYPE) Then
      &gblPlanType = &W3EBGBLREC_WORK.PLAN_TYPE.Value;
   Else
      If None(&PLAN_TYPE) Then
         &PLAN_TYPE = &gblPlanType;
      End-If;
   End-If;
   
   
   &SCHED_ID = &W3EBGBLREC_WORK.SCHED_ID.Value;
   &EMPLID = &W3EBGBLREC_WORK.EMPLID.Value;
   &EMPL_RCD = &W3EBGBLREC_WORK.EMPL_RCD.Value;
   &EVENT_ID = &W3EBGBLREC_WORK.EVENT_ID.Value;
   &EVENT_DT = &W3EBGBLREC_WORK.EVENT_DT.Value;
   &EVENT_DT_DT = &W3EBGBLREC_WORK.EVENT_DT.Value;
   &UseEventDT = &W3EBGBLREC_WORK.EVENT_DT.Value;
   &PERSON_NAME = &W3EBGBLREC_WORK.PERSON_NAME.Value;
   &COLLECT_DEPBEN = &W3EBGBLREC_WORK.COLLECT_DEPBEN.Value;
   &SHOW_CREDIT = &W3EBGBLREC_WORK.SHOW_CREDIT.Value;
   &COST_FREQUENCY = &W3EBGBLREC_WORK.COST_FREQUENCY.Value;
   &TOT_CREDIT = &W3EBGBLREC_WORK.TOT_CREDIT.Value;
   
   &NewPlanRow = GetParPlanRow(&PLAN_TYPE);
   If All(&NewPlanRow) Then
      &NewOptionCd = &NewPlanRow.BAS_PAR_PLAN_VW.OPTION_CD.Value;
      &NewParOptnRow = GetParOptnRow(&PLAN_TYPE, &NewOptionCd);
      If All(&NewParOptnRow) Then
         &Benefit_Plan = &NewParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
      End-If;
   End-If;
   
   If &COST_FREQUENCY = "D" Then
      /* "per-pay-period" */
      Get_Text("PER-PAY-PERIOD", &PLAN_TYPE, &FreqText, " ", " ", " ", " ", " ");
      Get_Text("PER-PAY-PERIOD1", &PLAN_TYPE, &FreqTextCap, " ", " ", " ", " ", " ");
   Else
      /* annual */
      Get_Text("ANNUAL", &PLAN_TYPE, &FreqText, " ", " ", " ", " ", " ");
      Get_Text("ANNUAL1", &PLAN_TYPE, &FreqTextCap, " ", " ", " ", " ", " ");
   End-If;
   
   Get_Text("WAIVE", &PLAN_TYPE, &WaiveText, " ", " ", " ", " ", " ");
   
   &Enrolle_Type = LifePlanEnrolleeType(&PLAN_TYPE);
   If &Enrolle_Type = "2" Then
      &DependentPlan = "Y";
   Else
      &DependentPlan = "N";
   End-If;
   
   /* Setup a RowSet for the internal Option Scroll */
   &OPTNScroll = GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW);
   
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: GetPlanTypeDescr                                  */
/* Returns: String containing the Plan Type Description.       */
/* Input Parameters: PlanType                                  */
/* Output Parameters: None                                     */
/* Description:                                                */
/*                                                             */
/* ----------------------------------------------------------- */
Function GetPlanTypeDescr(&PlanType) Returns string;
   DERIVED_BAS.PLAN_TYPE = &PlanType;
   &PlanTypeDescr = GetLevel0()(1).DERIVED_BAS.PLAN_TYPE.LongTranslateValue;
   
   Return &PlanTypeDescr;
End-Function;

/* ----------------------------------------------------------- */
/* Function: SaveGridAttribs                                   */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Saves the visual attributes of the Dep/Ben grid, that    */
/*    were changed dynamically. We need to manually restore    */
/*    these attributes when returning to the page.             */
/* ----------------------------------------------------------- */
Function SaveGridAttribs();
   &ResetGridAttribs = "Y";
   &GridHandle = GetGrid(Panel.W3EB_ENR_2X_ELECT, "DEP_BEN_GRID");
   &VisibleCurrPriAmt = &GridHandle.PRIMARY_AMT.Visible;
   &VisibleCurrPriPct = &GridHandle.PRIMARY_PCT.Visible;
   &VisibleCurrSecAmt = &GridHandle.SECONDARY_AMT.Visible;
   &VisibleCurrSecPct = &GridHandle.SECONDARY_PCT.Visible;
   &VisibleNewPri = &GridHandle.NEW_PRIMARY.Visible;
   
   /* added line here to support text table for name column*/
   &VisibleNewSec = &GridHandle.NEW_SECONDARY.Visible;
   &VisibleName = &GridHandle.COL2.Visible;
   &LabelName = &GridHandle.COL2.Label;
   /* end */
   
   &VisibleSelected = &GridHandle.SELECTED.Visible;
   &LabelRelationship = &GridHandle.RELATIONSHIP_TEXT.Label;
   &LabelCurrPriAmt = &GridHandle.PRIMARY_AMT.Label;
   &LabelCurrPriPct = &GridHandle.PRIMARY_PCT.Label;
   &LabelCurrSecAmt = &GridHandle.SECONDARY_AMT.Label;
   &LabelCurrSecPct = &GridHandle.SECONDARY_PCT.Label;
   &LabelNewPrimary = &GridHandle.NEW_PRIMARY.Label;
   &LabelNewSecondary = &GridHandle.NEW_SECONDARY.Label;
End-Function;

/* ---------------------------------------------------------------------------------- */
/* Function: GetPreciseRate                                                           */
/* Returns: Output variables populated with information regarding the coverage        */
/*          coverage in the requested Plan Type.                                      */
/* Input Parameters:  &PlanType          - Plan Type                                  */
/*                    &BenPlan           - Benefit Plan                               */
/* Output Parameters: &PreciseRate       - The "Rate per Unit" from the Rate Table    */
/*                    &PreciseUnit       - The "Unit" from the Rate Table             */
/* Description:                                                                       */
/*    Used only for Life/ADD plans defined as "Coverage Specified on Employee Record).*/
/*    For this type of plan, the "cost" contained in the Bas_Partic_Cost row is       */
/*    actually only a "seed" rate per amount of coverage, since the actual coverage   */
/*    can't be known until the employee makes his election.                           */
/*    We use this function to access the actual rate from the appropriate rate table, */
/*    and display this rate amount with full-precision in the text that solicits the  */
/*    employee for a coverage amount. We also use this full-precision rate to         */
/*    calculate the estimated cost on the Confirm page.                               */
/* ---------------------------------------------------------------------------------- */
Function GetPreciseRate(&PlanType As string, &BenPlan As string, &PreciseRate As number, &PreciseUnit As number)
   
   /* This function can be called by the Summary component - ensure that required */
   /* component variables are populated.                                          */
   If None(&EVENT_DT_DT) Then
      &EMPLID = &W3EBGBLREC_WORK.EMPLID.Value;
      &EMPL_RCD = &W3EBGBLREC_WORK.EMPL_RCD.Value;
      &EVENT_DT_DT = &W3EBGBLREC_WORK.EVENT_DT.Value;
      &EVENT_DT = &W3EBGBLREC_WORK.EVENT_DT.Value;
      &COST_FREQUENCY = &W3EBGBLREC_WORK.COST_FREQUENCY.Value;
   End-If;
   
   &PreciseRate = 0.00;
   &PreciseUnit = 0.00;
   &PreciseFreq = "";
   
   GetRateRuleIDs(&PlanType, &BenPlan, "", &RateTblId, &CalcRuleId);
   If All(&RateTblId, &CalcRuleId) Then
      
      /* Instantiate global managers if not already done. */
      If (&W3EBGBLOBJ_RATEMGR = Null) Then
         &W3EBGBLOBJ_RATEMGR = create BN_RATES:RateAccessMgmt:BenefitRate();
      End-If;
      If (&W3EBGBLOBJ_RATEKEYS = Null) Then
         &W3EBGBLOBJ_RATEKEYS = create BN_RATES:RateAccessMgmt:UserRateInput();
      End-If;
      
      /* Set up basic rate access keys, but only if employee has changed. */
      If (&W3EBGBLOBJ_RATEKEYS.EmplID <> &EMPLID) Then
         &W3EBGBLOBJ_RATEKEYS.clearAll();
         &W3EBGBLOBJ_RATEKEYS.EmplID = &EMPLID;
         &W3EBGBLOBJ_RATEKEYS.EmplRcd = &EMPLRCD;
      End-If;
      
      /* Obtain the desired rateset. */
      If (&W3EBGBLOBJ_RATEMGR.getRateSet(&RateTblId, &CalcRuleId, &EVENT_DT_DT, &W3EBGBLOBJ_RATEKEYS)) Then
         If (&W3EBGBLOBJ_RATEMGR.RateTbl.IsRateBased) Then
            &PreciseUnit = &W3EBGBLOBJ_RATEMGR.RateTbl.RateUnit;
            &PreciseFreq = &W3EBGBLOBJ_RATEMGR.RateTbl.RateFrequency;
            If (&W3EBGBLOBJ_RATEMGR.CompositeRateStyle) Then
               &PreciseRate = &W3EBGBLOBJ_RATEMGR.EmployeeRate;
            Else
               &PreciseRate = &W3EBGBLOBJ_RATEMGR.BeforeTaxRate + &W3EBGBLOBJ_RATEMGR.AfterTaxRate;
            End-If;
         End-If;
      End-If;
      
      If All(&PreciseRate, &PreciseUnit, &PreciseFreq) Then
         
         /* Convert Rate to proper Frequency */
         If &COST_FREQUENCY = "D" Then
            /* Costs displayed to employee expressed as Per-Pay-Period */
            &EEPayFreqFactor = &W3EBGBLREC_WORK.PAY_PDS_PER_YEAR.Value;
         Else
            /* Costs displayed to employee as Annual Costs */
            &EEPayFreqFactor = 1;
         End-If;
         
         Evaluate &PreciseFreq
            /* Rate Table rate is expressed as... */
         When = "A"
            &RateFreqFactor = 1;
            Break;
         When = "B"
            &RateFreqFactor = 26;
            Break;
         When = "M"
            &RateFreqFactor = 12;
            Break;
         When = "S"
            &RateFreqFactor = 24;
            Break;
         When = "W"
            &RateFreqFactor = 52;
            Break;
         End-Evaluate;
         
         /* Convert between the RateFreqFactor and the EEPayFreqFactor */
         If All(&RateFreqFactor, &EEPayFreqFactor) Then
            &PreciseRate = &PreciseRate * (&RateFreqFactor / &EEPayFreqFactor);
         End-If;
      End-If;
   End-If;
End-Function;

Function GetFormula(&BN_Formula_ID, &Effdt, &FormulaTxt);
   Local SQL &Formula_sql;
   &FormulaTxt = "";
   
   &Formula_sql = CreateSQL("SELECT A.BN_SEQ_NUM, A.BEN_OPERAND, A.BN_ENTRY_TYP, A.BN_VALUE FROM PS_BN_FORM_DEF A WHERE A.BN_FORMULA_ID =:1 AND A.EFFDT = (SELECT MAX(B.EFFDT) FROM PS_BN_FORM_DEF B WHERE B.BN_FORMULA_ID = A.BN_FORMULA_ID AND B.EFFDT <= %DateIn(:2)) ORDER BY A.BN_SEQ_NUM ASC", &BN_Formula_ID, &Effdt);
   
   While &Formula_sql.Fetch(&BN_SEQ_NUM, &BEN_OPERAND, &BN_ENTRY_TYP, &BN_VALUE)
      
      Evaluate &BEN_OPERAND
      When = " "
      When = ""
         If &BN_ENTRY_TYP = "CNST" Then
            &FormulaTxt = &FormulaTxt | &BN_VALUE;
         Else
            If &BN_ENTRY_TYP = "BASE" Then
               &FormulaTxt = &FormulaTxt | "Salary";
            End-If
         End-If;
         Break;
         
      When = "+"
      When = "-"
      When = "*"
      When = "/"
         If &BEN_OPERAND = "*" Then
            &BEN_OPERAND = "X";
         End-If;
         If &BN_ENTRY_TYP = "CNST" Then
            &FormulaTxt = &FormulaTxt | " " | &BEN_OPERAND | " " | &BN_VALUE | " ";
         Else
            If &BN_ENTRY_TYP = "BASE" Then
               &FormulaTxt = &FormulaTxt | " " | &BEN_OPERAND | " " | "Salary" | " ";
            End-If
         End-If;
         Break;
         
      End-Evaluate;
      
   End-While;
   
   &Formula_sql.Close();
   
End-Function;

/* ---------------------------------------------------------------------------------- */
/* Function: Set2xDescriptions                                                        */
/* Returns: Output variables populated with information regarding the coverage        */
/*          coverage in the requested Plan Type.                                      */
/* Input Parameters:  &Life_ADD_Covrg    - Plan Definition                            */
/*                    &Flat_Amount       - Plan Definition     (Current Coverage)     */
/*                    &Factor_XSalary    - Plan Definition     (Current Coverage)     */
/*                    &Calculated_Base   - Calculated Coverage (New/Default Elections)*/
/*                    &EE_Life_ADD_Covrg - EE-Specified                               */
/*                    &EE_Flat_Amount    - EE-Specified                               */
/*                    &EE_Factor_XSalary - EE-Specified                               */
/*                    &DescrShort        - Plan Definition                            */
/* Output Parameters: &Covrg             - The Flat Amount of coverage                */
/*                    &Text              - A description of coverage                  */
/* Description:                                                                       */
/*    Sets the &Covrg and &Text parameters to a description of coverage. We do this   */
/*    because we cannot always communicate the level of coverage in absolute terms    */
/*    (such as the case of current coverage expressed as a Factor of Salary).         */
/*    The Flat_Amount and Factor_XSalary input parameters are used only for Current   */
/*    Coverage - since there is no "Calculated Base" available.                       */
/*    The Calculated_Base parameter is used only for "New" coverage to be elected     */
/*    from the options available in the event.                                        */
/*    The EE_xxx paramters are used only for EE-Specified plans (Life_ADD_Covrg = 3). */
/* ---------------------------------------------------------------------------------- */
Function Set2xDescriptions(&Coverage_Type, &BN_Formula_ID, &Enrolle_Type, &Sum_Dep_Covg, &Effdt, &Calculated_Base, &EE_Flat_Amount, &DescrShort, &Covrg, &Text);
   &Text = " ";
   &Covrg = 0;
   If None(&SalaryText) Then
      Get_Text("SALARY", &PLAN_TYPE, &SalaryText, " ", " ", " ", " ", " ");
   End-If;
   
   
   
   If &Coverage_Type = "2" Then
      If &Sum_Dep_Covg = "Y" Then
         Get_Text("SUM_OF_DEP", &PLAN_TYPE, &Text, " ", " ", " ", " ", " ");
      Else
         &Covrg = &EE_Flat_Amount;
      End-If;
   Else
      If None(&Calculated_Base) Then
         &FormulaTxt = "";
         GetFormula(&BN_Formula_ID, &Effdt, &FormulaTxt);
         &Add_Opr = Find("+", &FormulaTxt);
         &Sub_Opr = Find("-", &FormulaTxt);
         &Mul_Opr = Find("*", &FormulaTxt);
         &Div_Opr = Find("/", &FormulaTxt);
         &Sal_Str = Find("S", &FormulaTxt);
         If (&Add_Opr > 0 Or
               &Sub_Opr > 0 Or
               &Mul_Opr > 0 Or
               &Div_Opr > 0 Or
               &Sal_Str > 0) Then
            &Text = &FormulaTxt;
         Else
            &Text = "";
            &Covrg = &FormulaTxt;
         End-If;
      Else
         &Covrg = &Calculated_Base;
         &FormulaTxt = "";
         GetFormula(&BN_Formula_ID, &Effdt, &FormulaTxt);
         &Add_Opr = Find("+", &FormulaTxt);
         &Sub_Opr = Find("-", &FormulaTxt);
         &Mul_Opr = Find("*", &FormulaTxt);
         &Div_Opr = Find("/", &FormulaTxt);
         &Sal_Str = Find("S", &FormulaTxt);
         If (&Add_Opr > 0 Or
               &Sub_Opr > 0 Or
               &Mul_Opr > 0 Or
               &Div_Opr > 0 Or
               &Sal_Str > 0) Then
            &Text = &FormulaTxt;
            
         End-If;
      End-If;
      
   End-If;
   
   
End-Function;


/* ---------------------------------------------------------------------------------- */
/* Function: GetCurrent2x(&Plan_Type, &CvrgElect, &BenefitPlan, &Descr,               */
/*                        &DescrShort, &Covrg, &Text) */
/* Returns: Output variables populated with information regarding the current         */
/*          coverage in the requested Plan Type.                                      */
/* Input Parameters:  &Plan Type                                                      */
/* Output Parameters: &CvrgElect                                                      */
/*                    &BenefitPlan                                                    */
/*                    &Descr                                                          */
/*                    &DescrShort                                                     */
/*                    &Covrg                                                          */
/*                    &Text                                                           */
/* Description:                                                                       */
/*    Calls the GetCurrCovrgRow() function to get a pointer to the current            */
/*    coverage for the requested plan type.                                           */
/*    Populates the remainder of the output variables with values that depend         */
/*    upon the employee's current coverage, as well as the type of plan that          */
/*    the employee is enrolled in.                                                    */
/*    Sets following local variables:                                                 */
/*       CurrElectInd  (Y/N is there a current election?)                             */
/*       CurrElectPlan (Benefit Plan of Current Election - blank if Waive)            */
/*                                                                                    */
/*    NOTE: This function is called by the Summary panelgroup, as well as the         */
/*          Life/AD&D panelgroup.                                                     */
/* ---------------------------------------------------------------------------------- */
Function GetCurrent2x(&Plan_Type, &Cvrg_Elect, &Descr, &BenefitPlan, &Life_ADD_Covrg, &DescrShort, &Covrg, &Text);
   
   &Cvrg_Elect = "T";
   &BenefitPlan = " ";
   &Life_ADD_Covrg = " ";
   &Descr = "No Coverage";
   &DescrShort = " ";
   &Covrg = " ";
   &Text = " ";
   &CurrElectInd = "N";
   &CurrElectPlan = " ";
   &Calculated_Base = 0;
   
   &CURRCVGRow = GetCurrCovrgRow(&Plan_Type);
   
   If &CURRCVGRow <> Null Then
      &DescrShort = &CURRCVGRow.BENEF_PLAN_TBL.DESCRSHORT.Value;
      &Descr = &CURRCVGRow.BENEF_PLAN_TBL.DESCR.Value;
      &Cvrg_Elect = &CURRCVGRow.W3EB_2XCVG_VW.COVERAGE_ELECT.Value;
      &BenefitPlan = &CURRCVGRow.W3EB_2XCVG_VW.BENEFIT_PLAN.Value;
      &Effdt = &CURRCVGRow.W3EB_2XCVG_VW.Effdt.Value;
      
      &CurrElectInd = "Y";
      &CurrElectPlan = &CURRCVGRow.W3EB_2XCVG_VW.BENEFIT_PLAN.Value;
      
      /* Plan-Level Attributes */
      &Coverage_Type = &CURRCVGRow.LIFE_ADD_TBL.COVERAGE_TYPE.Value;
      &BN_Formula_ID = &CURRCVGRow.LIFE_ADD_TBL.BN_FORMULA_ID.Value;
      &Enrolle_Type = &CURRCVGRow.LIFE_ADD_TBL.ENROLLE_TYPE.Value;
      &Sum_Dep_Covg = &CURRCVGRow.LIFE_ADD_TBL.SUM_DEP_COVG.Value;
      
      /* Employee-Specified Attributes */
      
      &EE_Flat_Amount = &CURRCVGRow.W3EB_2XCVG_VW.FLAT_AMOUNT.Value;
      
      
      
      Set2xDescriptions(&Coverage_Type, &BN_Formula_ID, &Enrolle_Type, &Sum_Dep_Covg, &Effdt, &Calculated_Base, &EE_Flat_Amount, &DescrShort, &Covrg, &Text);
   End-If;
   
End-Function;


/* ---------------------------------------------------------------------------------- */
/* Function: GetNew2x(&Plan_Type, &CvrgElect, &BenefitPlan, &Default, &Option_Id,     */
/*                    &Descr, &DescrShort, &Covrg, &Text)                             */
/* Returns: Output variables populated with information regarding the "new"           */
/*          coverage in the requested Plan Type.                                      */
/* Input Parameters:  &Plan Type                                                      */
/* Output Parameters: &CvrgElect                                                      */
/*                    &BenefitPlan                                                    */
/*                    &Default (Y/N)                                                  */
/*                    &Option_Id                                                      */
/*                    &Descr                                                          */
/*                    &DescrShort                                                     */
/*                    &Covrg                                                          */
/*                    &Text                                                           */
/* Description:                                                                       */
/*    Examines the Bas_Partic_Plan row in the Global RowSetfor the requested plan     */
/*    type to determine "new" coverage. The Option_Cd field may have been set as a    */
/*    result of the user making an election, or because the election was pre-entered. */
/*    If the Option_Cd is blank, we will determine the Default option, and return     */
/*    this as the "new" coverage.                                                     */
/*    Populates the remainder of the output variables with values that depend         */
/*    upon the employee's new/default coverage, as well as the type of plan that      */
/*    the employee is enrolled in.                                                    */
/*                                                                                    */
/*    NOTE: This function is called by the Summary panelgroup.                        */
/* ---------------------------------------------------------------------------------- */
Function GetNew2x(&Plan_Type, &Cvrg_Elect, &BenefitPlan, &Coverage_Type, &Enrolle_Type, &Sum_Dep_Covg, &DefaultApplied, &NewOptionId, &Descr, &DescrShort, &Covrg, &Text);
   &Cvrg_Elect = "T";
   &BenefitPlan = " ";
   &Coverage_Type = " ";
   &Enrolle_Type = " ";
   &Sum_Dep_Covg = " ";
   &DefaultApplied = "N";
   &Descr = "No Coverage";
   &DescrShort = "No Cvrg";
   &Covrg = " ";
   &Text = " ";
   &NewOptionCd = " ";
   &NewOptionId = 0;
   &NewOptnType = " ";
   
   /* Get the Bas_Partic_Plan Row */
   &NewPlanRow = GetParPlanRow(&Plan_Type);
   If &NewPlanRow <> Null Then
      &NewOptionCd = &NewPlanRow.BAS_PAR_PLAN_VW.OPTION_CD.Value;
      If None(&NewOptionCd) Then
         /* Get the Default Option and Benefit Plan */
         &DfltOptnRow = GetDfltOptnRow(&Plan_Type);
         If &DfltOptnRow <> Null Then
            &NewOptionCd = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_CD.Value;
            &NewOptionId = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_ID.Value;
            &NewOptnType = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
            &BenefitPlan = &DfltOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
            &Calculated_Base = &DfltOptnRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value;
            &Effdt = &DfltOptnRow.W3EB_PAROPTN_VW.EVENT_DT.Value;
            &DefaultApplied = "Y";
         End-If;
      Else
         /* Get the Benefit Plan for the elected/pre-entered option */
         &NewParOptnRow = GetParOptnRow(&Plan_Type, &NewOptionCd);
         If &NewParOptnRow <> Null Then
            &NewOptnType = &NewParOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
            &NewOptionId = &NewParOptnRow.W3EB_PAROPTN_VW.OPTION_ID.Value;
            &BenefitPlan = &NewParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
            &Calculated_Base = &NewParOptnRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value;
            &Effdt = &NewParOptnRow.W3EB_PAROPTN_VW.EVENT_DT.Value;
         End-If;
      End-If;
      If All(&NewOptionCd) Then
         /* We have an election, a pre-enter, or a default option */
         If &NewOptnType = "O" Then
            /* Get the Benefit Plan definition */
            &NewPlanDefnRow = GetPlanDefnRow(&Plan_Type, &BenefitPlan);
            /* Setup Plan Attributes */
            
            &Coverage_Type = &NewPlanDefnRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
            &BN_Formula_ID = &NewPlanDefnRow.W3EB_2XPLNDF_VW.BN_FORMULA_ID.Value;
            &Enrolle_Type = &NewPlanDefnRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
            &Sum_Dep_Covg = &NewPlanDefnRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
            
            
            &DescrShort = &NewPlanDefnRow.BENEF_PLAN_TBL.DESCRSHORT.Value;
            &Descr = &NewPlanDefnRow.BENEF_PLAN_TBL.DESCR.Value;
            If &DefaultApplied = "N" Then
               
               &EE_Flat_Amount = &NewPlanRow.BAS_PAR_PLAN_VW.FLAT_AMOUNT.Value;
               
            Else
               /* EE-Specified Default can cause difficulties...                    */
               /* If we're defaulting to current coverage, and the current coverage */
               /* is an EE-Specified plan, then we can only determine the coverage  */
               /* amount if Pre-Enter has been turned on.                           */
               If None(&NewPlanRow.BAS_PAR_PLAN_VW.FLAT_AMOUNT.Value) Then
                  
                  /* The EE-Specified coverage has not been pre-entered.            */
                  /* We have to punt.                                               */
                  
                  &EE_Flat_Amount = 0;
                  
               Else
                  /* Use the Pre-Entered EE-Specified coverage parameters */
                  
                  &EE_Flat_Amount = &NewPlanRow.BAS_PAR_PLAN_VW.FLAT_AMOUNT.Value;
                  
               End-If;
            End-If;
            &Cvrg_Elect = "E";
            
            Set2xDescriptions(&Coverage_Type, &BN_Formula_ID, &Enrolle_Type, &Sum_Dep_Covg, &Effdt, &Calculated_Base, &EE_Flat_Amount, &DescrShort, &Covrg, &Text);
         Else
            /* New coverage is a Waive */
            &Cvrg_Elect = "W";
            &Descr = " ";
            &DescrShort = " ";
            &BenefitPlan = " ";
         End-If;
      End-If;
   End-If;
   
End-Function;


/* ---------------------------------------------------------------------------------- */
/* Function: GetDefault2x(&Plan_Type, &CvrgElect, &BenefitPlan, &Descr, &DescrShort,  */
/*                        &Covrg, &Text)                                              */
/* Returns: Output variables populated with information regarding the "default"       */
/*          coverage in the requested Plan Type.                                      */
/* Input Parameters:  &Plan Type                                                      */
/* Output Parameters: &CvrgElect                                                      */
/*                    &BenefitPlan                                                    */
/*                    &Option_Id                                                      */
/*                    &Descr                                                          */
/*                    &DescrShort                                                     */
/*                    &Covrg                                                          */
/*                    &Text                                                           */
/* Description:                                                                       */
/*    Examines the W3EB_PAROPTN_VW row in the Global RowSetfor the requested plan     */
/*    type to determine the option identified as the Default Option.                  */
/*    Populates the output variables with values that depend upon the plan definition */
/*    of the default option.                                                          */
/*                                                                                    */
/*    NOTE: This function is called by the Summary panelgroup.                        */
/* ---------------------------------------------------------------------------------- */
Function GetDefault2x(&Plan_Type, &Cvrg_Elect, &BenefitPlan, &Coverage_Type, &Enrolle_Type, &Sum_Dep_Covg, &OptionId, &Descr, &DescrShort, &Covrg, &Text);
   &Cvrg_Elect = "T";
   &Descr = "No Coverage";
   &DescrShort = "No Cvrg";
   &Covrg = " ";
   &Text = " ";
   &NewOptionCd = " ";
   &NewOptnType = " ";
   &BenefitPlan = " ";
   &Life_ADD_Covrg = " ";
   &OptionId = 0;
   
   /* Get the Default Option and Benefit Plan */
   &DfltOptnRow = GetDfltOptnRow(&Plan_Type);
   If &DfltOptnRow <> Null Then
      &NewOptionCd = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_CD.Value;
      &NewOptnType = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
      &BenefitPlan = &DfltOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
      &OptionId = &DfltOptnRow.W3EB_PAROPTN_VW.OPTION_ID.Value;
      &Calculated_Base = &DfltOptnRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value;
      &Effdt = &DfltOptnRow.W3EB_PAROPTN_VW.EVENT_DT.Value;
   End-If;
   
   If All(&NewOptionCd) Then
      /* We have a default option */
      If &NewOptnType = "O" Then
         /* Get the Benefit Plan definition */
         &NewPlanDefnRow = GetPlanDefnRow(&Plan_Type, &BenefitPlan);
         /* Setup Plan Attributes */
         &Coverage_Type = &NewPlanDefnRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
         &BN_Formula_ID = &NewPlanDefnRow.W3EB_2XPLNDF_VW.BN_FORMULA_ID.Value;
         &Enrolle_Type = &NewPlanDefnRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
         &Sum_Dep_Covg = &NewPlanDefnRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
         
         &DescrShort = &NewPlanDefnRow.BENEF_PLAN_TBL.DESCRSHORT.Value;
         &Descr = &NewPlanDefnRow.BENEF_PLAN_TBL.DESCR.Value;
         /* EE-Specified Default does not make sense - set EE Attributes to zero */
         
         &EE_Flat_Amount = 0;
         
         &Cvrg_Elect = "E";
         
         Set2xDescriptions(&Coverage_Type, &BN_Formula_ID, &Enrolle_Type, &Sum_Dep_Covg, &Effdt, &Calculated_Base, &EE_Flat_Amount, &DescrShort, &Covrg, &Text);
      Else
         /* New coverage is a Waive */
         &Cvrg_Elect = "W";
         &Descr = " ";
         &DescrShort = " ";
         &BenefitPlan = " ";
      End-If;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: Calculate2xCoverage()                             */
/* Returns: Nothing                                            */
/* Input Parameters:  &Plan_Type                               */
/*                    &Option_Cd                               */
/*                    &EE_Flat_Amount  - EE-Specified Flat Amt */
/*                    &EE_Factor_XSalary - EE-Specified Factor */
/* Output Parameters: None                                     */
/*                                                             */
/* Returns:                                                    */
/*                    Coverage Amount                          */
/*                                                             */
/* Description:                                                */
/*    Uses the plan definition (and possibly the EE-specified  */
/*    amounts) to calculate the amount of coverage for the     */
/*    indicated plan. Note that this plan may have been        */
/*    elected, or we may just be calculating the coverage in   */
/*    order to determine if we can "enable" an option that has */
/*    a Cross Plan percentage requirement.                     */
/*    The calculated coverage amount is returned from the call.*/
/*                                                             */
/*    This function is to be used only for options in the      */
/*    Bas_Partic_Option set - it cannot be used for current    */
/*    coverage.                                                */
/* ----------------------------------------------------------- */
Function Calculate2xCoverage(&Plan_Type, &Option_Cd, &EE_Flat_Amount, &EE_Factor_XSalary) Returns number;
   &Coverage_Amount = 0;
   /* First, get the Benefit Plan and Calculated Base from Bas_Partic_Optn */
   &ParOptnRow = GetParOptnRow(&Plan_Type, &Option_Cd);
   If &ParOptnRow <> Null Then
      &Calculated_Base = &ParOptnRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value;
      &Benefit_Plan = &ParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
      &Option_Type = &ParOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
   Else
      &Calculated_Base = 0;
      &Benefit_Plan = " ";
      &Option_Type = " ";
   End-If;
   /* Get the Benefit Plan Definition */
   If All(&Benefit_Plan) Then
      &PlanDefnRow = GetPlanDefnRow(&Plan_Type, &Benefit_Plan);
      If &PlanDefnRow <> Null Then
         
         &Coverage_Type2x = &PlanDefnRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
         &Enrolle_Type2x = &PlanDefnRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
         &Sum_Dep_Covg2x = &PlanDefnRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
      End-If;
   End-If;
   If &Option_Type = "O" Then
      
      If &Coverage_Type2x = "1" Then
         &Coverage_Amount = &Calculated_Base;
      Else
         If &Coverage_Type2x = "2" And
               &Sum_Dep_Covg2x = "N" Then
            &Coverage_Amount = &EE_Flat_Amount;
         Else
            If &Coverage_Type2x = "2" And
                  &Sum_Dep_Covg2x = "Y" Then
               &Coverage_Amount = 0;
               &ParPlanRow = GetParPlanRow(&Plan_Type);
               &ParDpndRowSet = GetSpecificRowSet(&ParPlanRow, "BAS_PAR_DPND_VW");
               For &J = 1 To &ParDpndRowSet.ActiveRowCount
                  &ParDpndRow = &ParDpndRowSet.GetRow(&J);
                  &ParDpndRec = &ParDpndRow.GetRecord(Record.BAS_PAR_DPND_VW);
                  If &ParDpndRec.CONTINGENT.Value <> "Y" Then
                     &Coverage_Amount = &Coverage_Amount + &ParDpndRec.FLAT_AMOUNT.Value;
                  End-If;
               End-For;
            End-If;
         End-If;
      End-If;
   End-If;
   
   
   Return &Coverage_Amount;
End-Function;


/* ----------------------------------------------------------- */
/* Function: Edit2xElection                                    */
/* Returns: Nothing                                            */
/* Input Parameters:  Plan_Type                                */
/* Output Parameters: ErrRowSet    (rowset containing errors)   */
/*                       - Plan_Type                           */
/*                       - Error_Warn  ("Error" or "Warning")  */
/*                       - Error_Text  (from Message Catalog)  */
/*                    ErrCount     (number of errors)           */
/*                    WarnCount    (number of warnings)         */
/*                                                             */
/* Returns:                                                    */
/*                    Zero or more rows appended to the        */
/*                    "Error RowSet" - one for each error or   */
/*                    warning generated by this function.      */
/*                                                             */
/* Description:                                                */
/*    In General, most 2X edits are performed when the STORE   */
/*    button is pressed (See the ValidatePage() function). The */
/*    user cannot store an election for a plantype without     */
/*    passing the STORE validation. Therefore, there is no     */
/*    need to re-apply these same edits and validations.       */
/* ----------------------------------------------------------- */
Function Edit2xElection(&Plan_Type, &ErrRowSet As Rowset, &ErrCnt, &WarnCnt);
   
   /* Apply Cross Plan Percentage Requirement                  */
   /* Note - summary validation performs Cross Plan without    */
   /*        percentage.                                       */
   /*        We only validate the Percentage requirement.      */
   
   &BasParPlanRow = GetParPlanRow(&Plan_Type);
   If All(&BasParPlanRow) Then
      &BasParPlanRec = &BasParPlanRow.GetRecord(Record.BAS_PAR_PLAN_VW);
      &Option_Cd = &BasParPlanRec.OPTION_CD.Value;
      If None(&Option_Cd) Then
         /* There isn't a positive or pre-entered election, get the Default */
         &Cvrg_Elect = "";
         
         GetDefault2x(&Plan_Type, &Cvrg_Elect, &Benefit_Plan, &Coverage_Type, &Enrolle_Type, &Sum_Dep_Covg, &OptionID, &X1, &X2, &X3, &X4);
         If &Cvrg_Elect = "E" Then
            /* There is a Default option, and it's not Waive */
            /* Get the Option Code for this Default Option */
            &ParOptnRow = GetParOptnRow2(&Plan_Type, &OptionID);
            If All(&ParOptnRow) Then
               &Option_Cd = &ParOptnRow.W3EB_PAROPTN_VW.OPTION_CD.Value;
            End-If;
         End-If;
      End-If;
      &ParOptnRow = GetParOptnRow(&Plan_Type, &Option_Cd);
      If All(&ParOptnRow) Then
         &Option_Type = &ParOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
         &Benefit_Plan = &ParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
      Else
         &Option_Type = "";
      End-If;
      If &Option_Type = "O" Then
         /* Get Benefit Program/Plan/Option Definition */
         &OPTNPgmRow = GetPgmOptnRow(&Plan_Type, &Option_Cd);
         &OPTNPgmRec = &OPTNPgmRow.GetRecord(Record.W3EB_PGM_OPT_VW);
         If All(&OPTNPgmRec.CROSS_PLAN_TYPE.Value) And
               All(&OPTNPgmRec.COVERAGE_LIMIT_PCT.Value) Then
            /* This Election has a Percentage Requirement */
            &ThisPlanType = &Plan_Type;
            &ThisBenefitPlan = &Benefit_Plan;
            &CTLPlanType = &OPTNPgmRec.CROSS_PLAN_TYPE.Value;
            &CoverageLimitPct = &OPTNPgmRec.COVERAGE_LIMIT_PCT.Value;
            /* Calculate coverage amount of this plan */
            &EE_Flat_Amount = &BasParPlanRec.FLAT_AMOUNT.Value;
            &ThisCoverage = Calculate2xCoverage(&Plan_Type, &Option_Cd, &EE_Flat_Amount, 0);
            If All(&ThisCoverage) Then
               /* Get the "Controlling" Plan Election */
               &CTLParPlanRow = GetParPlanRow(&CTLPlanType);
               If All(&CTLParPlanRow) Then
                  &CTLParPlanRec = &CTLParPlanRow.GetRecord(Record.BAS_PAR_PLAN_VW);
                  &CTLOptionCd = &CTLParPlanRec.OPTION_CD.Value;
                  If None(&CTLOptionCd) Then
                     /* No positive or pre-entered election for the controlling plantype */
                     /* Apply the Default Option for the controlling plantype */
                     &Cvrg_Elect = "";
                     
                     GetDefault2x(&CTLPlanType, &Cvrg_Elect, &Benefit_Plan, &Coverage_Type, &Enrolle_Type, &Sum_Dep_Covg, &OptionID, &X1, &X2, &X3, &X4);
                     If &Cvrg_Elect = "E" Then
                        /* There is a Default option, and it's not Waive */
                        /* Get the Option Code for this Default Option */
                        &CTLParOptnRow = GetParOptnRow2(&CTLPlanType, &OptionID);
                        If All(&CTLParOptnRow) Then
                           &CTLOptionCd = &CTLParOptnRow.W3EB_PAROPTN_VW.OPTION_CD.Value;
                        End-If;
                     End-If;
                  End-If;
                  If All(&CTLOptionCd) Then
                     &EE_Flat_Amount = &CTLParPlanRec.FLAT_AMOUNT.Value;
                     &CTLCoverage = Calculate2xCoverage(&CTLPlanType, &CTLOptionCd, &EE_Flat_Amount, 0);
                     If All(&CTLCoverage) Then
                        If &ThisCoverage > (&CTLCoverage * (&CoverageLimitPct / 100)) Then
                           /* We've failed the requirement */
                           /* Insert a row into &ErrRowSet (top of stack)   */
                           If All(&ErrRowSet.GetRow(1).GetRecord(Record.W3EB_ENR_SM_WRK).GetField(Field.ERROR_WARN).Value) Then
                              /* RowSet has existing rows - insert a new row */
                              &ErrRowSet.InsertRow(1);
                              &ErrRow = &ErrRowSet.GetRow(2);
                           Else
                              &ErrRow = &ErrRowSet.GetRow(1);
                           End-If;
                           &ErrRowRec = &ErrRow.GetRecord(Record.W3EB_ENR_SM_WRK);
                           &ErrRowRec.PLAN_TYPE.Value = "";
                           &ErrRowRec.ERROR_WARN.Value = "E";
                           &Image = "Image.PS_PROC_ERROR_ICN";
                           &ErrRow.W3EB_ENR_PB_WRK.IMAGE_ERROR.Value = @&Image;
                           /* "Your election for <&ThisPlanType> results in " */
                           /* "coverage that is greater than %1 percent of "  */
                           /* "your <&CTLPlanType> coverage."                 */
                           &LongText = MsgGetExplainText(4001, 23, "Message Not Found", &ThisPlanType, &CoverageLimitPct, &CTLPlanType);
                           &ErrRowRec.ERROR_TEXT.Value = &LongText;
                           &ErrCnt = &ErrCnt + 1;
                        End-If;
                     End-If; /* Non-zero controlling plan coverage amount */
                  End-If; /* Controlling Plan Type Election */
               End-If; /* Controlling Bas Partic Plan Row */
            End-If; /* Non-zero coverage for this plan */
         End-If; /* Option with Percent Requirement */
      End-If; /* Option */
      /* Restore the Plan Type */
      &Plan_Type = &ThisPlanType;
   End-If; /* Valid Plan_Type */
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: Edit2xCovrgGrp                                    */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: ErrRowSet    (rowset containing errors)   */
/*                       - Plan_Type                           */
/*                       - Error_Warn  ("Error" or "Warning")  */
/*                       - Error_Text  (from Message Catalog)  */
/*                    ErrCount     (number of errors)           */
/*                    WarnCount    (number of warnings)         */
/*                                                             */
/* Returns:                                                    */
/*                    A warning in the ERROR Rowset if any     */
/*                    of the Coverage Group Maximums have      */
/*                    been exceeded.                           */
/*                                                             */
/* Description:                                                */
/*    This function is called ONCE from the Summary page, when */
/*    the SUBMIT button is pressed. For each 2X plan type that */
/*    has a positive election, we accumulate the Calculated    */
/*    Base by Coverage Group Code (if any). After accumulating */
/*    across all plan types, we check to make sure that none   */
/*    of the Coverage Group Maximums have been exceeded.       */
/* ----------------------------------------------------------- */
Function Edit2xCovrgGrp(&ErrRowSet As Rowset, &ErrCnt, &WarnCnt);
   
   /* Get the "And" literal used to build the plan list */
   &And = "";
   Get_Text("AND", &PLAN_TYPE, &And, " ", " ", " ", " ", " ");
   
   /* Initialize the Coverage Group arrays (one for the code,    */
   /* another for the total coverage amount).                    */
   &CvgGrpCdArr = CreateArrayRept("", 0); /* Array of Group Codes */
   &CvgGrpTotalArr = CreateArrayRept(0, 0); /* Array of Coverage Totals */
   &CvgGrpPlansArr = CreateArrayRept(CreateArrayRept("", 0), 0);
   /* Array of Benefit Plans by Group Code */
   /* 1st column is Coverage Group Code */
   /* 2nd column is Plan Type in this Group Code*/
   
   /* Walk the BAS_PAR_PLAN_VW rowset, processing positive elections */
   /* and Pre-Entered elections only.                                */
   For &I = 1 To &W3EBGBLRS_PARTIC.ActiveRowCount
      &BasParPlanRow = &W3EBGBLRS_PARTIC.GetRow(&I);
      &BasParPlanRec = &BasParPlanRow.GetRecord(Record.BAS_PAR_PLAN_VW);
      &PLAN_TYPE = &BasParPlanRec.PLAN_TYPE.Value;
      &Option_Cd = &BasParPlanRec.OPTION_CD.Value;
      
      If Substring(&PLAN_TYPE, 1, 1) = "2" And
            All(&Option_Cd) Then
         /* Life/AD&D Plan with an election */
         /* Get the Option Type and Benefit Plan */
         &ParOptnRow = GetParOptnRow(&PLAN_TYPE, &Option_Cd);
         If All(&ParOptnRow) Then
            &Option_Type = &ParOptnRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value;
         Else
            &Option_Type = "";
         End-If;
         
         /* Get the Coverage Group Code for this Option */
         If &Option_Type = "O" Then
            &Benefit_Plan = &ParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
            &PlanDefnRow = GetPlanDefnRow(&PLAN_TYPE, &Benefit_Plan);
            &Covg_Group_Cd = &PlanDefnRow.W3EB_2XPLNDF_VW.COVG_GROUP_CD.Value;
            
            
            /* Calculate the Coverage Amount for this Option */
            &Calculated_Base = Calculate2xCoverage(&PLAN_TYPE, &Option_Cd, &EE_Flat_Amount, 0);
            /* Add the Coverage Group Code to the array if it doesn't already exist */
            If &CvgGrpCdArr.Len = 0 Then
               &CvgGrpCdArr.Push(&Covg_Group_Cd);
               &CvgGrpTotalArr.Push(&Calculated_Base);
               &CvgGrpPlansArr.Push(&Covg_Group_Cd);
               &CvgGrpPlansArr [1].Push(&PLAN_TYPE);
            Else
               &Found = "N";
               For &J = 1 To &CvgGrpCdArr.Len
                  If &CvgGrpCdArr [&J] = &Covg_Group_Cd Then
                     &Found = "Y";
                     /* Update the total for this Group Code */
                     &CvgGrpTotalArr [&J] = &CvgGrpTotalArr [&J] + &Calculated_Base;
                     /* Add this plan to the list */
                     &CvgGrpPlansArr.Push(&Covg_Group_Cd);
                     &LastRow = &CvgGrpPlansArr.Len;
                     &CvgGrpPlansArr [&LastRow].Push(&PLAN_TYPE);
                     Break;
                  End-If;
               End-For;
               If &Found = "N" Then
                  &CvgGrpCdArr.Push(&Covg_Group_Cd);
                  &CvgGrpTotalArr.Push(&Calculated_Base);
                  &CvgGrpPlansArr.Push(&Covg_Group_Cd);
                  &LastRow = &CvgGrpPlansArr.Len;
                  &CvgGrpPlansArr [&LastRow].Push(&PLAN_TYPE);
               End-If;
            End-If;
         End-If;
      End-If; /* Life/AD&D Plan w/election  */
   End-For;
   /* See if any of the Coverage Group Maximums have been exceeded */
   For &I = 1 To &CvgGrpCdArr.Len
      &Coverage_Total = &CvgGrpTotalArr [&I];
      &Covg_Group_Cd = &CvgGrpCdArr [&I];
      /* Get the Maximum from the Coverage Group rowset */
      &GroupMax = 0;
      For &J = 1 To &W3EBGBLRS_COVG_GRP.ActiveRowCount
         &GrpCdRow = &W3EBGBLRS_COVG_GRP.GetRow(&J);
         &GrpCdRec = &GrpCdRow.GetRecord(Record.COVG_GROUP_TBL);
         /*******************Begin Resolution 611584*******************/
         
         If &GrpCdRec.COVG_GROUP_CD.Value = &Covg_Group_Cd And
               &GrpCdRec.EFFDT.Value <= &W3EBGBLREC_WORK.EVENT_DT.Value Then
            &GroupMax = &GrpCdRec.COVERAGE_MAXIMUM.Value;
         End-If;
         /********************End Resolution 611584********************/
         
      End-For;
      If All(&GroupMax) Then
         If &Coverage_Total > &GroupMax Then
            /* Coverage Group Maximum has been exceeded */
            /* Get the Message Text from the Message Catalog */
            /* Insert a row into &ErrRowSet (top of stack)   */
            If All(&ErrRowSet.GetRow(1).GetRecord(Record.W3EB_ENR_SM_WRK).GetField(Field.ERROR_WARN).Value) Then
               /* RowSet has existing rows - insert a new row */
               &ErrRowSet.InsertRow(1);
               &ErrRow = &ErrRowSet.GetRow(2);
            Else
               &ErrRow = &ErrRowSet.GetRow(1);
            End-If;
            &ErrRowRec = &ErrRow.GetRecord(Record.W3EB_ENR_SM_WRK);
            &ErrRowRec.PLAN_TYPE.Value = "";
            &ErrRowRec.ERROR_WARN.Value = "W";
            &Image = "Image.PS_PROC_WARNING_ICN";
            &ErrRow.W3EB_ENR_PB_WRK.IMAGE_ERROR.Value = @&Image;
            /* Build the list of plans in the Coverage Group Code */
            &PlanList = "";
            For &Z = 1 To &CvgGrpPlansArr.Len
               If &CvgGrpPlansArr [&Z][1] = &Covg_Group_Cd Then
                  &PlanTypeDescr = GetPlanTypeDescr(&CvgGrpPlansArr [&Z][2]);
                  AppendText(&PlanList, &PlanTypeDescr, ", ");
               End-If;
            End-For;
            /* Replace the last comma with "and" */
            &Z = Len(&PlanList);
            While &Z > 0
               If Substring(&PlanList, &Z, 1) = "," Then
                  Break;
               End-If;
               &Z = &Z - 1;
            End-While;
            If &Z > 1 Then
               &PlanList1 = Substring(&PlanList, 1, &Z - 1);
               If Len(&PlanList1) < Len(&PlanList) Then
                  /* We have more than one plan in the list */
                  &PlanList2 = Right(&PlanList, Len(&PlanList) - Len(&PlanList1) - 1);
                  &PlanList = &PlanList1 | " " | &And | &PlanList2;
               End-If;
            End-If;
            &FmtGroupMax = FormatAmount(&GroupMax, "N", "Y");
            &FmtCoverage_Total = FormatAmount(&Coverage_Total, "N", "Y");
            &LongText = MsgGetExplainText(4001, 15, "Message Not Found", &PlanList, &FmtGroupMax, &FmtCoverage_Total);
            
            &ErrRowRec.ERROR_TEXT.Value = &LongText;
            
            /* Increment &WarnCnt                            */
            &WarnCnt = &WarnCnt + 1;
            
         End-If;
      End-If;
   End-For;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: RoundCoverage                                     */
/* Returns: Amount, rounded                                    */
/* Input Parameters:  Amount, Selected Option Row              */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Applies the rounding rules (if any) from the selected    */
/*    option row.                                              */
/* ----------------------------------------------------------- */
Function RoundCoverage(&Amount, &Row) Returns number;
   &Result = &Amount;
   If All(&Amount) And
         All(&Row) Then
      
      &OPTNScrollRow = &OPTNScroll.GetRow(&Row);
      &OPTNScrollRec = &OPTNScrollRow.GetRecord(Record.W3EB_PAROPTN_VW);
      
      /* 
As of HCM 9 we no longer apply rounding to employee-specified coverage amounts. 
This is because the rules are now imbedded in the FORMULA_ID.
*/
      
   End-If;
   Return &Result;
End-Function;


/* ----------------------------------------------------------- */
/* Function: GetCost                                           */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: &Cost - Annual or PayPeriod Cost         */
/*                  &Credits - Annual or PayPeriod Credits     */
/*                  &DedClassID - Text ID to use for Tax class */
/* Description:                                                */
/*    Obtains the Cost and Credit information for the current  */
/*    Bas_Partic_Optn row. Returns either Annual or PayPeriod  */
/*    amounts, based upon setting of user config field.        */
/*                                                             */
/*    Allows for future enhancement to have multiple Price     */
/*    and Credit rows for a single option.                     */
/* ----------------------------------------------------------- */
Function GetCost(&Cost, &Credits, &DedClassID);
   &iCOST = 1;
   &Cost = 0;
   &Credits = 0;
   &DedClassID = " ";
   &PremiumBase = &OPTNRec.PREMIUM_BASE.Value;
   
   If (&OPTNRec.DED_CLASS.Value = "A") Then
      &DedClassID = "AFTER_TAX_IND";
   End-If;
   If (&OPTNRec.DED_CLASS.Value = "B") Then
      &DedClassID = "BEFORE_TAX_IND";
   End-If;
   
   &COSTRowSet = GetSpecificRowSet(&OPTNRow, "BAS_PAR_COST_VW");
   &COSTRow = &COSTRowSet.GetRow(&iCOST);
   If &COSTRow <> Null Then
      &COSTRec = &COSTRow.GetRecord(Record.BAS_PAR_COST_VW);
   Else
      &COSTRec = Null;
   End-If;
   
   While &COSTRec <> Null
      If &COSTRec.COST_TYPE.Value = "P" Then
         If &COST_FREQUENCY = "D" Then
            &Cost = &Cost + &COSTRec.DEDN_AMT_A_TAX.Value + &COSTRec.DEDN_AMT_B_TAX.Value;
         Else
            &Cost = &Cost + &COSTRec.ANNL_AMT_A_TAX.Value + &COSTRec.ANNL_AMT_B_TAX.Value;
         End-If;
         If (&COSTRec.DEDN_AMT_A_TAX.Value > 0) And
               (&COSTRec.DEDN_AMT_B_TAX.Value > 0) Then
            &DedClassID = "BOTH_TAX_IND";
         End-If;
         
         If (&COSTRec.DEDN_AMT_A_TAX.Value = 0) And
               (&COSTRec.DEDN_AMT_B_TAX.Value > 0) Then
            &DedClassID = "BEFORE_TAX_IND";
         End-If;
         
         If (&COSTRec.DEDN_AMT_A_TAX.Value > 0) And
               (&COSTRec.DEDN_AMT_B_TAX.Value = 0) Then
            &DedClassID = "AFTER_TAX_IND";
         End-If;
         
      Else
         If &COST_FREQUENCY = "D" Then
            &Credits = &Credits + &COSTRec.DEDN_AMT_B_TAX.Value;
         Else
            &Credits = &Credits + &COSTRec.ANNL_AMT_B_TAX.Value;
         End-If;
      End-If;
      /* Get next Cost row */
      &iCOST = &iCOST + 1;
      /* &COSTRec = GetBasParCostRec(&RowArray, &iCOST); */
      If &iCOST <= &COSTRowSet.ActiveRowCount Then
         &COSTRow = &COSTRowSet.GetRow(&iCOST);
         If &COSTRow <> Null Then
            &COSTRec = &COSTRow.GetRecord(Record.BAS_PAR_COST_VW);
         Else
            &COSTRow = Null;
            &COSTRec = Null;
         End-If;
      Else
         &COSTRow = Null;
         &COSTRec = Null;
      End-If;
   End-While;
   
   If &OPTNRec.OPTION_TYPE.Value = "O" And
         All(&DEFNRow) Then
      
      If &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value = "2" Then
         /* For EE-Specified coverage, standardize to cost per $EERateUnit */
         If All(&PremiumBase) Then
            &Cost = &Cost * ((&EERateUnit / &PremiumBase))
         End-If;
      End-If;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: DepBenDeceased                                    */
/* Returns: Nothing                                            */
/* Input Parameters:  Row number in &DEPBENGrid                */
/* Output Parameters: None.                                    */
/* Description:                                                */
/*    Returns True/False, depending upon whether the Dep/Ben   */
/*    is deceased as of the Event Date.                        */
/* ----------------------------------------------------------- */
Function DepBenDeceased(&I) Returns boolean
   &Result = False;
   If All(&DEPBENGrid) Then
      If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.DT_OF_DEATH.Value) Then
         If &DEPBENGrid(&I).W3EBENR_DEP_WRK.DT_OF_DEATH.Value <= &EVENT_DT Then
            &Result = True;
         End-If;
      End-If;
   End-If;
   Return &Result;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ResetGridAttribs                                  */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Resets the "Visible" attribute of certain Dep/Ben grid   */
/*    columns, according to the saved attribute variables.     */
/*    We do this because the attributes are not automatically  */
/*    restored if we jump back to the Election page from the   */
/*    Recap page.                                              */
/*    This function is invoked from PanelActivate for this     */
/*    page.                                                    */
/* ----------------------------------------------------------- */
Function ResetGridAttribs()
   If &ResetGridAttribs = "Y" Then
      /* This is not the initial page activate - we're returning */
      &GridHandle = GetGrid(Panel.W3EB_ENR_2X_ELECT, "DEP_BEN_GRID");
      &GridHandle.RELATIONSHIP_TEXT.Label = &LabelRelationship;
      &GridHandle.PRIMARY_AMT.Label = &LabelCurrPriAmt;
      &GridHandle.PRIMARY_PCT.Label = &LabelCurrPriPct;
      &GridHandle.SECONDARY_AMT.Label = &LabelCurrSecAmt;
      &GridHandle.SECONDARY_PCT.Label = &LabelCurrSecPct;
      &GridHandle.NEW_PRIMARY.Label = &LabelNewPrimary;
      &GridHandle.NEW_SECONDARY.Label = &LabelNewSecondary;
      
      &GridHandle.COL2.Label = &LabelName;
      &GridHandle.COL2.Visible = &VisibleName;
      
      &GridHandle.SELECTED.Label = &LabelCovered;
      &GridHandle.PRIMARY_AMT.Visible = &VisibleCurrPriAmt;
      &GridHandle.PRIMARY_PCT.Visible = &VisibleCurrPriPct;
      &GridHandle.SECONDARY_AMT.Visible = &VisibleCurrSecAmt;
      &GridHandle.SECONDARY_PCT.Visible = &VisibleCurrSecPct;
      &GridHandle.NEW_PRIMARY.Visible = &VisibleNewPri;
      &GridHandle.NEW_SECONDARY.Visible = &VisibleNewSec;
      &GridHandle.SELECTED.Visible = &VisibleSelected;
      &ResetGridAttribs = "N";
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ResetRadioButtons                                 */
/* Returns: Nothing                                            */
/* Input Parameters:  RowNumber - the row number of the option */
/*                    we're turning ON.                        */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Walks the Option Scroll, turning OFF all Selection radio */
/*    buttons, except the one we're turning ON.                */
/*    Ensures that only one Selection radio button is ON.      */
/* ----------------------------------------------------------- */
Function ResetRadioButtons(&RowNumber)
   For &I = 1 To ActiveRowCount(Scroll.W3EB_PAROPTN_VW)
      If &I <> &RowNumber Then
         UpdateValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED, "N");
      End-If;
   End-For;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ApplyDefaultOption                                */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/*             Notes: Uses the &DefaultDefined flag set        */
/*                    earlier to ensure that a Default option  */
/*                    exists.                                  */
/* Description:                                                */
/*    If no option is selected, this function will select the  */
/*    option identified as the Default by turning on its       */
/*    SELECTED radio button.                                   */
/* ----------------------------------------------------------- */
Function ApplyDefaultOption()
   If &SelectedOptionRow = 0 Then
      /* Need to apply the default */
      If &DefaultDefined = "Y" Then
         /* Mark default option as "selected" */
         For &I = 1 To ActiveRowCount(Scroll.W3EB_PAROPTN_VW)
            &OPTNScrollRow = &OPTNScroll.GetRow(&I);
            &OPTNScrollRec = &OPTNScrollRow.GetRecord(Record.W3EB_PAROPTN_VW);
            If &OPTNScrollRec.DEFAULT_IND.Value = "Y" Then
               &OPTNScrollRow.W3EB_ENR_L1_WRK.SELECTED.Value = "Y";
               &SelectedOptionRow = &I;
               Break;
            End-If;
         End-For;
      End-If;
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ExposeExcessBenef                                 */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Hides/Exposes the "Excess Beneficiary" drop-down,        */
/*    depending upon the values of the Primary and Secondary   */
/*    allocation methods.                                      */
/* ----------------------------------------------------------- */
Function ExposeExcessBenef()
   If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" Or
         W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F" Then
      UnHide(W3EB_ENR_L0_WRK.DEPENDENT_BENEF);
   Else
      Hide(W3EB_ENR_L0_WRK.DEPENDENT_BENEF);
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: UpdateAllocationSum                               */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Updates the running totals for the New Primary and       */
/*    Secondary allocation amounts.                            */
/* ----------------------------------------------------------- */
Function UpdateAllocationSum();
   W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM = 0;
   W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 = 0;
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
         W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM = W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM + &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value;
      End-If;
      If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value) Then
         W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 = W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 + &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value;
      End-If;
   End-For;
End-Function;


/* ----------------------------------------------------------- */
/* Function: SetPctOrFlatAmount                                */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Sets the value of the two "Percent or Flat Amount"       */
/*    dropdowns when we first load the page. We do this by     */
/*    by scanning the existing data to see if the allocations  */
/*    are expressed as Percentages or Flat Amounts.            */
/*    We also "pre-enter" the current allocation into the      */
/*    "New" allocation amount.                                 */
/*                                                             */
/*    If there is a Court Order in effect, then we cannot      */
/*    allow the user to change the allocation method. For      */
/*    example, if the court-ordered beneficiary has a current  */
/*    allocation expressed as a %, then we must lock "%" as    */
/*    the allocation method.                                   */
/*                                                             */
/*    If the selected plan has a minimum spouse allocation     */
/*    requirement, and the employee has a spouse with no       */
/*    waiver, and there are no court-ordered allocations in    */
/*    effect, we lock in the primary allocation method as      */
/*    "Percent", and do not carry-forward the pre-entered      */
/*    primary allocation if they were entered as flat amounts. */
/*                                                             */
/*    Our default is to display Percentages if there is no     */
/*    data present.                                            */
/* ----------------------------------------------------------- */
Function SetPctOrFlatAmount();
   &LockFlatAmount = "N";
   &LockPercent = "N";
   &EligibleSpouse = "N";
   &LoadToNewAlloc = "Y";
   
   /* First, see what method is in use if a court-order is in effect */
   If &CourtOrdersExist = "Y" Then
      For &I = 1 To &DEPBENGrid.ActiveRowCount
         If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RIDER_TYPE.Value = "C" Then
            If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT.Value) Then
               &LockFlatAmount = "Y";
            Else
               If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT.Value) Then
                  &LockPercent = "Y";
               End-If;
            End-If;
         End-If
      End-For;
   End-If;
   
   /* Scan the Primary */
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT.Value) Then
         W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F";
         Break;
      End-If;
      If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT.Value) Then
         W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P";
         Break;
      End-If;
   End-For;
   
   /* Scan the Secondary */
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT1.Value) Then
         W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F";
         Break;
      End-If;
      If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT1.Value) Then
         W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "P";
         Break;
      End-If;
   End-For;
   
   /* See if current allocations conflict with minimum spouse allocation.  */
   /* That is, if there is a minimum spouse allocation requirement, and    */
   /* there are no court-ordered allocations in effect, and a spouse       */
   /* exists, then we need to lock the primary allocation as "Percent".    */
   /* In addition, if there are current primary flat-amount allocations,   */
   /* they cannot be carried forward into the "new" allocations.           */
   UnGray(W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI);
   If All(&SelectedOptionRow) Then
      &OPTNScrollRow = &OPTNScroll.GetRow(&SelectedOptionRow);
      If All(&OPTNScrollRow.W3EB_ENR_L1_WRK.MIN_BENEFIC_ALLOC.Value) Then
         /* This plan has a minimum spouse allocation requirement */
         For &I = 1 To &DEPBENGrid.ActiveRowCount
            /* See if a spouse exists */
            If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RELATIONSHIP.Value = "SP" Or
                  &DEPBENGrid(&I).W3EBENR_DEP_WRK.RELATIONSHIP.Value = "SS" Then
               /* The employee has a spouse - see if the have a waiver */
               If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RIDER_TYPE.Value <> "S" Then
                  /* No spousal waiver. */
                  &EligibleSpouse = "Y";
               End-If;
            End-If;
            Break;
         End-For;
         If &EligibleSpouse = "Y" And
               &LockFlatAmount = "N" And
               &LockPercent = "N" Then
            /* We have a spouse, and no current court-ordered allocation.  */
            /* Lock the Primary allocation method as "Percent", and do not */
            /* load the pre-entered allocations to the "New" allocations.  */
            &LockPercent = "Y";
            &LoadToNewAlloc = "N";
         End-If;
      End-If;
   End-If;
   
   
   /* Apply the "LockOut" (if it exists) to the Primary allocation method */
   If &LockFlatAmount = "Y" Or
         &LockPercent = "Y" Then
      If &LockFlatAmount = "Y" Then
         W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F";
      Else
         If &LockPercent = "Y" Then
            W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P";
         End-If;
      End-If;
      /* Don't allow the Primary allocation method to be changed */
      Gray(W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI);
   End-If;
   
   /* Pre-Enter the current allocations into the "New" allocations.          */
   /* Gray out a beneficiary if the beneficiary has a court order in effect. */
   /* Don't load if the dep/ben is deceased.                                 */
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
         If Not DepBenDeceased(&I) Then
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = &DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT.Value;
         Else
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = 0;
         End-If;
      Else
         If &LoadToNewAlloc = "Y" And
               Not DepBenDeceased(&I) Then
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = &DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT.Value;
         Else
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = 0;
         End-If;
      End-If;
      
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "P" Then
         If Not DepBenDeceased(&I) Then
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = &DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT1.Value;
         Else
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = 0;
         End-If;
      Else
         If Not DepBenDeceased(&I) Then
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = &DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT1.Value;
         Else
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = 0;
         End-If;
      End-If;
      
      /* If court order is in effect - Gray this beneficiary if there is any */
      /* current allocation/enrollment.                                      */
      If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RIDER_TYPE.Value = "C" And
            (All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Or
               All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Or
               &DEPBENGrid(&I).W3EBENR_DEP_WRK.SELECTED.Value = "Y") Then
         &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Enabled = False;
         &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Enabled = False;
         &DEPBENGrid(&I).W3EBENR_DEP_WRK.SELECTED.Enabled = False;
      End-If;
   End-For;
   
   /* Update the Totals */
   UpdateAllocationSum();
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: CollapseDepBenGrid                                */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Hides the Flat_Amount or Percentage column for Primary   */
/*    and/or Secondary beneficiary, depending upon the setting */
/*    of the two "Pct or Flat Amount" dropdowns.               */
/*    Also hides the "Excess Beneficiary" drop-down if neither */
/*    allocation method is "Flat Amount".                      */
/*    Also sets up the grid column headers.                    */
/* ----------------------------------------------------------- */
Function CollapseDepBenGrid();
   
   &GridHandle = GetGrid(Panel.W3EB_ENR_2X_ELECT, "DEP_BEN_GRID");
   
   /* Setup Default Grid Column Headers */
   Get_Text("RELATIONSHIP", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.RELATIONSHIP_TEXT.Label = &LongText;
   &LabelRelationship = &LongText;
   Get_Text("CUR_PRIMARY_AMT", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.PRIMARY_AMT.Label = &LongText;
   &LabelCurrPriAmt = &LongText;
   Get_Text("CUR_PRIMARY_PCT", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.PRIMARY_PCT.Label = &LongText;
   &LabelCurrPriPct = &LongText;
   Get_Text("CUR_SECONDARY_AMT", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.SECONDARY_AMT.Label = &LongText;
   &LabelCurrSecAmt = &LongText;
   Get_Text("CUR_SECONDARY_PCT", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.SECONDARY_PCT.Label = &LongText;
   &LabelCurrSecPct = &LongText;
   Get_Text("NEW_PRIMARY_ALLOC", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.NEW_PRIMARY.Label = &LongText;
   &LabelNewPrimary = &LongText;
   
   /* NEW_SECONDY_ALLOC now is added into the text table*/
   Get_Text("NEW_SECONDY_ALLOC", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.NEW_SECONDARY.Label = &LongText;
   &LabelNewSecondary = &LongText;
   /* Name(COL2) is now from text table*/
   Get_Text("DEP_NAME", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.COL2.Label = &LongText;
   &LabelName = &LongText;
   /* end */
   
   Get_Text("COVERED", &PlanType, &LongText, " ", " ", " ", " ", " ");
   &GridHandle.SELECTED.Label = &LongText;
   &LabelCovered = &LongText;
   
   If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" Then
      /* Collapse the Primary Percentage */
      &GridHandle.PRIMARY_PCT.Visible = False;
      &GridHandle.PRIMARY_AMT.Visible = True;
   Else
      /* Collapse the Primary Flat Amount */
      &GridHandle.PRIMARY_AMT.Visible = False;
      &GridHandle.PRIMARY_PCT.Visible = True;
   End-If;
   
   If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F" Then
      /* Collapse the Secondary Percentage */
      &GridHandle.SECONDARY_PCT.Visible = False;
      &GridHandle.SECONDARY_AMT.Visible = True;
   Else
      /* Collapse the Secondary Flat Amount */
      &GridHandle.SECONDARY_AMT.Visible = False;
      &GridHandle.SECONDARY_PCT.Visible = True;
   End-If;
   
   /* Hide the "Excess Beneficiary" drop-down if "Flat Amount" not specified */
   ExposeExcessBenef();
   
   /* For the Dependent Plans (24/25), Hide everything having to do */
   /* with "Secondary", as these plans are covering dependents only */
   /* Also, make sure the Primary Allocation Method and Excess      */
   /* Beneficiary controls are hidden, as well as the totals.       */
   /* Force the Current and New Flat Amount controls to be visible  */
   /* only if this is not a "Sum of Dependent Coverage" plan.       */
   
   If &DependentPlan = "Y" Then
      Hide(W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI);
      Hide(W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC);
      Hide(W3EB_ENR_L0_WRK.DEPENDENT_BENEF);
      
      &GridHandle.COL2.Visible = True;
      
      &GridHandle.PRIMARY_AMT.Visible = True;
      &GridHandle.NEW_PRIMARY.Visible = True;
      &GridHandle.NEW_SECONDARY.Visible = False;
      &GridHandle.PRIMARY_PCT.Visible = False;
      &GridHandle.SECONDARY_AMT.Visible = False;
      &GridHandle.SECONDARY_PCT.Visible = False;
      Hide(W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM);
      Hide(W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1);
      
      If &SelectedOptionRow > 0 Then
         
         If (&OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y") Then
            /* "Sum of Dependent Coverage" Plan */
            &GridHandle.PRIMARY_AMT.Visible = True;
            &GridHandle.NEW_PRIMARY.Visible = True;
            &GridHandle.SELECTED.Visible = False;
            
            /* "Current Coverage" */
            Get_Text("CUR_COVERAGE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            &GridHandle.PRIMARY_AMT.Label = &LongText;
            /* "New Coverage" */
            Get_Text("NEW_COVERAGE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            &GridHandle.NEW_PRIMARY.Label = &LongText;
            
            /* "The selected plan requires that you specify coverage for each... " */
            Get_Text("DEPBEN_DEP_LIFE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_DEP_HDR2 = WrapText(&LongText, "PAADDITIONALINSTRUCTIONS");
         Else
            &GridHandle.PRIMARY_AMT.Visible = False;
            &GridHandle.NEW_PRIMARY.Visible = False;
            &GridHandle.SELECTED.Visible = True;
            W3EB_ENR_LBL.INFO_DEP_HDR2 = "";
         End-If;
      End-If;
   Else
      &GridHandle.SELECTED.Visible = False;
   End-If;
End-Function;


/* ----------------------------------------------------------- */
/* Function: BuildPlanDescr                                    */
/* Returns: Nothing                                            */
/* Input Parameters:  &Option_Type                             */
/* Output Parameters: &Descr                                   */
/* Description:                                                */
/*    Builds the Plan Description to display on the page.      */
/* ----------------------------------------------------------- */
Function BuildPlanDescr(&Option_Type, &Descr);
   
   If &Option_Type = "O" Then
      
      &Descr = &DEFNRow.BENEF_PLAN_TBL.DESCR.Value;
      
      If &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value = "1" Then
         &Option_Cd = &OPTNRec.OPTION_CD.Value;
         &Coverage_Amount = Calculate2xCoverage(&PLAN_TYPE, &Option_Cd, 0, 0);
         If &Coverage_Amount > 0 Then
            &Formatted_Amount = " ";
            &Formatted_Amount = FormatAmount(&Coverage_Amount, "N", "Y");
            &Descr = &DEFNRow.BENEF_PLAN_TBL.DESCR.Value;
            &Descr = &Descr | "  (" | &Formatted_Amount | ")";
         End-If;
      End-If;
      
   Else
      /* &Descr = "Waive"; */
      Get_Text("WAIVE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      &Descr = &LongText;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: Insert2xOption                                    */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Inserts a new row into the "W3EB_PAROPTN_VW" scroll for  */
/*    the current Bas_Partic_Option row.                       */
/*    Also inserts related information from the Benefit Program*/
/*    definition, and the Plan definition.                     */
/*                                                             */
/*    Sets following flags and counters:                       */
/*       CurrElectOptionCd (option code of the current         */
/*                          election - if there is a current   */
/*                          election, and it is an eligible    */
/*                          option).                           */
/* ----------------------------------------------------------- */
Function Insert2XOption();
   
   If &OptnCount > 1 Then
      InsertRow(Scroll.W3EB_PAROPTN_VW, (&OptnCount - 1));
   End-If;
   
   &Option_Cd = &OPTNRec.OPTION_CD.Value;
   
   &OPTNScrollRow = &OPTNScroll(&OptnCount);
   &OPTNScrollRec = &OPTNScrollRow.GetRecord(Record.W3EB_PAROPTN_VW);
   &OPTNScrollWorkRec = &OPTNScrollRow.GetRecord(Record.W3EB_ENR_L1_WRK);
   
   /* Mark "Selected" if this option has been elected or pre-entered */
   If All(&PlanRec.OPTION_CD.Value) And
         &PlanRec.OPTION_CD.Value = &OPTNRec.OPTION_CD.Value Then
      /* This option has been elected or pre-entered */
      &OPTNScrollWorkRec.SELECTED.Value = "Y";
      &SelectedOptionRow = &OptnCount;
      If &OPTNRec.OPTION_TYPE.Value = "O" Then
         
         If &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value = "2" Then
            W3EB_ENR_L0_WRK.FLAT_AMOUNT = &PlanRec.FLAT_AMOUNT.Value;
         Else
            W3EB_ENR_L0_WRK.FLAT_AMOUNT = 0;
         End-If;
      Else
         W3EB_ENR_L0_WRK.FLAT_AMOUNT = 0;
      End-If;
   Else
      &OPTNScrollWorkRec.SELECTED.Value = "N";
   End-If;
   
   /* Mark this option as "Active" (available for selection) */
   &OPTNScrollWorkRec.EFF_STATUS.Value = "A";
   
   /* Fields from Bas_Partic_Optn */
   &OPTNScrollRec.OPTION_TYPE.Value = &OPTNRec.OPTION_TYPE.Value;
   &OPTNScrollRec.OPTION_ID.Value = &OPTNRec.OPTION_ID.Value;
   &OPTNScrollRec.OPTION_CD.Value = &OPTNRec.OPTION_CD.Value;
   &OPTNScrollRec.BENEFIT_PLAN.Value = &OPTNRec.BENEFIT_PLAN.Value;
   &OPTNScrollRec.DEFAULT_IND.Value = &OPTNRec.DEFAULT_IND.Value;
   &OPTNScrollRec.PROOF_REQ_IND.Value = &OPTNRec.PROOF_REQ_IND.Value;
   &OPTNScrollRec.CALCULATED_BASE.Value = &OPTNRec.CALCULATED_BASE.Value;
   &OPTNScrollRec.PREMIUM_BASE.Value = &OPTNRec.PREMIUM_BASE.Value;
   If &OPTNRec.PROOF_REQ_IND.Value = "Y" Then
      &OPTNScrollWorkRec.PROOF_REQ_DISP.Value = &Asterisk;
   End-If;
   
   /* Mark the Current Election */
   &OPTNScrollWorkRec.CUR_ELECT_IND.Value = "N";
   If &CurrElectInd = "Y" Then
      If &CurrElectPlan = &OPTNRec.BENEFIT_PLAN.Value Then
         &OPTNScrollWorkRec.CUR_ELECT_IND.Value = "Y";
         &CurrElectOptionCd = &OPTNRec.OPTION_CD.Value;
      End-If;
   End-If;
   
   /* Fields from Benefit Plan Definition */
   If &OPTNRec.OPTION_TYPE.Value = "O" Then
      &PlanDescr = " ";
      BuildPlanDescr(&OPTNRec.OPTION_TYPE.Value, &PlanDescr);
      
      &URL = "http://www.peoplesoft.com";
      &Descr = WrapURL(&PlanDescr, &URL);
      /* DESCR100 holds the formatted URL, DESCR60 holds the plain description w/o URL */
      &OPTNScrollWorkRec.DESCR100.Value = &Descr;
      &OPTNScrollWorkRec.DESCR60.Value = &PlanDescr;
      &OPTNScrollWorkRec.PB_BENEFIT_PLAN.Label = &PlanDescr;
      /* Hyperlink is just the Benefit Plan Description           */
      /* FieldChange PC on the button invokes either Authoria, or */
      /* it sends us to the provider's URL.                       */
      /* Enable the Hyperlink if there is one for this plan */
      &LinkActive = False;
      &LinkActive = EnrCheckMerchantDescr(&PLAN_TYPE, &OPTNScrollRec.BENEFIT_PLAN.Value);
      If &LinkActive = True Then
         &OPTNScrollWorkRec.PB_BENEFIT_PLAN.Enabled = True;
      Else
         &OPTNScrollWorkRec.PB_BENEFIT_PLAN.Enabled = False;
      End-If;
      
      &OPTNScrollWorkRec.COVERAGE_TYPE.Value = &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
      &OPTNScrollWorkRec.ENROLLE_TYPE.Value = &DEFNRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
      &OPTNScrollWorkRec.SUM_DEP_COVG.Value = &DEFNRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
      &OPTNScrollWorkRec.COVG_GROUP_CD.Value = &DEFNRow.W3EB_2XPLNDF_VW.COVG_GROUP_CD.Value;
      &OPTNScrollWorkRec.MIN_BENEFIC_ALLOC.Value = &DEFNRow.W3EB_2XPLNDF_VW.MIN_BENEFIC_ALLOC.Value;
      
      If &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value = "2" Then
         &OPTNScrollWorkRec.PREM_BASE_DISP.Value = &Carat;
         &OPTNScrollWorkRec.COST_AMOUNT.Visible = False;
         &OPTNScrollWorkRec.CREDIT_AMOUNT.Visible = False;
         &OPTNScrollWorkRec.COST_TOTAL.Visible = True;
      End-If;
      
      If &DEFNRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value = "Y" Then
         &OPTNScrollWorkRec.PREM_BASE_DISP.Value = &Pound;
      End-If;
   Else
      /* This is a Waive option */
      &OPTNScrollWorkRec.PB_BENEFIT_PLAN.Label = &WaiveText;
      &OPTNScrollWorkRec.PB_BENEFIT_PLAN.Enabled = False;
   End-If;
   
   /* Fields from Program Definition (Ben_Defn_Pgm) */
   REM: Nothing to load.;
   
   /* Fields from Program-Plan Definition (Ben_Defn_Plan) */
   If &PGMPlanRec <> Null Then
      &OPTNScrollWorkRec.PROOF_START_FLT.Value = &PGMPlanRec.PROOF_START_FLT.Value;
      &OPTNScrollWorkRec.WV_PROOF_START_FLT.Value = &PGMPlanRec.WV_PROOF_START_FLT.Value;
      &ElectRequired = &PGMPlanRec.ELECT_REQUIRED.Value;
      &IgnoreDepBenEdit = &PGMPlanRec.IGNORE_DEPBEN_EDIT.Value;
   End-If;
   
   /* Fields from Program Definition (Ben_Defn_Optn) */
   If &OPTNPgmRec <> Null Then
      If &XPlanExists = "Y" Then
         &OPTNScrollWorkRec.CROSS_PLAN_TYPE.Value = &OPTNPgmRec.CROSS_PLAN_TYPE.Value;
         &OPTNScrollWorkRec.CROSS_BENEF_PLAN.Value = &OPTNPgmRec.CROSS_BENEF_PLAN.Value;
         &OPTNScrollWorkRec.COVERAGE_LIMIT_PCT.Value = &OPTNPgmRec.COVERAGE_LIMIT_PCT.Value;
         &OPTNScrollWorkRec.CROSS_PLN_DPND_CHK.Value = &OPTNPgmRec.CROSS_PLN_DPND_CHK.Value;
      End-If;
   End-If;
   
   /* Fields related to Program Definition (Ben_Defn_Cost) */
   If &COSTPgmRec <> Null Then
      REM: Nothing to load.;
   End-If;
   
   /* As of HCM 9, these rules must be loaded from the Coverage Formula, not from the Calc Rules */
   &OPTNScrollWorkRec.PREM_AS_OF_CD.Value = " ";
   &OPTNScrollWorkRec.PREM_AS_OF_DD.Value = 0;
   &OPTNScrollWorkRec.PREM_AS_OF_MM.Value = 0;
   &OPTNScrollWorkRec.COVRG_AS_OF_CD.Value = "C";
   &OPTNScrollWorkRec.COVRG_AS_OF_DD.Value = 0;
   &OPTNScrollWorkRec.COVRG_AS_OF_MM.Value = 0;
   &OPTNScrollWorkRec.COVERAGE_MAXIMUM.Value = 0.00;
   &OPTNScrollWorkRec.COVERAGE_MINIMUM.Value = 0.00;
   
   /* Other Calculated/Derived Fields */
   If &OPTNScrollWorkRec.COVERAGE_TYPE.Value = "2" Then
      /* Get a more precise cost-per-unit than is available on the PARTIC_COST record */
      &WkBenPlan = &OPTNRec.BENEFIT_PLAN.Value;
      GetPreciseRate(&PLAN_TYPE, &WkBenPlan, &PreciseRate, &PreciseUnit);
      &Cost = 0;
      If All(&PreciseRate, &PreciseUnit) Then
         If &PreciseUnit = 1 Then
            &Cost = &PreciseRate / &PreciseUnit;
         Else
            
            &Cost = &PreciseRate * (&EERateUnit / &PreciseUnit);
         End-If;
      End-If;
      &OPTNScrollWorkRec.COST_AMOUNT.Value = 0;
      &OPTNScrollWorkRec.CREDIT_AMOUNT.Value = 0;
      &OPTNScrollWorkRec.COST_TOTAL.Value = &Cost;
   Else
      &OPTNScrollWorkRec.COST_AMOUNT.Value = &Cost;
      &OPTNScrollWorkRec.CREDIT_AMOUNT.Value = &Credits;
      &OPTNScrollWorkRec.COST_TOTAL.Value = &Cost - &Credits;
   End-If;
   Get_Text(&DedClassID, " ", &LongText, " ", " ", " ", " ", " ");
   &OPTNScrollWorkRec.W3EB_TAX_CLASS.Value = &LongText;
   
   /* See if we have another option with the same coverage amount */
   /* Note - BenAdmin incorrectly sets Calculated Base for Dependent plans */
   If &OPTNRec.CALCULATED_BASE.Value > 0 And
         &DependentPlan <> "Y" Then
      &J = 1;
      &Calculated_Base = &OPTNRec.CALCULATED_BASE.Value;
      While &J < &OptnCount
         If &OPTNScroll(&J).W3EB_PAROPTN_VW.CALCULATED_BASE.Value = &Calculated_Base Then
            &DuplicateCoverage = "Y";
         End-If;
         &J = &J + 1;
      End-While;
   End-If;
End-Function;


/* ----------------------------------------------------------- */
/* Function: LoadOptnScroll                                    */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Loads the Option Scroll with information about each      */
/*    Option in Bas_Partic_Optn for the current Plan Type.     */
/*    Also loads the Level 0 Flat Amount and FactorXSalary     */
/*    fields if an option is already elected/pre-entered.      */
/*    Sets following flags and counters:                       */
/*       OptnCount (Count of available options loaded)         */
/*       WaiveAvailable (Y/N is there a Waive option?)         */
/*       DefaultDefined (Y/N is there a Default option?)       */
/*       WaiveIsDefault (Y/N is the Waive the Default option?) */
/*       ProofRequired (Y/N do any options require proof?)     */
/*       EELevelPlanExists (Y/N is there an EE-level plan?)    */
/*       SumOfCvgExists (Y/N is there a "Sum of Covg" plan?)   */
/*       XPlanExists (Y/N is there a cross-plan requirement?)  */
/*       CovgGroupCdExists (Y/N is there a Coverage Group?)    */
/*       DuplicateCoverage (Y/N  >1 plan with same coverage?)  */
/* ----------------------------------------------------------- */
Function LoadOptnScroll();
   
   &PlanType = &PLAN_TYPE;
   &OptnCount = 0;
   &iOPTN = 1;
   &WaiveAvailable = "N";
   &DefaultDefined = "N";
   &WaiveIsDefault = "N";
   &ProofRequired = "N";
   &EELevelPlanExists = "N";
   &SumOfCvgExists = "N";
   &XPlanExists = "N";
   &CovgGroupCdExists = "N";
   &SelectedOptionRow = 0;
   &CurrElectOptionCd = " "; /* Set in Insert2xOption() */
   &DuplicateCoverage = "N";
   
   /* Get the Plan-Level row from the Benefit Program Definition */
   /* Ben_Defn_Plan & Event Rule */
   &PGMPlanRow = GetPgmPlanRow(&PLAN_TYPE);
   &PGMPlanRec = &PGMPlanRow.GetRecord(Record.W3EB_PGM_PLN_VW);
   
   /* &PlanRec = GetBasParPlanRec(&PlanType, &RowArray); */
   
   /* Get the Plan-Level row from the Event (Bas_Partic_Plan */
   &PlanRow = GetSpecificRow(&W3EBGBLRS_PARTIC, "BAS_PAR_PLAN_VW", "PLAN_TYPE", &PLAN_TYPE);
   If &PlanRow <> Null Then
      &PlanRec = &PlanRow.GetRecord(Record.BAS_PAR_PLAN_VW);
   Else
      &PlanRec = Null;
   End-If;
   
   If &PlanRec <> Null Then
      /* Format the Coverage and Deduction Begin Dates */
      W3EB_ENR_L0_WRK.DATE_WRK = &PlanRec.COVERAGE_BEGIN_DT.Value;
      &CoverageBeginDt = GetLevel0()(1).W3EB_ENR_L0_WRK.DATE_WRK.FormattedValue;
      W3EB_ENR_L0_WRK.DATE_WRK = &PlanRec.DEDUCTION_BEGIN_DT.Value;
      &DeductionBeginDt = GetLevel0()(1).W3EB_ENR_L0_WRK.DATE_WRK.FormattedValue;
      If All(&PlanRec.OPTION_CD.Value) Then
         /* Load the Level 0 Flat_Amount and Factor_XSalary fields if */
         /* an election has already been made or pre-entered.         */
         W3EB_ENR_L0_WRK.FLAT_AMOUNT = &PlanRec.FLAT_AMOUNT.Value;
         
      End-If;
   End-If;
   
   If &PlanRec <> Null Then
      
      &OPTNRowSet = GetSpecificRowSet(&PlanRow, "W3EB_PAROPTN_VW");
      If &OPTNRowSet <> Null Then
         &OPTNRow = &OPTNRowSet.GetRow(&iOPTN);
         If &OPTNRow <> Null Then
            &OPTNRec = &OPTNRow.GetRecord(Record.W3EB_PAROPTN_VW);
         Else
            &OPTNRec = Null;
         End-If;
      Else
         &OPTNRec = Null;
      End-If;
      
      While &OPTNRec <> Null /* Loop through rows in W3EB_PAROPTN_VW */
         If (&OPTNRec.OPTION_TYPE.Value = "O" Or
               &OPTNRec.OPTION_TYPE.Value = "W") Then
            
            &Plan = &OPTNRec.BENEFIT_PLAN.Value;
            
            If &OPTNRec.OPTION_TYPE.Value = "W" Then
               &WaiveAvailable = "Y";
            End-If;
            If &OPTNRec.DEFAULT_IND.Value = "Y" Then
               
               &DefaultDefined = "Y";
               If &OPTNRec.OPTION_TYPE.Value = "W" Then
                  &WaiveIsDefault = "Y";
               End-If;
            End-If;
            If &OPTNRec.PROOF_REQ_IND.Value = "Y" Then
               &ProofRequired = "Y";
            End-If;
            
            /* Get Plan Definition */
            If &OPTNRec.OPTION_TYPE.Value = "O" Then
               &Benefit_Plan = &OPTNRec.BENEFIT_PLAN.Value;
               &DEFNRow = GetPlanDefnRow(&PlanType, &Benefit_Plan);
               If &DEFNRow <> Null Then
                  
                  &Coverage_Type = &DEFNRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
                  &Enrolle_Type = &DEFNRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
                  &Sum_Dep_Covg = &DEFNRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
                  &Descr = &DEFNRow.BENEF_PLAN_TBL.DESCR.Value;
                  &DescrShort = &DEFNRow.BENEF_PLAN_TBL.DESCRSHORT.Value;
                  
                  If &Enrolle_Type = "2" Then
                     &DependentPlan = "Y";
                  Else
                     &DependentPlan = "N";
                  End-If;
                  If (&Coverage_Type = "2") And
                        (&Sum_Dep_Covg <> "Y") Then
                     &EELevelPlanExists = "Y";
                  End-If;
                  If &Sum_Dep_Covg = "Y" Then
                     &SumOfCvgExists = "Y";
                  End-If;
                  If All(&DEFNRow.W3EB_2XPLNDF_VW.COVG_GROUP_CD.Value) Then
                     &CovgGroupCdExists = "Y";
                  End-If;
               Else
                  /* Internal Error! */
                  &Coverage_Type = " ";
                  &Enrolle_Type = " ";
                  &Sum_Dep_Covg = " ";
                  &Descr = " ";
                  &DescrShort = " ";
               End-If;
            Else
               If &OPTNRec.OPTION_TYPE.Value = "W" Then
                  &Descr = &WaiveText;
                  &DescrShort = &WaiveText;
                  &Coverage_Type = " ";
                  &Enrolle_Type = " ";
                  &Sum_Dep_Covg = " ";
               End-If;
            End-If;
            
            /* Get the Cost Info */
            GetCost(&Cost, &Credits, &DedClassID);
            
            /* Get Option/Cost Info from Benefit Program Definition */
            &OPTNPgmRow = GetPgmOptnRow(&PLAN_TYPE, &OPTNRec.OPTION_CD.Value);
            &OPTNPgmRec = &OPTNPgmRow.GetRecord(Record.W3EB_PGM_OPT_VW);
            
            If All(&OPTNPgmRec.CROSS_PLAN_TYPE.Value) Then
               &XPlanExists = "Y";
            End-If;
            /* Ben_Defn_Cost & Calc Rule */
            &COSTPgmRow = GetPgmCostRow(&PLAN_TYPE, &OPTNRec.OPTION_CD.Value);
            If &COSTPgmRow <> Null Then
               &COSTPgmRec = &COSTPgmRow.GetRecord(Record.W3EB_PGM_CST_VW);
            Else
               &COSTPgmRec = Null;
            End-If;
            
            /* Insert the BAS_Partic_Optn Row into the Scroll */
            &OptnCount = &OptnCount + 1;
            Insert2XOption();
            
         End-If; /* Option Type "O" or "W" */
         
         /* Get the next Option */
         /* &OPTNRec = GetBasParOptnRec(&RowArray, &iOPTN); */
         &iOPTN = &iOPTN + 1;
         
         If &iOPTN <= &OPTNRowSet.ActiveRowCount Then
            &OPTNRow = &OPTNRowSet.GetRow(&iOPTN);
            &OPTNRec = &OPTNRow.GetRecord(Record.W3EB_PAROPTN_VW);
         Else
            &OPTNRec = Null;
         End-If;
         
      End-While; /* End W3EB_PAROPTN_VW Loop */
      
      /* If credits are not to be displayed - make them invisible */
      If &SHOW_CREDIT = "N" Then
         For &I = 1 To Scroll.W3EB_PAROPTN_VW.ActiveRowCount
            Hide(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.CREDIT_AMOUNT);
         End-For;
         /* Need to turn off Scroll Column Label */
      End-If;
      
   End-If;
   
   /* Apply the Odd/Even Grid Style to the Scroll */
   For &I = 1 To &OPTNScroll.ActiveRowCount
      &m = Mod(&I, 2);
      If &m = 1 Then
         /* Don't apply to the radio button - it doesn't render well */
         If &OPTNScroll(&I).W3EB_ENR_L1_WRK.PB_BENEFIT_PLAN.Enabled = True Then
            &OPTNScroll(&I).W3EB_ENR_L1_WRK.PB_BENEFIT_PLAN.Style = "PAHYPERLINKLVL1ODD";
         Else
            /* &OPTNScroll(&I).W3EB_ENR_L1_WRK.PB_BENEFIT_PLAN.Style = "PSLEVEL1GRIDODDROW"; */
         End-If;
         
         
         &OPTNScroll(&I).W3EB_ENR_SM_WRK.DESCR254_MIXED.Visible = True;
      Else
         &OPTNScroll(&I).W3EB_ENR_SM_WRK.DESCR254_MIXED.Visible = False;
      End-If;
      
   End-For;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: HideAllGroups                                     */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is used to hide all groupboxes that are    */
/*    conditionally hidden/unhidden during the course of       */
/*    building the page.                                       */
/*    In addition, this is where we set the GroupBox Headers.  */
/*    We call this function when we first start to build the   */
/*    page to ensure that everything is hidden.                */
/* ----------------------------------------------------------- */
Function HideAllGroups();
   
   /* Header Area */
   If None(W3EB_ENR_LBL.INFO_RESTRICTIONS) Then
      W3EB_ENR_LBL.GRPB_RESTRICTIONS.Visible = False;
   End-If;
   
   /* W3EB_ENR_LBL.GRPB_OPTNS1.Label = "Select an Option..."; */
   Get_Text("OPTN_HDR_SELECT", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_OPTNS1.Label = &LongText;
   
   W3EB_ENR_LBL.GRPB_OPTNS1.Visible = False; /* Option Scroll */
   W3EB_ENR_LBL.GRPB_OPTN_ENT1.Visible = False; /* User-specified Flat Amount */
   /* Temporary Fix for Hiding Groupbox w/Radio Butons */
   /* Temporarily set focus to the CANCEL button */
   SetCursorPos(Panel.W3EB_ENR_2X_ELECT, W3EB_ENR_PB_WRK.PB_CANCEL);
   W3EB_ENR_LBL.GRPB_YES_NO1.Visible = False; /* Yes/No Style */
   W3EB_ENR_LBL.GRPB_AUTO1.Visible = False; /* Automatic Enrollment style */
   
   W3EB_ENR_LBL.GRPB_OPTN_RES1.Visible = False; /* Option Level Restrictions */
   
   W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = False; /* Dependent/Benificiary Info */
   W3EB_ENR_LBL.GRPB_COURT_ORD1.Visible = False;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: ClearAllErrors                                    */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Wipes out all error text.                                */
/* ----------------------------------------------------------- */
Function ClearAllErrors();
   &OPTNErrorsExist = "N";
   &DEPBENErrorsExist = "N";
   /* W3EB_ENR_LBL.INFO_PLANTYPEERR = " "; */
   W3EB_ENR_LBL.GRPB_PLANTYPEERR.Visible = False;
   W3EB_ENR_LBL.INFO_ERROR1 = " ";
   W3EB_ENR_LBL.GRPB_ERROR1.Visible = False;
   W3EB_ENR_LBL.INFO_DEP_ERROR1 = " ";
   W3EB_ENR_LBL.GRPB_DEP_ERROR1.Visible = False;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ApplyInitialCrossPlan                             */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is used to "disable" any option that has   */
/*    a Cross Plan requirement, where that Cross Plan          */
/*    requirement has not been met (and an election has been   */
/*    made or pre-entered into the controlling plan type).     */
/*    Options are "disabled" by setting Eff_Status to "I".     */
/*    If the option has been marked as "Selected" (due to      */
/*    a pre-enter, previous entry, or Default applied), but    */
/*    the option is disabled due to Cross-Plan, we "de-select" */
/*    the option.                                              */
/*                                                             */
/* Flags & Variables Set:                                      */
/*    &XPlanIdentical  (Y/N - Are the Cross Plan requirements  */
/*                      across all options the same?)          */
/*    &DisabledOptnExists (Y/N - One or more options are       */
/*                         disabled)                           */
/* ----------------------------------------------------------- */
Function ApplyInitialCrossPlan();
   &XPlanIdentical = "Y";
   &DisabledOptnExists = "N";
   &SaveXPlanType = " ";
   &SaveXBenefitPlan = " ";
   &SaveXLimitPct = 0;
   &XPlanRequiredAmt = 0;
   &Option_Cd = " ";
   
   If &XPlanExists = "Y" Then
      For &I = 1 To ActiveRowCount(Scroll.W3EB_PAROPTN_VW)
         /* Get Attributes of this Option */
         &Option_Cd = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_PAROPTN_VW.OPTION_CD);
         
         /* Get the Cross Plan Requirements for this Option*/
         &CrossPlanType = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.CROSS_PLAN_TYPE);
         &CrossBenefitPlan = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.CROSS_BENEF_PLAN);
         &CrossLimitPct = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.COVERAGE_LIMIT_PCT);
         
         If All(&CrossPlanType) Then
            /* This option has a Cross Plan requirement                */
            /* Is it different from a previous Cross Plan requirement? */
            If All(&SaveXPlanType) Then
               If &CrossPlanType <> &SaveXPlanType Or
                     &CrossBenefitPlan <> &SaveXBenefitPlan Or
                     &CrossLimitPct <> &SaveXLimitPct Then
                  &XPlanIdentical = "N";
               End-If;
            Else
               &SaveXPlanType = &CrossPlanType;
               &SaveXBenefitPlan = &CrossBenefitPlan;
               &SaveXLimitPct = &CrossLimitPct;
            End-If;
            
            /* Get BAS_PAR_PLAN_VW Row for Controlling (CTL) Plan Type */
            &CTLPlanRow = GetParPlanRow(&CrossPlanType);
            If &CTLPlanRow <> Null Then
               &CTLOptionCd = &CTLPlanRow.BAS_PAR_PLAN_VW.OPTION_CD.Value;
               If All(&CTLOptionCd) And
                     (All(&CrossBenefitPlan) Or
                        All(&CrossLimitPct)) Then
                  /* Controlling Plan Type has an election or pre-entry, and */
                  /* we need to check the Benefit Plan and/or Coverage Amount */
                  /* Get the Benefit Plan of the Controlling Plan Type election */
                  &CTLOptnRow = GetParOptnRow(&CrossPlanType, &CTLOptionCd);
                  If All(&CrossBenefitPlan) And
                        &CTLOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value <> &CrossBenefitPlan Then
                     /* Plan Elected/Pre-Entered doesn't satisfy the Cross Plan requirement */
                     UpdateValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.EFF_STATUS, "I");
                     Gray(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED);
                     &DisabledOptnExists = "Y";
                     If FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED) = "Y" Then
                        /* De-Select this option */
                        UpdateValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED, "N");
                        &SelectedOptionRow = 0;
                        
                     End-If;
                  End-If;
                  If All(&CrossLimitPct) Then
                     
                     /* There is a Cross Plan Limit, and this is not a Special-Calc plan  */
                     /* Check to see that Controlling Plan Type has enough Coverage       */
                     /* If not, set the EFF_Status to "I".                                */
                     /* First, calculate the amount of coverage in this plan type         */
                     
                     &EE_Flat_Amount = W3EB_ENR_L0_WRK.FLAT_AMOUNT;
                     &CoverageAmount = Calculate2xCoverage(&PLAN_TYPE, &Option_Cd, &EE_Flat_Amount, 0);
                     /* Now calculate the amount of coverage in the Controlling plan type */
                     &EE_Flat_Amount = &CTLPlanRow.BAS_PAR_PLAN_VW.FLAT_AMOUNT.Value;
                     &XPlanAmount = Calculate2xCoverage(&CrossPlanType, &CTLOptionCd, &EE_Flat_Amount, 0);
                     
                     &MaxXPlanAmount = (&CrossLimitPct * &XPlanAmount) / 100;
                     
                     If &CoverageAmount > &MaxXPlanAmount Then
                        UpdateValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.EFF_STATUS, "I");
                        Gray(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED);
                        &DisabledOptnExists = "Y";
                        If FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED) = "Y" Then
                           /* De-Select this option */
                           UpdateValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.SELECTED, "N");
                           &SelectedOptionRow = 0;
                        End-If;
                     End-If;
                  End-If; /* Cross Limit Pct exists */
               End-If; /* CTLOptionCd And (CrossBenefitPlan Or CrossLimitPct) */
            End-If; /* CTL Plan Row Found */
         End-If; /* Cross Plan Restriction on this Option */
      End-For; /* Option Loop */
   End-If; /* At least one Cross Plan restriction in this plan type */
   If &DisabledOptnExists = "Y" Then
      &LongText = "";
      &Text = "";
      /* Message in the Header area... */
      /* "One or more of the plans below are currently unavailable..." */
      Get_Text("PLANSDISABLED", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      AppendText(&Text, &LongText, &HTMLNewLine);
      W3EB_ENR_LBL.INFO_RESTRICTIONS = WrapText(&Text, "PSTEXT");
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildEEInstructions                               */
/* Returns: Nothing                                            */
/* Input Parameters: &I (pointer to the selected option)       */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the User-Entry instructions text area in       */
/*    the "Enter a Coverage Amount" area.                      */
/*    Call this function when an EE-Specified plan is          */
/*    selected.                                                */
/*                                                             */
/* Sets the following flags and variables:                     */
/* ----------------------------------------------------------- */
Function BuildEEInstructions(&I);
   &Text = "";
   If &SHOW_COST = "Y" Then
      &Cost = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.COST_AMOUNT);
   Else
      &Cost = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.COST_TOTAL);
   End-If;
   /* "The selected plan requires that you specify a coverage amount" */
   Get_Text("OPTN_SPEC_CVG1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   AppendText(&Text, &LongText, "");
   If All(&Cost) Then
      /* There is an employee cost for this plan, but the cost (rate) in &Cost may be        */
      /* inaccurate.                                                                         */
      /* Get the precise cost (rate) directly from the rate table associated with this plan. */
      &P_BenPlan = &OPTNScroll.GetRow(&I).GetRecord(Record.W3EB_PAROPTN_VW).GetField(Field.BENEFIT_PLAN).Value;
      GetPreciseRate(&PLAN_TYPE, &P_BenPlan, &PreciseRate, &PreciseUnit);
      &Formatted_Amount1 = FormatAmount(&PreciseRate, "Y", "Y");
      GetLevel0()(1).W3EB_ENR_L0_WRK.FORMAT_AMT5.Value = &PreciseRate;
      &Formatted_Amount1 = GetLevel0()(1).W3EB_ENR_L0_WRK.FORMAT_AMT5.FormattedValue;
      &Formatted_Amount2 = FormatAmount(&PreciseUnit, "N", "Y");
      
      /* "Indicate your desired coverage..." */
      Get_Text("OPTN_SPEC_CVG2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      AppendText(&Text, &LongText, " ");
      /* "Your premium rate is..." */
      Get_Text("OPTN_COST_PER2", &PLAN_TYPE, &LongText, &FreqText, &Formatted_Amount1, &Formatted_Amount2, " ", " ");
      AppendText(&Text, &LongText, " ");
   End-If;
   If All(&Text) Then
      W3EB_ENR_LBL.INFO_INSTRUCT1 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
   Else
      W3EB_ENR_LBL.INFO_INSTRUCT1 = " ";
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildEERestrictions                               */
/* Returns: Nothing                                            */
/* Input Parameters: &I (pointer to the selected option)       */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the User-Entry restrictions text area in       */
/*    the "Enter a Coverage Amount" area.                      */
/*    Call this function when an EE-Specified plan is          */
/*    selected.                                                */
/*                                                             */
/* Sets the following flags and variables:                     */
/*    &EEResExists (Y/N) indicates that the EE-Level           */
/*                           Retrictions area contains text.   */
/* ----------------------------------------------------------- */
Function BuildEERestrictions(&I);
   &Text = "";
   &EEResExists = "N";
   
   /* Note that as of HCM 9, neither Min/Max nor Rounding rules are applied */
   
   /* Generate "Proof Required" Messsage */
   &ProofRequired = "N";
   &ProofStartFlt = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.PROOF_START_FLT);
   &WvProofStartFlt = FetchValue(Scroll.W3EB_PAROPTN_VW, &I, W3EB_ENR_L1_WRK.WV_PROOF_START_FLT);
   
   If &CvrgElect = "W" Then
      If &WvProofStartFlt < 99999999 Then
         &ProofRequired = "Y";
         &ProofAmount = &WvProofStartFlt;
      End-If;
   Else
      If &ProofStartFlt < 99999999 Then
         &ProofRequired = "Y";
         &ProofAmount = &ProofStartFlt;
      End-If;
   End-If;
   
   If &ProofRequired = "Y" Then
      If &ProofAmount > 0 Then
         &Amt = FormatAmount(&ProofAmount, "N", "Y");
         /* "EOI is required if you elect coverage >= ... */
         Get_Text("OPTN_EOI2", &PLAN_TYPE, &LongText, &Amt, " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
      Else
         /* "Note that you will be required to provide EOI for this plan... " */
         Get_Text("OPTN_EOI3", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
         
      End-If;
      &OptionResExists = "Y";
   End-If;
   
   W3EB_ENR_LBL.INFO_OPTN_RES2 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: HideUserEntryArea                                 */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is called to hide the entry area for the   */
/*    EE-specified flat amount.                                */
/* ----------------------------------------------------------- */
Function HideUserEntryArea();
   
   W3EB_ENR_L0_WRK.FLAT_AMOUNT = 0;
   GetLevel0()(1).W3EB_ENR_LBL.GRPB_OPTN_ENT1.Visible = False;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ExposeUserEntryArea                               */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is called to expose the entry area for the */
/*    EE-specified flat amount.                                */
/*    We also build the instructions and restrictions areas    */
/*    for the user entry area.                                 */
/*                                                             */
/* Uses the &SelectedOptionRow Component variable, and the     */
/* pointer to the Bas_Par_Plan_Vw record (&PlanRec)            */
/* ----------------------------------------------------------- */
Function ExposeUserEntryArea();
   
   /* Setup the Heading and EditBox Label for the User Entry groupbox */
   Get_Text("OPTN_ENTER_AMOUNT", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_LBL.GRPB_OPTN_ENT1.Label = &LongText;
   Get_Text("COVERAGE_AMOUNT", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_L0_WRK.FLAT_AMOUNT.Label = &LongText;
   
   If None(W3EB_ENR_L0_WRK.FLAT_AMOUNT) Then
      /* Populate with the value that exists on Bas_Partic_Plan */
      If All(&PlanRec) Then
         W3EB_ENR_L0_WRK.FLAT_AMOUNT = &PlanRec.FLAT_AMOUNT.Value;
      End-If;
   End-If;
   GetLevel0()(1).W3EB_ENR_LBL.GRPB_OPTN_ENT1.Visible = True;
   /* Build the option-specific restrictions */
   BuildEEInstructions(&SelectedOptionRow);
   BuildEERestrictions(&SelectedOptionRow);
End-Function;

/* ----------------------------------------------------------- */
/* Function: Process2xScrollSelection                          */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is executed whenever the user selects an   */
/*    option from the scroll area.                             */
/*    Radio buttons are synced up, and the Dep/Ben area is     */
/*    hidden if a Waive option is selected.                    */
/* ----------------------------------------------------------- */
Function Process2xScrollSelection();
   Local string &jCoverage_Type, &jSum_Dep_Covg;
   
   If GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW).GetRow(&CurrentRow2x).W3EB_ENR_L1_WRK.SELECTED.Value = "Y" Then
      &SelectedOptionRow = &CurrentRow2x;
      ResetRadioButtons(&CurrentRow2x);
      
      &jCoverage_Type = GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW).GetRow(&CurrentRow2x).W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value;
      &jSum_Dep_Covg = GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW).GetRow(&CurrentRow2x).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value;
      
      If (&jCoverage_Type <> "2") Or
            (&jSum_Dep_Covg = "Y") Then
         HideUserEntryArea();
      Else
         ExposeUserEntryArea();
      End-If;
      
      If GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW).GetRow(&CurrentRow2x).W3EB_PAROPTN_VW.OPTION_TYPE.Value = "W" Then
         GetLevel0()(1).W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = False;
         HideUserEntryArea();
      Else
         If &COLLECT_DEPBEN <> "N" Then
            GetLevel0()(1).W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = True;
         End-If;
      End-If;
      If All(&DEPBENGrid) Then
         SetPctOrFlatAmount();
      End-If;
      /* For Dependent Plans, the available options may have different methods */
      /* of coverage. (Sum of Dep Coverage / Flat Amount / EE-Specified).      */
      /* Because of this, we must re-format the Beneficiary Area.              */
      If &DependentPlan = "Y" Then
         CollapseDepBenGrid();
      End-If;
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: Process2xYesNoSelection                           */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is executed whenever the user selects a    */
/*    radio button from the Yes/No selection area.             */
/*    If "No" is selected, the Dep/Ben area is hidden.         */
/* Updates the following variables/flags:                      */
/*    &SelectedOptionRow - updated to point to the selected    */
/*                         option or waive row. If "No" is     */
/*                         selected, and no waive is available */
/*                         then this pointer is set to zero.   */
/*    Also updates the "SELECTED" field in the scroll to       */
/*    reflect the proper selected option.                      */
/* ----------------------------------------------------------- */
Function Process2xYesNoSelection();
   Local string &jCoverage_Type, &jSum_Dep_Covg;
   
   If W3EB_ENR_L0_WRK.SELECTED = "Y" Then
      /* Set the "Selected" row */
      For &J = 1 To ActiveRowCount(Scroll.W3EB_PAROPTN_VW)
         If FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_PAROPTN_VW.OPTION_TYPE) = "O" Then
            &SelectedOptionRow = &J;
            UpdateValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.SELECTED, "Y");
            ResetRadioButtons(&J);
            If FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.ENROLLE_TYPE) = "2" Then
               &DependentPlan = "Y";
            Else
               &DependentPlan = "N";
            End-If;
            &jCoverage_Type = FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.COVERAGE_TYPE);
            &jSum_Dep_Covg = FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.SUM_DEP_COVG);
            If (&jCoverage_Type <> "2") Or
                  (&jSum_Dep_Covg = "Y") Then
               HideUserEntryArea();
            Else
               ExposeUserEntryArea();
            End-If;
            Break;
         End-If;
      End-For;
      
      /* UnHide the Dep/Ben Area */
      If &COLLECT_DEPBEN = "Y" Then
         If All(&DEPBENGrid) Then
            SetPctOrFlatAmount();
         End-If;
         /* For Dependent Plans, we need to re-format the Dependent area if we're */
         /* coming off of a Waive ("No"). This will respond to the type of plan   */
         /* Sum of Dep Covg, Flat Amount, etc).                                   */
         If &DependentPlan = "Y" Then
            CollapseDepBenGrid();
            &DepBenPlanRow = GetPgmPlanRow(&PLAN_TYPE);
            /* Designate Your Dependents  */
            Get_Text("DEPBEN_HDR_DEP1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.GRPB_DEP_HDR1.Label = &LongText;
            /* "The list below displays all individuals who are eligible... "  */
            If &DepBenPlanRow.W3EB_PGM_PLN_VW.ALLOW_ADD_DEPBEN.Value = "Y" Then
               Get_Text("DEPBEN_LIST_DEP1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
               W3EB_ENR_LBL.INFO_DEP_HDR1 = WrapText(&LongText, "PAADDITIONALINSTRUCTIONS");
               W3EB_ENR_LBL.INFO_DEP_HDR2 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
               Get_Text("ADD_REVIEW_DEP", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            Else
               Get_Text("DEPBEN_LIST_DEP1NA", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
               W3EB_ENR_LBL.INFO_DEP_HDR1 = WrapText(&LongText, "PAADDITIONALINSTRUCTIONS");
               W3EB_ENR_LBL.INFO_DEP_HDR2 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
               Get_Text("REVIEW_DEP", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            End-If;
            
            W3EB_ENR_L0_WRK.PB_ADD_DPND_DATA.Label = &LongText;
         End-If;
         GetLevel0()(1).W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = True;
      End-If;
      
   Else
      /* The Yes/No style can be used for the situation in which there */
      /* is no Waive available, and the only option available is not   */
      /* identified as the default (coverage will be terminated if no) */
      /* selection is made).                                           */
      
      HideUserEntryArea();
      
      If &WaiveAvailable = "Y" Then
         
         /* mark the Waive option as "selected" */
         
         For &J = 1 To ActiveRowCount(Scroll.W3EB_PAROPTN_VW)
            If FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_PAROPTN_VW.OPTION_TYPE) = "W" Then
               &SelectedOptionRow = &J;
               UpdateValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.SELECTED, "Y");
               ResetRadioButtons(&J);
               Break;
            End-If;
         End-For;
      Else
         &SelectedOptionRow = 0;
      End-If;
      /*  Hide the Dep/Ben Area */
      GetLevel0()(1).W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = False;
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: DetermineVisualMethod                             */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: &VisualMethod                            */
/* Description:                                                */
/*    Determines which of the visual methods should be used to */
/*    to solicit an election from the user.                    */
/* ----------------------------------------------------------- */
Function DetermineVisualMethod(&VisualMethod);
   /* "SCROLL" - options appear in a scroll area                      */
   /* "Y/N"    - one option and a waive (Yes/No radio buttons)        */
   /* "AUTO"   - one option, no waive. No choice - Automatic Election */
   
   &VisualMethod = "SCROLL";
   If &OptnCount = 2 Then
      If &WaiveAvailable = "Y" Then
         &VisualMethod = "Y/N";
      Else
         &VisualMethod = "SCROLL";
      End-If;
      
   End-If;
   If &OptnCount = 1 Then
      If &WaiveAvailable = "N" And
            None(&PlanRec.OPTION_CD.Value) And
            &DefaultDefined = "N" Then
         /* Not a waive, No pre-enter/election, and it's not the default. */
         /* Force the employee to elect the option, otherwise, we'll      */
         /* terminate any existing coverage.                              */
         &VisualMethod = "Y/N";
         
      Else
         /* Since we either have a pre-enter/election, or a this is the default, */
         /* it's safe to tell the employee that they'll automatically get this   */
         /* option.                                                              */
         &VisualMethod = "AUTO";
         
      End-If;
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildScrollGroup                                  */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the text info in the Scroll style.             */
/*    The scroll area is populated elsewhere.                  */
/* ----------------------------------------------------------- */
Function BuildScrollGroup();
   
   /* Column Headings */
   &ScrollRowSet = GetLevel0()(1).GetRowset(Scroll.W3EB_PAROPTN_VW);
   &ScrollRow = &ScrollRowSet.GetRow(1);
   &ScrollRec = &ScrollRow.GetRecord(Record.W3EB_ENR_L1_WRK);
   Get_Text("YOUR_COST", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   &ScrollRec.COST_TOTAL.Label = &LongText;
   Get_Text("FULL_COST", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   &ScrollRec.COST_AMOUNT.Label = &LongText;
   Get_Text("CREDITS", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   &ScrollRec.CREDIT_AMOUNT.Label = &LongText;
   /* getting the column names for coverage_level and tax_class
   from text table*/
   Get_Text("COVERAGE_LEVEL", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   &ScrollRec.DESCR60.Label = &LongText;
   Get_Text("TAX_CLASS", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   &ScrollRec.W3EB_TAX_CLASS.Label = &LongText;
   /* end */
   
   /* If not showing credits, hide the Credit and Total Cost columns */
   If &SHOW_CREDIT <> "Y" Then
      &ScrollRec.CREDIT_AMOUNT.Label = " ";
      &ScrollRec.COST_AMOUNT.Label = " ";
      For &I = 1 To &OPTNScroll.ActiveRowCount
         Scroll.W3EB_PAROPTN_VW (&I).W3EB_ENR_L1_WRK.CREDIT_AMOUNT.Value = 0;
         Scroll.W3EB_PAROPTN_VW (&I).W3EB_ENR_L1_WRK.COST_AMOUNT.Value = 0;
      End-For;
   End-If;
   
   /* "Select an option..." */
   &Text = "";
   Get_Text("OPTN_HDR_SELECT", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_OPTNS1.Label = &LongText;
   
   /* "Here are your available options with your <freq> costs... " */
   Get_Text("OPTN_HDR1", &PLAN_TYPE, &LongText, &FreqTextCap, " ", " ", " ", " ");
   AppendText(&Text, &LongText, &HTMLNewLine);
   If &SHOW_CREDIT = "Y" Then
      /* "Your cost = Base benefit cost - Credits... */
      Get_Text("OPTN_HDR2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      AppendText(&Text, &LongText, "  ");
   End-If;
   If All(&Text) Then
      W3EB_ENR_LBL.INFO_OPTN_INFO1 = WrapText(&Text, "PSTEXT");
   End-If;
   &LongText = " ";
   /* "Please choose from one of the plans below..." */
   Get_Text("OPTN_HDR3", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.INFO_OPTN_INFO2 = WrapText(&LongText, "PSTEXT");
   
   /* If any of the options has an XPlan requirement, and if all options with */
   /* XPlan requirements have the same XPlan requirements, flag these options */
   /* with a Plus (+) sign.                                                   */
   If &XPlanExists = "Y" And
         &XPlanIdentical = "Y" Then
      For &I = 1 To &OPTNScroll.ActiveRowCount
         If All(&OPTNScroll(&I).W3EB_ENR_L1_WRK.CROSS_PLAN_TYPE.Value) Then
            &OPTNScroll(&I).W3EB_ENR_L1_WRK.PREM_BASE_DISP.Value = &Plus | &OPTNScroll(&I).W3EB_ENR_L1_WRK.PREM_BASE_DISP.Value;
         End-If;
      End-For;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildYesNoGroup                                   */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the Yes/No Election Entry group.               */
/* ----------------------------------------------------------- */
Function BuildYesNoGroup();
   
   /* We use the "Yes/No" style if we have 2 options, and one is a Waive.   */
   /* We also use this style if there is only one option, it's not a Waive, */
   /* and there is no default option identified.                            */
   /* If there is no default option identified, then we leave both radio    */
   /* buttons turned off.                                                   */
   /*                                                                       */
   /* If the employee selects "NO" and a Waive is available, then we treat  */
   /* this as a positive Waive election.  If the employee selects "NO" and  */
   /* a Waive is not available, then we want the system to terminate any    */
   /* existing coverage (we do this by leaving the Option_Cd blank on       */
   /* Bas_Partic when updating the database after the STORE button is hit). */
   
   /* "Select an option..." */
   Get_Text("OPTN_HDR_SELECT", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_YES_NO1.Label = &LongText;
   
   /* Find the option (note: it may not be designated as the default) */
   /* We need to know if it has been disabled due to Cross Plan requirements */
   &OptionDisabled = "N";
   &OptionRow = 0;
   &OptionCd = " ";
   &LinkActive = False;
   For &J = 1 To Scroll.W3EB_PAROPTN_VW.ActiveRowCount
      If FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_PAROPTN_VW.OPTION_TYPE) = "O" Then
         
         &OptionRow = &J;
         &OptionCd = FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_PAROPTN_VW.OPTION_CD);
         &LinkActive = &OPTNScroll.GetRow(&J).GetRecord(Record.W3EB_ENR_L1_WRK).GetField(Field.PB_BENEFIT_PLAN).Enabled;
         /* Disable the option if not available due to Cross Plan */
         If FetchValue(Scroll.W3EB_PAROPTN_VW, &J, W3EB_ENR_L1_WRK.EFF_STATUS) <> "A" Then
            
            &OptionDisabled = "Y";
         End-If;
         Break;
      End-If;
   End-For;
   If All(&PlanRec.OPTION_CD.Value) Then
      /* Election has been entered, or pre-entered */
      /******************************Begin Resolution 581844**********************************/
      If &OptionCd = &PlanRec.OPTION_CD.Value Then
         
         /* Option (not Waive) has been elected or pre-entered */
         If &OptionDisabled = "N" Then
            W3EB_ENR_L0_WRK.SELECTED.Value = "Y";
            W3EB_ENR_L0_WRK.SELECTED.Enabled = True;
         Else
            W3EB_ENR_L0_WRK.SELECTED.Value = "N";
            W3EB_ENR_L0_WRK.SELECTED.Enabled = False;
         End-If;
      Else
         /********************************End Resolution 581844**********************************/
         /* Waive has been elected or pre-entered */
         W3EB_ENR_L0_WRK.SELECTED.Value = "N";
         
         If &OptionDisabled = "Y" Then
            
            W3EB_ENR_L0_WRK.SELECTED.Enabled = False;
            
         End-If;
      End-If;
   Else
      /* Apply default */
      If &WaiveIsDefault = "Y" Then
         
         /* Turn on the "NO" button */
         W3EB_ENR_L0_WRK.SELECTED.Value = "N";
         If &OptionDisabled = "Y" Then
            W3EB_ENR_L0_WRK.SELECTED.Enabled = False;
         End-If;
      Else
         
         If &DefaultDefined = "Y" Then
            
            If &OptionDisabled = "N" Then
               /* Turn on the "YES" button */
               
               W3EB_ENR_L0_WRK.SELECTED.Value = "Y";
            Else
               /* Don't allow selection of the option */
               /* We have to disable both sides of the Yes/No */
               
               W3EB_ENR_L0_WRK.SELECTED.Enabled = False;
            End-If;
         End-If;
      End-If;
   End-If;
   /* Populate the Yes/No Text */
   &PlanTypeDescr = W3EB_ENR_L0_WRK.PLAN_TYPE.LongTranslateValue;
   Get_Text("OPTN_NO", &PLAN_TYPE, &LongText, &PlanTypeDescr, " ", " ", " ", " ");
   GetPageField(Page.W3EB_ENR_2X_ELECT, "NOBUTTON").Label = &LongText;
   
   /* Setup the Benefit Plan Hyperlink */
   &OPTNScrollRow = &OPTNScroll.GetRow(&OptionRow);
   &Descr = &OPTNScrollRow.W3EB_ENR_L1_WRK.DESCR60.Value;
   &Benefit_Plan = &OPTNScrollRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
   GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Label = &Descr;
   If &LinkActive = True Then
      GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Enabled = True;
   Else
      GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Enabled = False;
   End-If;
   
   Process2xYesNoSelection();
   
End-Function;

/* ------------------------------------------------------------ */
/*  Function: BuildAutoGroup                                    */
/*  Returns: Nothing                                            */
/*  Input Parameters: None                                      */
/*  Output Parameters: None                                     */
REM Description:                                            
REM   Populates the Automatic Election Election Entry group.
REM   Assumption: Plan offers a single option
REM  -----------------------------------------------------------*;
Function BuildAutoGroup();
   Local string &jCoverage_Type, &jSum_Dep_Covg;
   
   If All(&FreqTextCap) Then
      Get_Text("OPTN_HDR4", &PLAN_TYPE, &LongText, &FreqTextCap, " ", " ", " ", " ");
   Else
      Get_Text("OPTN_NOFREQ", &PLAN_TYPE, &LongText, "", " ", " ", " ", " ");
   End-If;
   W3EB_ENR_LBL.GRPB_AUTO1.Label = &LongText;
   
   /* "You are automatically enrolled in the <plan> plan " */
   &PlanText = FetchValue(Scroll.W3EB_PAROPTN_VW, 1, W3EB_ENR_L1_WRK.DESCR60);
   
   Get_Text("OPTN_AUTO1", &PLAN_TYPE, &LongText, &PlanText, " ", " ", " ", " ");
   W3EB_ENR_LBL.INFO_OPTN_AUTO1 = WrapText(&LongText, "PSTEXT");
   
   GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Label = &PlanText;
   W3EB_ENR_LBL.SELECTED = "Y";
   
   &SelectedOptionRow = 1;
   
   &OPTNScrollRow = &OPTNScroll.GetRow(&SelectedOptionRow);
   &Benefit_Plan = &OPTNScrollRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
   &LinkActive = False;
   If &OPTNScrollRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value = "O" Then
      &LinkActive = &OPTNScrollRow.W3EB_ENR_L1_WRK.PB_BENEFIT_PLAN.Enabled;
   End-If;
   If &LinkActive = True Then
      GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Enabled = True;
   Else
      GetLevel0()(1).W3EB_ENR_L0_WRK.PB_BENEFIT_PLAN.Enabled = False;
   End-If;
   
   &jCoverage_Type = &OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value;
   &jSum_Dep_Covg = &OPTNScrollRow.W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value;
   If (&jCoverage_Type <> "2") Or
         (&jSum_Dep_Covg = "Y") Then
      HideUserEntryArea();
   Else
      ExposeUserEntryArea();
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: GetBenPlanDescr                                   */
/* Returns: String containing the Benefit Plan Description     */
/* Input Parameters: PlanType                                  */
/* Output Parameters: None                                     */
/* Description:                                                */
/*              Obtains the Descr for the indicated Benefit    */
/*              Plan in the indicated Plan Type, using the     */
/*              plan definition Global Rowset.                 */
/* ----------------------------------------------------------- */
Function GetBenPlanDescr(&PlanType, &BenPlan) Returns string;
   &Descr = " ";
   &PlanDefnRow = GetPlanDefnRow(&PlanType, &BenPlan);
   If All(&PlanDefnRow) Then
      &Descr = &PlanDefnRow.BENEF_PLAN_TBL.DESCR.Value;
   End-If;
   Return &Descr;
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildOptionRestrictions                           */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the Option-Level restrictions text area under  */
/*    the option presentation area.                            */
/*                                                             */
/* Sets the following flags and variables:                     */
/*    &OptionResExists (Y/N) indicates that the Option Level   */
/*                           Retrictions area contains text.   */
/* ----------------------------------------------------------- */
Function BuildOptionRestrictions();
   
   /* Setup the GroupBox Heading */
   Get_Text("NOTES", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_LBL.GRPB_OPTN_RES1.Label = &LongText;
   
   &Text = "";
   &OptionResExists = "N";
   &SumOfDepCoverage = "N";
   If &SelectedOptionRow > 0 Then
      If &DependentPlan = "Y" And
            
            &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y" Then
         &SumOfDepCoverage = "Y";
      End-If;
   End-If;
   
   If &VisualMethod = "AUTO" Or
         &VisualMethod = "Y/N" Then
      
      /* For the Yes/No style, the currently selected option might be a Waive. */
      /* We need to use the Option row, not the Waive to display the cost and  */
      /* determine whether this is a "sum of dependent coverage" plan.         */
      /* Note: due to XPlan, there may not be a selected option row.           */
      If &SelectedOptionRow > 0 Then
         If &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.OPTION_TYPE.Value = "O" Then
            /* Nothing to do - this is the Option row */
            &YesNoOptionRow = &SelectedOptionRow;
         Else
            /* This is the Waive - we need to find the Option. It will be either the */
            /* row immediately preceding, or the row immediately following.          */
            /* Note that due to XPlan, we may not have a selected option row.        */
            If &SelectedOptionRow = 1 Then
               &YesNoOptionRow = &SelectedOptionRow + 1;
            Else
               &YesNoOptionRow = &SelectedOptionRow - 1;
            End-If;
            If &YesNoOptionRow > 0 Then
               If &DependentPlan = "Y" And
                     
                     &OPTNScroll(&YesNoOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y" Then
                  &SumOfDepCoverage = "Y";
               End-If;
            End-If;
         End-If;
      Else
         &YesNoOptionRow = 0;
      End-If;
      
      /* Build message regarding employee's cost */
      &LongText = "";
      If &SelectedOptionRow > 0 Then
         If &SumOfDepCoverage = "Y" Then
            /* "Sum of Dependent Coverage" Plan */
            /* "Premium rate is sum of coverage..." */
            Get_Text("OPTN_COST_SUM", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         Else
            If &YesNoOptionRow > 0 Then
               &EECost = &OPTNScroll(&YesNoOptionRow).W3EB_ENR_L1_WRK.COST_TOTAL.Value;
            Else
               &EECost = 0;
            End-If;
            If &EECost > 0 Then
               
               If &OPTNScroll(&YesNoOptionRow).W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value <> "2" Then
                  &Formatted_Amount = FormatAmount(&EECost, "Y", "Y");
                  /* "Your [freq] cost for this coverage is [amount]." */
                  Get_Text("OPTN_COST1", &PLAN_TYPE, &LongText, &FreqText, &Formatted_Amount, " ", " ", " ");
               Else
                  /* "Your [freq] cost for this coverage is [amount] per [amount]." */
                  &P_BenPlan = &OPTNScroll(&YesNoOptionRow).W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
                  GetPreciseRate(&PLAN_TYPE, &P_BenPlan, &PreciseRate, &PreciseUnit);
                  GetLevel0()(1).W3EB_ENR_L0_WRK.FORMAT_AMT5.Value = &PreciseRate;
                  &Formatted_Amount = GetLevel0()(1).W3EB_ENR_L0_WRK.FORMAT_AMT5.FormattedValue;
                  &Formatted_Amount1 = FormatAmount(&PreciseUnit, "N", "Y");
                  Get_Text("OPTN_COST_PER2", &PLAN_TYPE, &LongText, &FreqText, &Formatted_Amount, &Formatted_Amount1, " ", " ");
               End-If;
            Else
               /* "This coverage provided at no cost..." */
               Get_Text("OPTN_COST_FREE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            End-If;
         End-If;
         AppendText(&Text, &LongText, &HTMLNewLine);
         &OptionResExists = "Y";
      End-If;
   End-If; /* Auto or YesNo */
   
   If &VisualMethod = "AUTO" Then
      
      If &DependentPlan <> "Y" Then
         /* "Coverage in this plan is automatic, however you'll need to... " */
         Get_Text("OPTN_AUTO2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
      Else
         /* "Coverage in this plan is automatic, however you'll need to... " */
         Get_Text("OPTN_AUTO3", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
      End-If;
      &OptionResExists = "Y";
   End-If;
   
   If &ProofRequired = "Y" Then
      /* If you select this plan, you'll be required to provide EOI..." */
      Get_Text("OPTN_EOI1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      If &VisualMethod = "SCROLL" Then
         AppendText(&Text, &Asterisk, &HTMLNewLine);
      Else
         AppendText(&Text, "", &HTMLNewLine);
      End-If;
      AppendText(&Text, &LongText, " ");
      &OptionResExists = "Y";
   End-If;
   
   If &EELevelPlanExists = "Y" Then
      
      &LongText = "";
      &Formatted_Amount = FormatAmount(&EERateUnit, "N", "Y");
      If &DependentPlan = "Y" Then
         /* For Dependent Plans w/EE-Specified coverage (not at Dependent level)      */
         /* we may not have the cost per $1,000 in Bas_Partic_Cost. We must punt!     */
         /* " Cost is per $1,000, if no cost listed please refer to your handbook..." */
         Get_Text("OPTN_COST_PER3", &PLAN_TYPE, &LongText, &Formatted_Amount, " ", " ", " ", " ");
      Else
         If &VisualMethod = "SCROLL" Then
            /* " The cost displayed for this plan is XXX per... " */
            Get_Text("OPTN_COST_PER1", &PLAN_TYPE, &LongText, &Formatted_Amount, " ", " ", " ", " ");
         End-If;
      End-If;
      
      If All(&LongText) Then
         AppendText(&Text, &Carat, &HTMLNewLine);
         AppendText(&Text, &LongText, " ");
         &OptionResExists = "Y";
      End-If;
   End-If;
   
   If &VisualMethod = "SCROLL" And
         &DependentPlan = "Y" Then
      If &SumOfCvgExists = "Y" Then
         /* " #Your cost for this plan depends upon several factors, including..." */
         Get_Text("OPTN_COST_SUM", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &Pound, &HTMLParagraph);
         AppendText(&Text, &LongText, " ");
         &OptionResExists = "Y";
      End-If;
   End-If;
   
   /* If all options with XPlan restrictions have the same restrictions, */
   /* include a description of the restriction in the Notes.             */
   If &XPlanExists = "Y" And
         &XPlanIdentical = "Y" Then
      &PlanTypeDescr = GetPlanTypeDescr(&SaveXPlanType);
      &BenPlanDescr = " ";
      If All(&SaveXBenefitPlan) Then
         &BenPlanDescr = GetBenPlanDescr(&SaveXPlanType, &SaveXBenefitPlan);
      End-If;
      If All(&SaveXLimitPct) Then
         &Formatted_Amount = FormatAmount(&SaveXLimitPct, "N", "N");
      End-If;
      If None(&SaveXLimitPct) Then
         /* No % XPlan Limit */
         If All(&SaveXBenefitPlan) Then
            Get_Text("OPTN_XPLAN1", &PLAN_TYPE, &LongText, &BenPlanDescr, " ", " ", " ", " ");
         Else
            Get_Text("OPTN_XPLAN1", &PLAN_TYPE, &LongText, &PlanTypeDescr, " ", " ", " ", " ");
         End-If;
      Else
         /* Percent Limit */
         If All(&SaveXBenefitPlan) Then
            Get_Text("OPTN_XPLAN2", &PLAN_TYPE, &LongText, &BenPlanDescr, &Formatted_Amount, &BenPlanDescr, " ", " ");
         Else
            Get_Text("OPTN_XPLAN2", &PLAN_TYPE, &LongText, &PlanTypeDescr, &Formatted_Amount, &PlanTypeDescr, " ", " ");
         End-If;
      End-If;
      If &VisualMethod = "SCROLL" Then
         &LongText = &Plus | " " | &LongText;
      End-If;
      AppendText(&Text, &LongText, &HTMLNewLine);
      &OptionResExists = "Y";
   End-If;
   
   If &DuplicateCoverage = "Y" Then
      /* "You may see duplicate coverage levels above if...  " */
      Get_Text("OPTN_DUP_CVG1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      AppendText(&Text, &LongText, &HTMLNewLine);
      &OptionResExists = "Y";
   End-If;
   
   If &OptionResExists = "Y" Then
      W3EB_ENR_LBL.INFO_OPTN_RES1 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
      W3EB_ENR_LBL.GRPB_OPTN_RES1.Visible = True;
   End-If;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ExposeOptions                                     */
/* Returns: Nothing                                            */
/* Input Parameters: &VisualMethod                             */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Unhides the appropriate "Election Entry Style" group,    */
/*    depending upon the value of VisualMethod.                */
/*    If we have at least one "User-Specified option available */
/*    (and "selectable"), then we unhide the user-entry area   */
/*    for Employee-specified Flat Amount.                      */
/* ----------------------------------------------------------- */
Function ExposeOptions(&VisualMethod);
   Local string &jCoverage_Type, &jSum_Dep_Covg;
   
   Evaluate &VisualMethod
   When "SCROLL"
      /* UnHide the "Scroll" Group */
      BuildScrollGroup();
      If All(&SelectedOptionRow) Then
         
         &jCoverage_Type = FetchValue(Scroll.W3EB_PAROPTN_VW, &SelectedOptionRow, W3EB_ENR_L1_WRK.COVERAGE_TYPE);
         &jSum_Dep_Covg = FetchValue(Scroll.W3EB_PAROPTN_VW, &SelectedOptionRow, W3EB_ENR_L1_WRK.SUM_DEP_COVG);
         &Eff_Status = FetchValue(Scroll.W3EB_PAROPTN_VW, &SelectedOptionRow, W3EB_ENR_L1_WRK.EFF_STATUS);
         If (&jCoverage_Type <> "2") Or
               (&jSum_Dep_Covg = "Y") Then
            HideUserEntryArea();
         Else
            If &Eff_Status = "A" Then
               ExposeUserEntryArea();
            End-If;
         End-If;
      End-If;
      W3EB_ENR_LBL.GRPB_OPTNS1.Visible = True;
      Break;
      
   When "Y/N"
      BuildYesNoGroup();
      /* UnHide the "Yes/No" Group */
      W3EB_ENR_LBL.GRPB_YES_NO1.Visible = True;
      Break;
      
   When "AUTO"
      BuildAutoGroup();
      /* UnHide the "Automatic Election" Group */
      W3EB_ENR_LBL.GRPB_AUTO1.Visible = True;
      Break;
   End-Evaluate;
   /* Expose Header Restrictions */
   If All(W3EB_ENR_LBL.INFO_RESTRICTIONS) Then
      W3EB_ENR_LBL.GRPB_RESTRICTIONS.Visible = True;
   Else
      W3EB_ENR_LBL.GRPB_RESTRICTIONS.Visible = False;
   End-If;
   
   /* Adjust the layout of the page. If the User Entry, Error and the  */
   /* Restrictions areas are all hidden, then we have two "Spacing"    */
   /* groupboxes visible. Make one invisible.                          */
   If W3EB_ENR_LBL.GRPB_ERROR1.Visible = False And
         W3EB_ENR_LBL.GRPB_OPTN_ENT1.Visible = False And
         W3EB_ENR_LBL.GRPB_OPTN_RES1.Visible = False Then
      W3EB_ENR_LBL.GRPB_SPACE3.Visible = False;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: ClearAllocations                                  */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Zeroes out all Flat Amount and/or Percentage Beneficiary */
/*    Allocations.                                             */
/* ----------------------------------------------------------- */
Function ClearAllocations();
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      &DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT.Value = 0;
      &DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT1.Value = 0;
      &DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT.Value = 0;
      &DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT1.Value = 0;
   End-For;
End-Function;

/* ----------------------------------------------------------- */
/* Function: UpdateAllocations                                 */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Updates the Flat_Amount and/or Percentage info for       */
/*    Dep/Bens in the grid, with information from              */
/*    Bas_Partic_Dpnd for the same individuals. This allows us */
/*    to load any pre-entered beneficiaries, or the employee's */
/*    previously saved election for this event.                */
/*                                                             */
/*    If no entries exist in Bas_Partic_Dpnd, then we update   */
/*    from the employee's current enrollment in Base Benefits, */
/*    but only for court-ordered allocations/coverage.         */
/*                                                             */
/*    Sets &PreEnteredDeps to "Y" only if any entries are      */
/*    updated from Bas_Partic_Dpnd.                            */
/*                                                             */
/*    If this is a Dependent Plan, sets the SELECTED flag to   */
/*    "Y" on a "hit".                                          */
/* ----------------------------------------------------------- */
Function UpdateAllocations();
   
   If &PlanRow <> Null Then
      /* Get the Bas_Partic_Dpnd rows for this plan type */
      &DPNDRowSet = GetSpecificRowSet(&PlanRow, "BAS_PAR_DPND_VW");
      If &DPNDRowSet <> Null Then
         For &I = 1 To &DPNDRowSet.ActiveRowCount
            
            &DPNDRow = &DPNDRowSet.GetRow(&I);
            If &DPNDRow <> Null Then
               &DPNDRec = &DPNDRow.GetRecord(Record.BAS_PAR_DPND_VW);
               &DepBen = &DPNDRec.DEPENDENT_BENEF.Value;
               &FlatAmount = &DPNDRec.FLAT_AMOUNT.Value;
               &BenefPct = &DPNDRec.BENEF_PCT.Value;
               &Contingent = &DPNDRec.Contingent.Value;
               &Excess = &DPNDRec.EXCESS.Value;
               
               If All(&FlatAmount) Or
                     All(&BenefPct) Or
                     &DependentPlan = "Y" Then
                  /* Update the corresponding entry in the Grid */
                  For &J = 1 To &DEPBENGrid.ActiveRowCount
                     &DEPBENGridRow = &DEPBENGrid.GetRow(&J);
                     &DEPBENGridWorkRec = &DEPBENGridRow.GetRecord(Record.W3EBENR_DEP_WRK);
                     If All(&DEPBENGrid(&J).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value) Then
                        If &DEPBENGrid(&J).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value = &DepBen Then
                           &PreEnteredDeps = "Y";
                           If &DependentPlan = "Y" Then
                              &DEPBENGridWorkRec.SELECTED.Value = "Y";
                           End-If;
                           &DEPBENGridWorkRec.EXCESS.Value = &Excess;
                           If &Contingent = "Y" Then
                              &DEPBENGridWorkRec.FLAT_AMOUNT1.Value = &FlatAmount;
                              &DEPBENGridWorkRec.BENEF_PCT1.Value = &BenefPct;
                              
                           Else
                              &DEPBENGridWorkRec.FLAT_AMOUNT.Value = &FlatAmount;
                              &DEPBENGridWorkRec.BENEF_PCT.Value = &BenefPct;
                           End-If;
                        End-If;
                     End-If;
                  End-For;
               End-If;
            End-If;
         End-For;
      End-If;
   End-If;
   
   If &PreEnteredDeps = "N" Then
      /* No rows exist in Bas_Partic_Dpnd, fallback to Base Benefits, but     */
      /* only load Dep/Bens that have active court orders for this plan type. */
      &RECNAME = Record.W3EB_2XCVG_VW;
      &FIELDNAME = Field.PLAN_TYPE;
      &CURRCVGRow = GetSpecificRow(&W3EBGBLRS_2X_COVRG, &RECNAME, &FIELDNAME, &PLAN_TYPE);
      If All(&CURRCVGRow) Then
         &CurrDepBenRS = GetSpecificRowSet(&CURRCVGRow, "W3EB_2XCVGBF_VW");
         If All(&CurrDepBenRS) Then
            For &I = 1 To &CurrDepBenRS.ActiveRowCount
               &CurrDepBenRow = &CurrDepBenRS.GetRow(&I);
               &CurrDepBenRec = &CurrDepBenRow.GetRecord(Record.W3EB_2XCVGBF_VW);
               &DepBen = &CurrDepBenRec.DEPENDENT_BENEF.Value;
               &FlatAmount = &CurrDepBenRec.FLAT_AMOUNT.Value;
               &BenefPct = &CurrDepBenRec.BENEF_PCT.Value;
               &Contingent = &CurrDepBenRec.Contingent.Value;
               &Excess = &CurrDepBenRec.EXCESS.Value;
               If All(&FlatAmount) Or
                     All(&BenefPct) Then
                  /* Update the corresponding entry in the Grid */
                  For &J = 1 To &DEPBENGrid.ActiveRowCount
                     &DEPBENGridRow = &DEPBENGrid.GetRow(&J);
                     &DEPBENGridWorkRec = &DEPBENGridRow.GetRecord(Record.W3EBENR_DEP_WRK);
                     If All(&DEPBENGrid(&J).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value) Then
                        If &DEPBENGrid(&J).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value = &DepBen Then
                           If &DEPBENGrid(&J).W3EBENR_DEP_WRK.RIDER_TYPE.Value = "C" Then
                              &DEPBENGridWorkRec.EXCESS.Value = &Excess;
                              If &DependentPlan = "Y" Then
                                 &DEPBENGridWorkRec.SELECTED.Value = "Y";
                              End-If;
                              If &Contingent = "Y" Then
                                 &DEPBENGridWorkRec.FLAT_AMOUNT1.Value = &FlatAmount;
                                 &DEPBENGridWorkRec.BENEF_PCT1.Value = &BenefPct;
                                 
                              Else
                                 &DEPBENGridWorkRec.FLAT_AMOUNT.Value = &FlatAmount;
                                 &DEPBENGridWorkRec.BENEF_PCT.Value = &BenefPct;
                              End-If;
                           End-If;
                        End-If;
                     End-If;
                  End-For;
               End-If;
            End-For;
         End-If;
      End-If;
   End-If;
   
End-Function;


/* ----------------------------------------------------------- */
/* Function: DeleteDeceasedDeps                                */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Deletes deceased dependent/beneficiaries from the        */
/*    Dep/Ben grid if they have no pre-entered allocations.    */
/*    For non-Dependent plans, if the deceased beneficiary     */
/*    has a current or new allocation, the new allocation      */
/*    is zeroed and the enterable allocation fields are        */
/*    disabled.                                                */
/*    For Dependent plans, deceased dependents are deleted     */
/*    from the grid, even if they have current coverage.       */
/* ----------------------------------------------------------- */
Function DeleteDeceasedDeps();
   For &I = &DEPBENGrid.ActiveRowCount To 1 Step - 1
      If DepBenDeceased(&I) Then
         If &DependentPlan = "Y" Or
               (None(&DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT.Value) And
                  None(&DEPBENGrid(&I).W3EBENR_DEP_WRK.FLAT_AMOUNT1.Value) And
                  None(&DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT.Value) And
                  None(&DEPBENGrid(&I).W3EBENR_DEP_WRK.BENEF_PCT1.Value)) Then
            DeleteRow(Scroll.W3EBENR_DEP_VW0, &I);
            &DepBenCount = &DepBenCount - 1;
         Else
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = 0;
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = 0;
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Enabled = False;
            &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Enabled = False;
         End-If;
         
      End-If;
   End-For;
   
   If &DEPBENGrid.ActiveRowCount = 1 Then
      /* This might be a dummy row. If so, blank out default data, and  */
      /* disable the data entry fields.                                 */
      If None(&DEPBENGrid(1).W3EBENR_DEP_WRK.GetField(Field.NAME).Value) Then
         &DEPBENGrid(1).W3EBENR_DEP_WRK.RELATIONSHIP.Value = " ";
         &DEPBENGrid(1).W3EBENR_DEP_WRK.SELECTED.Enabled = False;
         &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT.Enabled = False;
         &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT1.Enabled = False;
      Else
         If &DEPBENGrid(1).W3EBENR_DEP_WRK.DEPBEN_RIDER_FLG.Value <> "Y" Then
            &DEPBENGrid(1).W3EBENR_DEP_WRK.SELECTED.Enabled = True;
            &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT.Enabled = True;
            &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT1.Enabled = True;
         End-If;
      End-If;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: ClearPrimaryAllocations                           */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Clears the Primary Allocations, and sets the sum to zero.*/
/*    Called from Alloc_Mthd_xxx Field Change.                 */
/* ----------------------------------------------------------- */
Function ClearPrimaryAllocations()
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value = 0;
   End-For;
   W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM = 0;
End-Function;

/* ----------------------------------------------------------- */
/* Function: ClearSecondaryAllocations                         */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Clears the Secondary Allocations, and sets the sum to    */
/*    zero.                                                    */
/*    Called from Alloc_Mthd_xxx Field Change.                 */
/* ----------------------------------------------------------- */
Function ClearSecondaryAllocations()
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value = 0;
   End-For;
   W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 = 0;
End-Function;

/* ----------------------------------------------------------- */
/* Function: SetDepBenRider                                    */
/* Returns: RIDER_TYPE (if Rider in Effect), else Blank        */
/* Input Parameters: Pointer to Dependent_Benef Row in         */
/*                   &W3EBGBLRS_DEP_BEN                        */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Searches the Dependent/Beneficiary Rider information     */
/*    to see if there is a rider in effect for this plan type  */
/*    and effective date.                                      */
/* ----------------------------------------------------------- */
Function SetDepBenRider(&DEPBENRow) Returns string;
   &Rider = " ";
   &RIDERRowSet = GetSpecificRowSet(&DEPBENRow, "DEPBEN_RIDER");
   For &J = 1 To &RIDERRowSet.ActiveRowCount
      &RiderRow = &RIDERRowSet.GetRow(&J);
      &RiderRec = &RiderRow.GetRecord(Record.DEPBEN_RIDER);
      If &RiderRec.PLAN_TYPE.Value = &PLAN_TYPE And
            &RiderRec.EFF_STATUS.Value = "A" And
            &RiderRec.START_DT.Value <= &EVENT_DT And
            (None(&RiderRec.END_DT.Value) Or
               &RiderRec.END_DT.Value > &EVENT_DT) Then
         &Rider = &RiderRec.RIDER_TYPE.Value;
      End-If;
   End-For;
   Return &Rider;
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildCourtOrdersText                              */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Scans the Dep/Ben Grid to build the Court Order text     */
/*    for each Dependent/Beneficiary with a Court Order.       */
/* ----------------------------------------------------------- */
Function BuildCourtOrdersText();
   &Text = "";
   
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      &LongText = "";
      &DEPBENGridRow = &DEPBENGrid.GetRow(&I);
      &LongName = &DEPBENGridRow.GetRecord(Record.W3EBENR_DEP_WRK).GetField(Field.NAME).Value;
      /*
      &LongName = &LongName | " " | &DEPBENGridRow.DEPENDENT_BENEF.MIDDLE_NAME.Value;
      &LongName = &LongName | " " | &DEPBENGridRow.DEPENDENT_BENEF.LAST_NAME.Value;
*/
      Evaluate &DEPBENGridRow.W3EBENR_DEP_WRK.RIDER_TYPE.Value
      When = "C"
         /* "A court order is on file governing the rights of... " */
         If &DependentPlan = "Y" Then
            Get_Text("DEPBEN_COURT_DEP1", &PLAN_TYPE, &LongText, &LongName, " ", " ", " ", " ");
         Else
            Get_Text("DEPBEN_COURT_BEN1", &PLAN_TYPE, &LongText, &LongName, " ", " ", " ", " ");
         End-If;
         Break;
      When = "S"
         /* &LongText = "A waiver is on file, waiving the rights of "; */
         /* &LongText = &LongText | &LongName | " as a beneficiary of this plan."; */
         Break;
      End-Evaluate;
      If All(&LongText) Then
         AppendText(&Text, &LongText, &HTMLNewLine);
      End-If;
   End-For;
   /* Add the Court Order summary line "Can't change current coverage/allocations..." */
   If &SelectedOptionRow > 0 Then
      If All(&Text) Then
         If &DependentPlan = "Y" Then
            /* "Can't change current coverage... " */
            Get_Text("DEPBEN_COURT_SUM2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            AppendText(&Text, &LongText, &HTMLNewLine);
         Else
            /* "Can't change current allocation..." */
            Get_Text("DEPBEN_COURT_SUM1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            AppendText(&Text, &LongText, &HTMLNewLine);
         End-If;
      End-If;
   End-If;
   W3EB_ENR_LBL.INFO_COURT_ORD1 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
End-Function;

/* ----------------------------------------------------------- */
/* Function: InitDepBenExcess                                  */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Initializes the Beneficiary designated to receive excess */
/*    proceeds. Applies to either Primary or Secondary (but    */
/*    not both), and applies only to the Flat Amount method of */
/*    allocation.                                              */
/*    Looks for the current "Excess" Beneficiary. If none      */
/*    found, defaults to the first beneficiary in the grid.    */
/* ----------------------------------------------------------- */
Function InitDepBenExcess();
   /* First, Initialize to NULL */
   /* Set to the one in the grid marked as Excess = "Y" */
   /* If none marked, then default to first one in the Grid */
   W3EB_ENR_L0_WRK.DEPENDENT_BENEF = "";
   For &I = 1 To &DEPBENGrid.ActiveRowCount
      If &DEPBENGrid(&I).W3EBENR_DEP_WRK.EXCESS.Value = "Y" Then
         If None(&DEPBENGrid(1).W3EBENR_DEP_WRK.DT_OF_DEATH.Value) Then
            W3EB_ENR_L0_WRK.DEPENDENT_BENEF = &DEPBENGrid(&I).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value;
         End-If;
         Break;
      End-If;
   End-For;
   If None(W3EB_ENR_L0_WRK.DEPENDENT_BENEF) And
         All(&DEPBENGrid(1).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value) And
         None(&DEPBENGrid(1).W3EBENR_DEP_WRK.DT_OF_DEATH.Value) Then
      W3EB_ENR_L0_WRK.DEPENDENT_BENEF = &DEPBENGrid(1).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value;
   End-If;
   
End-Function;


/* ----------------------------------------------------------- */
/* Function: InsertDepBenGridRow                               */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Inserts a row from the Global Rowset of Dependent/Benefs */
/*    into the Dep/Ben Grid.                                   */
/*    Also - Sets the Court Order type in the grid row if the  */
/*    Dep/Ben has an active court order for the plan type.     */
/* ----------------------------------------------------------- */
Function InsertDepBenGridRow(&DepBenCount, &GBLDepBenRec, &DepBenId);
   &DEPBENGridRec = &DEPBENGrid(&DepBenCount).GetRecord(Record.W3EBENR_DEP_VW0);
   &DEPBENGridWorkRec = &DEPBENGrid(&DepBenCount).GetRecord(Record.W3EBENR_DEP_WRK);
   &DepBenId = &GBLDepBenRec.DEPENDENT_BENEF.Value;
   &DEPBENGridRec.DEPENDENT_BENEF.Value = &DepBenId;
   &DEPBENGridWorkRec.RELATIONSHIP.Value = &GBLDepBenRec.RELATIONSHIP.Value;
   &DEPBENGridWorkRec.DEPBEN_RIDER_FLG.Value = &GBLDepBenRec.DEPBEN_RIDER_FLG.Value;
   &DEPBENGridWorkRec.FLAT_AMOUNT.Value = 0;
   &DEPBENGridWorkRec.BENEF_PCT.Value = 0;
   &DEPBENGridWorkRec.SELECTED.Value = "N";
   /* Must use GetField() because "Name" is also a property */
   &DEPBENGridWorkRec.GetField(Field.NAME).Value = &GBLDepBenRec.GetField(Field.NAME).Value;
   
   &DEPBENGridWorkRec.DT_OF_DEATH.Value = &GBLDepBenRec.DT_OF_DEATH.Value;
   If &GBLDepBenRec.DEPBEN_RIDER_FLG.Value = "Y" Then
      &DEPBENGrid(&DepBenCount).W3EBENR_DEP_WRK.RIDER_TYPE.Value = SetDepBenRider(&GBLDepBenRow);
      If &DEPBENGrid(&DepBenCount).W3EBENR_DEP_WRK.RIDER_TYPE.Value = "C" Then
         &RidersExist = "Y";
         &CourtOrdersExist = "Y";
      End-If;
      If &DEPBENGrid(&DepBenCount).W3EBENR_DEP_WRK.RIDER_TYPE.Value = "S" Then
         &RidersExist = "Y";
         &SpWaiverExists = "Y";
      End-If;
      
   End-If;
End-Function;


/* ----------------------------------------------------------- */
/* Function: LoadDepBenGrid                                    */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Populates the Dependent/Beneficiary Grid                 */
/* ----------------------------------------------------------- */
Function LoadDepBenGrid();
   &DepBenCount = 0;
   
   RebuildDepBen(); /* 89 Rebuild just in case the depben global rs  has changed*/
   &DEPBENGrid = GetLevel0()(1).GetRowset(Scroll.W3EBENR_DEP_VW0);
   ScrollFlush(Scroll.W3EBENR_DEP_VW0);
   
   /* Load the appropriate individuals from DEPENDENT_BENEF table */
   For &I = 1 To &W3EBGBLRS_DEP_BEN.ActiveRowCount
      &LoadDep = "N";
      &GBLDepBenRow = &W3EBGBLRS_DEP_BEN(&I);
      &GBLDepBenRec = &GBLDepBenRow.GetRecord(Record.DEPENDENT_BENEF);
      If &DependentPlan = "Y" Then
         If (&GBLDepBenRec.DEP_BENEF_TYPE.Value = "D" Or
               &GBLDepBenRec.DEP_BENEF_TYPE.Value = "O") Then
            &LoadDep = "Y";
         End-If;
      Else
         If (&GBLDepBenRec.DEP_BENEF_TYPE.Value = "B" Or
               &GBLDepBenRec.DEP_BENEF_TYPE.Value = "O") Then
            &LoadDep = "Y";
         End-If;
      End-If;
      
      If &LoadDep = "Y" Then
         &DepBenCount = &DepBenCount + 1;
         If &DepBenCount > 1 Then
            InsertRow(Scroll.W3EBENR_DEP_VW0, &DepBenCount - 1);
         End-If;
         InsertDepBenGridRow(&DepBenCount, &GBLDepBenRec, &DepBenId);
      End-If;
   End-For;
   
   ClearAllocations();
   UpdateAllocations();
   DeleteDeceasedDeps();
   InitDepBenExcess();
   SetPctOrFlatAmount();
   CollapseDepBenGrid();
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: RefreshDepBenGrid                                     */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function is called after the user returns from the  */
/*    Add/Review Dependents/Beneficiaries page.                */
/*    Any new Individuals added through this page are added to */
/*    the Dep/Ben grid. In addition, if individuals are no     */
/*    longer "eligible" for the plan type, they are deleted    */
/*    from the grid if they do not have an active court order  */
/*    in effect for the current plan type.                     */
/* ----------------------------------------------------------- */
Function RefreshDepBenGrid();
   
   W3EB_ENR_L0_WRK.EMPLID = &W3EBGBLREC_WORK.EMPLID.Value;
   
   /* NOTE: The following code is to be used in the future. This code allows   */
   /*       us to perform a DoModalComponent to the Dependent/Beneficiary page */
   /*       without starting up a new browser session. Implementation of the   */
   /*       below code is pending resolution of TPRD T-DDRESS-8W2DR.           */
   /*       To implement this, perform the following steps:                    */
   /*          (1) Uncomment the DoModalComponent() call below.                */
   /*          (2) Add a call to RefreshDepBenGrid() from Component PC:        */
   /*              Component.W3EB_ENR_2X.W3EB_ENR_L0_WRK.PB_ADD_DPND_DATA:FCh  */
   /*          (3) Remove the call to EnrAddReviewDepBen() from Component PC:  */
   /*              Component.W3EB_ENR_2X.W3EB_ENR_L0_WRK.PB_ADD_DPND_DATA:FCh  */
   /*          (4) Remove the following page  from the W3EB_ENR_2X Component:  */
   /*              W3EB_LEAVING_ENR                                            */
   
   /*
   DoModalComponent(MenuName.W3EB_MENU, BarName.DEPENDENT_BENEFICIARY, ItemName.W3EB_DEPBEN_DETAIL, Page.W3EB_DEPBEN_DETAIL, "U", Record.DERIVED_W3EB);
   */
   
   /* Rebuild the W3EBGBLRS_DEP_BEN Global Rowset so that any changes */
   /* just made are reflected.                                        */
   
   RebuildDepBen();
   
   /* Next, step through the updated W3EBGBLRS_DEP_BEN rowset  */
   /* and add any new Dep/Bens.                                */
   &DEPBENGrid = GetLevel0()(1).GetRowset(Scroll.W3EBENR_DEP_VW0);
   &DepBenCount = &DEPBENGrid.ActiveRowCount;
   If &DepBenCount = 1 And
         None(&DEPBENGrid(1).GetRecord(Record.W3EBENR_DEP_VW0).GetField(Field.DEPENDENT_BENEF).Value) Then
      /* First row is a dummy row */
      &DepBenCount = 0;
   End-If;
   
   
   For &I = 1 To &W3EBGBLRS_DEP_BEN.ActiveRowCount
      &LoadDep = "N";
      &GBLDepBenRow = &W3EBGBLRS_DEP_BEN(&I);
      &GBLDepBenRec = &GBLDepBenRow.GetRecord(Record.DEPENDENT_BENEF);
      If All(&GBLDepBenRec.DEPENDENT_BENEF.Value) Then
         /* Not a dummy row */
         If &DependentPlan = "Y" Then
            If (&GBLDepBenRec.DEP_BENEF_TYPE.Value = "D" Or
                  &GBLDepBenRec.DEP_BENEF_TYPE.Value = "O") Then
               &LoadDep = "Y";
            End-If;
         Else
            If (&GBLDepBenRec.DEP_BENEF_TYPE.Value = "B" Or
                  &GBLDepBenRec.DEP_BENEF_TYPE.Value = "O") Then
               &LoadDep = "Y";
            End-If;
         End-If;
         
         If &LoadDep = "Y" Then
            /* See if this Dep/Ben is already in the Grid */
            For &J = 1 To &DEPBENGrid.ActiveRowCount
               
               If &DEPBENGrid(&J).GetRecord(Record.W3EBENR_DEP_VW0).GetField(Field.DEPENDENT_BENEF).Value = &GBLDepBenRec.DEPENDENT_BENEF.Value Then
                  /*89 refresh the dep work record */
                  &DEPBENGridWorkRec = &DEPBENGrid(&J).GetRecord(Record.W3EBENR_DEP_WRK);
                  &DEPBENGridWorkRec.GetField(Field.NAME).Value = &GBLDepBenRec.GetField(Field.NAME).Value;
                  &DEPBENGridWorkRec.DT_OF_DEATH.Value = &GBLDepBenRec.DT_OF_DEATH.Value;
                  &DEPBENGridWorkRec.RELATIONSHIP.Value = &GBLDepBenRec.RELATIONSHIP.Value;
                  &DEPBENGridWorkRec.DEPBEN_RIDER_FLG.Value = &GBLDepBenRec.DEPBEN_RIDER_FLG.Value;
                  /* This Dep/Ben already exists in the Grid */
                  &LoadDep = "N";
                  Break;
               End-If;
            End-For;
         End-If;
         
         If &LoadDep = "Y" Then
            /* This is a new Dep/Ben - add it to the Grid */
            &DepBenCount = &DepBenCount + 1;
            If &DepBenCount > 1 Then
               InsertRow(Scroll.W3EBENR_DEP_VW0, &DepBenCount - 1);
            End-If;
            InsertDepBenGridRow(&DepBenCount, &GBLDepBenRec, &DepBenId);
            If Not DepBenDeceased(&DepBenCount) Then
               If &DepBenCount = 1 Then
                  /* Because this employee initially had no Dep/Bens, we     */
                  /* previously disabled the enterable fields on the "dummy" */
                  /* row of the grid when the grid was first populated. We   */
                  /* now must "undo" this.                                   */
                  &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT.Enabled = True;
                  &DEPBENGrid(1).DERIVED_W3EB.FLAT_AMOUNT1.Enabled = True;
                  &DEPBENGrid(1).W3EBENR_DEP_WRK.SELECTED.Enabled = True;
               End-If;
            End-If;
         End-If;
      End-If;
   End-For;
   
   
   /* Next, delete any Dep/Bens in the Grid without a corresponding row in */
   /* the Global Rowset. (But only if there is no Court Order).            */
   For &I = &DEPBENGrid.ActiveRowCount To 1 Step - 1
      If &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_WRK).GetField(Field.RIDER_TYPE).Value <> "C" Then
         /* No Court Order in Effect */
         &DeleteDep = "Y";
         For &J = 1 To &W3EBGBLRS_DEP_BEN.ActiveRowCount
            &GBLDepBenRow = &W3EBGBLRS_DEP_BEN(&J);
            &GBLDepBenRec = &GBLDepBenRow.GetRecord(Record.DEPENDENT_BENEF);
            If &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_VW0).GetField(Field.DEPENDENT_BENEF).Value = &GBLDepBenRec.DEPENDENT_BENEF.Value Then
               &DeleteDep = "N";
            End-If;
         End-For;
         If &DeleteDep = "Y" Then
            /* Delete this dependent from the Grid */
            DeleteRow(Scroll.W3EBENR_DEP_VW0, &I);
         End-If;
      End-If;
   End-For;
   DeleteDeceasedDeps();
   UpdateAllocationSum();
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildDepBenArea                                   */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Driver to build the Dependent/Beneficiary section of the */
/*    page.                                                    */
/* ----------------------------------------------------------- */
Function BuildDepBenArea();
   
   &RidersExist = "N";
   &CourtOrdersExist = "N";
   &SpWaiverExists = "N";
   &PreEnteredDeps = "N";
   &SpWaiverExists = "N";
   &Text = "";
   &PlanType = &PLAN_TYPE;
   
   &Enrolle_Type = LifePlanEnrolleeType(&PLAN_TYPE);
   If &Enrolle_Type = "2" Then
      &DependentPlan = "Y";
   Else
      &DependentPlan = "N";
   End-If;
   
   /* Set correct label for the "Add/Review" button */
   &DepBenPlanRow = GetPgmPlanRow(&PlanType);
   
   If &DependentPlan = "Y" Then
      If &DepBenPlanRow.W3EB_PGM_PLN_VW.ALLOW_ADD_DEPBEN.Value = "Y" Then
         Get_Text("ADD_REVIEW_DEP", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         &AllowAdd = True;
      Else
         Get_Text("REVIEW_DEP", &PlanType, &LongText, " ", " ", " ", " ", " ");
         &AllowAdd = False;
      End-If;
   Else
      If &DepBenPlanRow.W3EB_PGM_PLN_VW.ALLOW_ADD_DEPBEN.Value = "Y" Then
         Get_Text("ADD_REVIEW_BEN", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         &AllowAdd = True;
      Else
         Get_Text("REVIEW_BEN", &PlanType, &LongText, " ", " ", " ", " ", " ");
         &AllowAdd = False;
      End-If;
   End-If;
   W3EB_ENR_L0_WRK.PB_ADD_DPND_DATA.Label = &LongText;
   
   
   /* Setup the Allocation Method drop-down labels */
   Get_Text("ENTER_PRI_ALLOC", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI.Label = &LongText;
   Get_Text("ENTER_SEC_ALLOC", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC.Label = &LongText;
   
   /* Setup the Label for the Excess Beneficiary drop-down */
   Get_Text("EXCESS_ALLOCATED", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_L0_WRK.DEPENDENT_BENEF.Label = &LongText;
   
   /* Total is now translated from text table*/
   Get_Text("TOTAL_1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   GetLevel0()(1).W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM.Label = &LongText;
   /* end */
   /* Populate the Derived/Work Emplid Key Field on the page */
   W3EB_ENR_L0_WRK.EMPLID = &EMPLID;
   
   If &COLLECT_DEPBEN <> "N" Then
      LoadDepBenGrid();
      
      If &DependentPlan <> "Y" Then
         /* Designate Your Beneficiaries */
         Get_Text("DEPBEN_HDR_BEN1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         W3EB_ENR_LBL.GRPB_DEP_HDR1.Label = &LongText;
         /* "The list below displays all individuals who are eligible... " */
         If &DepBenPlanRow.W3EB_PGM_PLN_VW.ALLOW_ADD_DEPBEN.Value = "Y" Then
            Get_Text("DEPBEN_LIST_BEN1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         Else
            Get_Text("DEPBEN_LIST_BEN1NA", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         End-If;
         W3EB_ENR_LBL.INFO_DEP_HDR1 = WrapText(&LongText, "PAADDITIONALINSTRUCTIONS");
         /* "You may designate any of the following persons as Primary... " */
         Get_Text("DEPBEN_PRI_SEC1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
         /* "If you specify amounts..." */
         Get_Text("DEPBEN_PRI_SEC2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLParagraph);
         /* "If you specify percentages... " */
         Get_Text("DEPBEN_PRI_SEC3", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLParagraph);
      Else
         /* Designate Your Dependents */
         Get_Text("DEPBEN_HDR_DEP1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         W3EB_ENR_LBL.GRPB_DEP_HDR1.Label = &LongText;
         /* "The list below displays all individuals who are eligible... " */
         If &DepBenPlanRow.W3EB_PGM_PLN_VW.ALLOW_ADD_DEPBEN.Value = "Y" Then
            Get_Text("DEPBEN_LIST_DEP1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         Else
            Get_Text("DEPBEN_LIST_DEP1NA", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         End-If;
         W3EB_ENR_LBL.INFO_DEP_HDR1 = WrapText(&LongText, "PAADDITIONALINSTRUCTIONS");
         
         &Text = "";
         If &SelectedOptionRow > 0 Then
            If &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y" Then
               /* "The selected plan requires that you specify coverage for each... " */
               Get_Text("DEPBEN_DEP_LIFE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
               AppendText(&Text, &LongText, &HTMLNewLine);
               /* "Min / Max for each dependent..." */
               /* Not Implementing a Min/Max Validation for Dependent Coverage */
               /* Get_Text("DEPBEN_DEPLIFE1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " "); */
               /* AppendText(&Text, &LongText, &HTMLNewLine); */
            End-If;
         End-If;
      End-If;
      
      W3EB_ENR_LBL.INFO_DEP_HDR2 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
      
      /* Populate the Text, and UnHide the Court Orders */
      If &CourtOrdersExist = "Y" Then
         BuildCourtOrdersText();
         W3EB_ENR_LBL.GRPB_COURT_ORD1.Visible = True;
      End-If;
      
      /* Hide or UnHide the entire Dep/Ben Area */
      If &SelectedOptionRow > 0 Then
         If &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.OPTION_TYPE.Value = "O" Then
            W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = True;
         Else
            W3EB_ENR_LBL.GRPB_DEP_HDR1.Visible = False;
         End-If;
      End-If;
   End-If;
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: BuildRecapPage                                    */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This is the main driver for building the Recap Page      */
/*    after a successful Enrollment Page validation.           */
/*    This function is invoked by the Page Activate event for  */
/*    the Recap page.                                          */
/* ----------------------------------------------------------- */
Function BuildRecapPage();
   
   /* Hide the Header Restrictions */
   W3EB_ENR_LBL.GRPB_RESTRICTIONS.Visible = False;
   
   /* Get the "Relationship" Column Header */
   Get_Text("RELATIONSHIP", &PLAN_TYPE, &RelText, " ", " ", " ", " ", " ");
   
   /* Initialize GroupBoxes */
   Get_Text("RECAP_ELECT_HDR", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_RECAP_ELECT.Label = &LongText;
   Get_Text("RECAP_COST_HDR", &PLAN_TYPE, &LongText, &FreqTextCap, " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_RECAP_COST.Label = &LongText;
   /* Primary Beneficiary / Covered Dependents Header */
   If &DependentPlan <> "Y" Then
      Get_Text("RECAP_PRI_HDR", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   Else
      Get_Text("RECAP_DEP_HDR", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   End-If;
   W3EB_ENR_LBL.GRPB_RECAP_PRI.Label = &LongText;
   Get_Text("RECAP_SEC_HDR", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_RECAP_SEC.Label = &LongText;
   Get_Text("NOTES", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
   W3EB_ENR_LBL.GRPB_RECAP_MISC1.Label = &LongText;
   
   /* Set all GroupBoxes */
   W3EB_ENR_LBL.GRPB_RECAP_ELECT.Visible = True;
   W3EB_ENR_LBL.GRPB_RECAP_COST.Visible = True;
   W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = False;
   W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = True;
   
   &SumOfDepCoverage = "N";
   &EESpecifiedDepCvg = "N";
   &FlatDepCvg = "N";
   
   If None(&SelectedOptionRow) Then
      /* Yes/No style, "No" selected, and there is no Waive available */
      &Cost = 0;
      &Credits = 0;
      /* "You have declined coverage..." */
      Get_Text("RECAP_DECLINE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
      W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
      W3EB_ENR_LBL.INFO_RECAP2 = " ";
      W3EB_ENR_LBL.GRPB_RECAP_ELECT.Visible = True;
      W3EB_ENR_LBL.GRPB_RECAP_COST.Visible = False;
      W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = False;
      W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = False;
   Else
      
      &OPTNScrollRow = &OPTNScroll.GetRow(&SelectedOptionRow);
      &OPTNScrollRec = &OPTNScrollRow.GetRecord(Record.W3EB_PAROPTN_VW);
      &OPTNScrollWorkRec = &OPTNScrollRow.GetRecord(Record.W3EB_ENR_L1_WRK);
      
      If &DependentPlan = "Y" And
            &OPTNScrollRec.OPTION_TYPE.Value = "O" Then
         If &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y" Then
            &SumOfDepCoverage = "Y";
         Else
            If &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value = "2" Then
               &EESpecifiedDepCvg = "Y";
            Else
               &FlatDepCvg = "Y";
               &OptionCd = &OPTNScrollRec.OPTION_CD.Value;
               &ParOptnRow = GetParOptnRow(&PLAN_TYPE, &OptionCd);
               &BenefitPlan = &ParOptnRow.W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
               &PlanDefnRow = GetPlanDefnRow(&PLAN_TYPE, &BenefitPlan);
               REM: The page is currently expecting a numeric value, so we do not support the full descriptive text display - we must instead display the actual calculated coverage base;
               REM: &FormulaTxt = "";
               REM: &BN_FORMULA_ID_C = &PlanDefnRow.W3EB_2XPLNDF_VW.BN_FORMULA_ID.Value;
               REM: GetFormulaText(&BN_FORMULA_ID_C, &EVENT_DT, &FormulaTxt);
               REM: &DepCovgAmt = LTrim(&FormulaTxt, "$");
               &DepCovgAmt = &OPTNScrollRec.CALCULATED_BASE.Value;
               If &PlanDefnRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value <> "2" Then
                  &DepCovgAmt = RoundCoverage(&PlanDefnRow.W3EB_2XPLNDF_VW.FLAT_AMOUNT.Value, &SelectedOptionRow);
               End-If;
            End-If;
         End-If;
      End-If;
      
      /* Populate the Primary Beneficiary Grid */
      /* Dummy main record for this scroll is W3EBENR_DEP_VW1 */
      &PriBenGrid = GetLevel0()(1).GetRowset(Scroll.W3EBENR_DEP_VW1);
      &GridHandle = GetGrid(Panel.W3EB_ENR_2X_RECAP, "RECAP_PRI_GRID");
      ScrollFlush(Scroll.W3EBENR_DEP_VW1);
      &J = 0;
      If &OPTNScrollRec.OPTION_TYPE.Value = "O" Then
         
         For &I = 1 To &DepBenCount
            &DEPBENGridRec = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_VW0);
            &DEPBENGridWorkRec = &DEPBENGrid(&I).GetRecord(Record.DERIVED_W3EB);
            &DEPBENGridWorkRec2 = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_WRK);
            &Insert = "N";
            If &DependentPlan <> "Y" Then
               If All(&DEPBENGridWorkRec.FLAT_AMOUNT.Value) Then
                  &Insert = "Y";
               End-If;
            Else
               If &SumOfDepCoverage = "Y" Then
                  /* "Sum of Dependent Coverage" Plan */
                  If All(&DEPBENGridWorkRec.FLAT_AMOUNT.Value) Then
                     &Insert = "Y";
                  End-If;
               Else
                  If &DEPBENGridWorkRec2.SELECTED.Value = "Y" Then
                     &Insert = "Y";
                  End-If;
               End-If;
            End-If;
            
            If &Insert = "Y" Then
               /* Insert this beneficiary */
               &J = &J + 1;
               If &J > 1 Then
                  InsertRow(Scroll.W3EBENR_DEP_VW1, &J - 1);
               End-If;
               &PriBenGridRow = &PriBenGrid(&J);
               &PriBenGridRec = &PriBenGridRow.GetRecord(Record.W3EBENR_DEP_VW1);
               &PriBenGridWorkRec = &PriBenGrid(&J).GetRecord(Record.W3EBENR_DEP1_WK);
               &PriBenGridRec.DEPENDENT_BENEF.Value = &DEPBENGridRec.DEPENDENT_BENEF.Value;
               &PriBenGridWorkRec.RELATIONSHIP.Value = &DEPBENGridWorkRec2.RELATIONSHIP.Value;
               &PriBenGridWorkRec.GetField(Field.NAME).Value = &DEPBENGridWorkRec2.GetField(Field.NAME).Value;
               If &DependentPlan <> "Y" Then
                  If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
                     &PriBenGridWorkRec.BENEF_PCT.Value = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                     &GridHandle.FLAT_AMOUNT.Visible = False;
                     &GridHandle.BENEF_PCT.Visible = True;
                  Else
                     &PriBenGridWorkRec.FLAT_AMOUNT.Value = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                     &GridHandle.FLAT_AMOUNT.Visible = True;
                     &GridHandle.BENEF_PCT.Visible = False;
                  End-If;
               Else
                  /* Dependent Plan */
                  If &SumOfDepCoverage = "Y" Then
                     &PriBenGridWorkRec.FLAT_AMOUNT.Value = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                  Else
                     If &EESpecifiedDepCvg = "Y" Then
                        /* Employee-specified coverage amount */
                        &PriBenGridWorkRec.FLAT_AMOUNT.Value = W3EB_ENR_L0_WRK.FLAT_AMOUNT;
                     Else
                        /* Plan-defined flat amount coverage */
                        &PriBenGridWorkRec.FLAT_AMOUNT.Value = &DepCovgAmt;
                     End-If;
                  End-If;
               End-If;
            End-If;
         End-For;
      End-If;
      
      If &J = 0 Then
         /* This grid is blank */
         If &DependentPlan = "Y" Then
            W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = False;
         Else
            /* Show the "You have not designated any primary..." message */
            W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = True;
            W3EB_ENR_LBL.GRPB_RECAP_PRI1.Visible = True;
            W3EB_ENR_LBL.GRPB_RECAP_PRI2.Visible = False;
            Get_Text("RECAP_PRI_NONE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_RECAP_PRI.Value = WrapText(&LongText, "PSTEXT");
         End-If;
      Else
         W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = True;
         W3EB_ENR_LBL.GRPB_RECAP_PRI1.Visible = False;
         W3EB_ENR_LBL.GRPB_RECAP_PRI2.Visible = True;
         &GridHandle.RELATIONSHIP_TEXT.Label = &RelText;
         If &DependentPlan = "Y" Then
            &GridHandle.FLAT_AMOUNT.Visible = True;
            &GridHandle.BENEF_PCT.Visible = False;
         End-If;
      End-If;
      
      /* Populate the Secondary Beneficiary Grid if not a Dependent Plan */
      /* Dummy main record for this scroll is W3EBENR_DEP_VW2 */
      &SecBenGrid = GetLevel0()(1).GetRowset(Scroll.W3EBENR_DEP_VW2);
      &GridHandle = GetGrid(Panel.W3EB_ENR_2X_RECAP, "RECAP_SEC_GRID");
      ScrollFlush(Scroll.W3EBENR_DEP_VW2);
      If &DependentPlan <> "Y" And
            &OPTNScrollRec.OPTION_TYPE.Value = "O" Then
         &J = 0;
         For &I = 1 To &DepBenCount
            &DEPBENGridRec = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_VW0);
            &DEPBENGridWorkRec = &DEPBENGrid(&I).GetRecord(Record.DERIVED_W3EB);
            &DEPBENGridWorkRec2 = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_WRK);
            If All(&DEPBENGridWorkRec.FLAT_AMOUNT1.Value) Then
               /* Insert this beneficiary */
               &J = &J + 1;
               If &J > 1 Then
                  InsertRow(Scroll.W3EBENR_DEP_VW2, &J - 1);
               End-If;
               &SecBenGridRow = &SecBenGrid(&J);
               &SecBenGridRec = &SecBenGridRow.GetRecord(Record.W3EBENR_DEP_VW2);
               &SecBenGridWorkRec = &SecBenGrid(&J).GetRecord(Record.W3EBENR_DEP2_WK);
               &SecBenGridRec.DEPENDENT_BENEF.Value = &DEPBENGridRec.DEPENDENT_BENEF.Value;
               &SecBenGridWorkRec.RELATIONSHIP.Value = &DEPBENGridWorkRec2.RELATIONSHIP.Value;
               &SecBenGridWorkRec.GetField(Field.NAME).Value = &DEPBENGridWorkRec2.GetField(Field.NAME).Value;
               If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "P" Then
                  &SecBenGridWorkRec.BENEF_PCT.Value = &DEPBENGridWorkRec.FLAT_AMOUNT1.Value;
                  &GridHandle.FLAT_AMOUNT1.Visible = False;
                  &GridHandle.BENEF_PCT1.Visible = True;
               Else
                  &SecBenGridWorkRec.FLAT_AMOUNT.Value = &DEPBENGridWorkRec.FLAT_AMOUNT1.Value;
                  &GridHandle.FLAT_AMOUNT1.Visible = True;
                  &GridHandle.BENEF_PCT1.Visible = False;
               End-If;
            End-If;
         End-For;
         If &J = 0 Then
            /* This grid is blank                            */
            /* Show the "You have not designated any secondary..." message */
            W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = True;
            W3EB_ENR_LBL.GRPB_RECAP_SEC2.Visible = False;
            W3EB_ENR_LBL.GRPB_RECAP_SEC1.Visible = True;
            Get_Text("RECAP_SEC_NONE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_RECAP_SEC.Value = WrapText(&LongText, "PSTEXT");
         Else
            W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = True;
            &GridHandle.RELATIONSHIP_TEXT1.Label = &RelText;
            W3EB_ENR_LBL.GRPB_RECAP_SEC2.Visible = True;
            W3EB_ENR_LBL.GRPB_RECAP_SEC1.Visible = False;
         End-If;
      End-If;
      
      If &OPTNScrollRec.OPTION_TYPE.Value <> "O" Then
         /* Hide the Secondary Beneficiary area if this is a Waive */
         W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = False;
      End-If;
      
      If &DependentPlan = "Y" Then
         /* Hide the Secondary Beneficiary area */
         W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = False;
         /* Hide the % of Benefit, UnHide the Amount of Coverage */
         &GridHandle = GetGrid(Panel.W3EB_ENR_2X_RECAP, "RECAP_PRI_GRID");
         &GridHandle.FLAT_AMOUNT.Visible = True;
      End-If;
      
      If &COLLECT_DEPBEN <> "Y" Then
         /* Hide both of the Dependent/Beneficiary Areas */
         W3EB_ENR_LBL.GRPB_RECAP_PRI.Visible = False;
         W3EB_ENR_LBL.GRPB_RECAP_SEC.Visible = False;
      End-If;
      
      
      If &OPTNScrollRec.OPTION_TYPE.Value = "O" Then
         /* Coverage has been elected */
         If (&OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value = "1") Then
            &Descr = &OPTNScrollRow.W3EB_ENR_L1_WRK.DESCR60.Value;
            /* "You have chosen <plan-descr> coverage." */
            Get_Text("RECAP_ELECTION1", &PLAN_TYPE, &LongText, &Descr, " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
         Else
            If (&OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value = "2") Then
               If (&OPTNScrollRow.W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "N") Then
                  &Formatted_Amount = FormatAmount(W3EB_ENR_L0_WRK.FLAT_AMOUNT, "N", "Y");
                  &Descr = &OPTNScrollRow.W3EB_ENR_L1_WRK.DESCR60.Value;
                  /* "You have elected coverage in <plan> for <amount> " */
                  Get_Text("RECAP_ELECTION2", &PLAN_TYPE, &LongText, &Descr, &Formatted_Amount, " ", " ", " ");
                  W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
               Else
                  /* Sum-of-Dependent plans - header is same a normal plan. */
                  &Descr = &OPTNScrollRow.W3EB_ENR_L1_WRK.DESCR60.Value;
                  /* "You have chosen <plan-descr> coverage." */
                  Get_Text("RECAP_ELECTION1", &PLAN_TYPE, &LongText, &Descr, " ", " ", " ", " ");
                  W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
               End-If
            End-If
         End-If;
         
      Else
         /* A Waive has been elected */
         If &VisualMethod = "SCROLL" Then
            /* "You have WAIVED coverage..." */
            Get_Text("RECAP_WAIVE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
         End-If;
         If &VisualMethod = "Y/N" Then
            /* "You have declined coverage..." */
            Get_Text("RECAP_DECLINE", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            W3EB_ENR_LBL.INFO_RECAP1 = WrapText(&LongText, "PSTEXT");
         End-If;
      End-If;
      
      /* Build the cost area */
      /* ------------------- */
      Get_Text("FULL_COST", &PlanType, &LongText, " ", " ", " ", " ", " ");
      W3EB_ENR_L0_WRK.COST_AMOUNT.Label = &LongText;
      Get_Text("CREDIT_AMT", &PlanType, &LongText, " ", " ", " ", " ", " ");
      W3EB_ENR_L0_WRK.CREDIT_AMOUNT.Label = &LongText;
      Get_Text("YOUR_COST", &PlanType, &LongText, " ", " ", " ", " ", " ");
      W3EB_ENR_L0_WRK.COST_TOTAL.Label = &LongText;
      
      &LongText = "";
      &Text = "";
      &Cost = 0;
      &Credits = 0;
      &PlanTypeCredits = &TOT_CREDIT;
      W3EB_ENR_LBL.GRPB_RECAP_COST.Visible = True;
      If &SelectedOptionRow > 0 Then
         
         /* Calculate the COST and CREDIT here - both Plan and EE-Specified */
         
         If &OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value <> "2" Then
            /* If Plan-Specified coverage, BenAdmin has calculated Cost/Credit */
            If &SHOW_CREDIT = "Y" Then
               &Cost = &OPTNScrollWorkRec.Cost_Amount.Value;
            Else
               /* Cost_Amount in the scroll has been zeroed out. Use Total */
               &Cost = &OPTNScrollWorkRec.Cost_Total.Value;
            End-If;
            
            &Credits = &OPTNScrollWorkRec.Credit_Amount.Value;
            &Credits = &Credits + &PlanTypeCredits;
         Else
            /* EE-Specified coverage - Cost/Credits per &EERateUnit ($1,000)    */
            /* IMPORTANT: We assume that the customer is not using a Rate Unit  */
            /*            of "None" for EE-Specified coverage. That is, the     */
            /*            Cost/Credits are not a flat amount - they depend upon */
            /*            the amount of coverage. Therefore, we must calculate  */
            /*            the Cost and Credits.                                 */
            &Coverage_Amount = W3EB_ENR_L0_WRK.FLAT_AMOUNT;
            &Coverage_Units = Round(&Coverage_Amount / &EERateUnit, 0);
            If &SHOW_CREDIT = "Y" Then
               &Cost = &Coverage_Units * &OPTNScrollWorkRec.Cost_Amount.Value;
            Else
               /* Cost_Amount in the scroll has been zeroed out - use the Total */
               &Cost = &Coverage_Units * &OPTNScrollWorkRec.Cost_Total.Value;
            End-If;
            If None(&PreciseRate) Then
               &BenPln = &OPTNScrollRec.GetField(Field.BENEFIT_PLAN).Value;
               GetPreciseRate(&PLAN_TYPE, &BenPln, &PreciseRate, &PreciseUnit);
            End-If;
            &Cost = 0;
            If All(&PreciseRate, &PreciseUnit) Then
               &Cost = Round(&Coverage_Amount / &PreciseUnit, 0) * &PreciseRate;
            End-If;
            &Credits = &Coverage_Units * &OPTNScrollWorkRec.Credit_Amount.Value;
            &Credits = &Credits + &PlanTypeCredits;
         End-If;
         
         If &Cost = 0 Then
            If &SumOfDepCoverage = "Y" Then
               /* This is a "Sum of Dependent Coverage" Plan */
               /* Since BenAdmin will not calculate a premium (even a flat $1,000 of   */
               /* coverage), we have to punt                                           */
               /* "Your cost is based upon several factors, including the number of..." */
               Get_Text("RECAP_COST_SUM", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            Else
               /* "There is no cost for this coverage..." */
               Get_Text("RECAP_NO_COST", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            End-If;
            AppendText(&Text, &LongText, &HTMLNewLine);
            If &Credits > 0 Then
               &Formatted_Amount = FormatAmount(&Credits, "Y", "Y");
               Get_Text("RECAP_CREDIT", &PLAN_TYPE, &LongText, &Formatted_Amount, " ", " ", " ", " ");
               AppendText(&Text, &LongText, &HTMLNewLine);
               W3EB_ENR_L0_WRK.CREDIT_AMOUNT = &Credits;
            End-If;
         Else
            
            W3EB_ENR_L0_WRK.COST_AMOUNT = &Cost;
            W3EB_ENR_L0_WRK.CREDIT_AMOUNT = &Credits;
            
         End-If;
      Else
         /* If no option is selected, there can't be any cost */
         Get_Text("RECAP_NO_COST", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
      End-If;
      
      If All(&Text) Then
         /* Display the "no-cost" or the "we don't know the cost" message */
         W3EB_ENR_LBL.INFO_RECAP3 = WrapText(&Text, "PSTEXT");
         W3EB_ENR_LBL.INFO_RECAP3.Visible = True;
         /* Hide the cost breakdown */
         W3EB_ENR_LBL.GRPB_RECAP_COST1.Visible = False;
         Hide(W3EB_ENR_L0_WRK.COST_TOTAL);
      Else
         If W3EB_ENR_L0_WRK.CREDIT_AMOUNT > 0 Then
            W3EB_ENR_L0_WRK.CREDIT_AMOUNT = W3EB_ENR_L0_WRK.CREDIT_AMOUNT * - 1;
         End-If;
         W3EB_ENR_L0_WRK.COST_TOTAL = W3EB_ENR_L0_WRK.COST_AMOUNT + W3EB_ENR_L0_WRK.CREDIT_AMOUNT;
         /* Hide the Cost and Credit lines if we're not displaying Credits */
         If &SHOW_CREDIT = "N" Then
            W3EB_ENR_LBL.GRPB_RECAP_COST1.Visible = False;
         End-If;
         UnHide(W3EB_ENR_L0_WRK.COST_TOTAL);
         W3EB_ENR_LBL.INFO_RECAP3.Visible = False;
      End-If;
      
      /* Hide the entire cost area if this is a Waive, and there is no total cost */
      If &OPTNScrollRec.OPTION_TYPE.Value = "W" Then
         If W3EB_ENR_L0_WRK.COST_TOTAL = 0 Then
            W3EB_ENR_LBL.GRPB_RECAP_COST.Visible = False;
         End-If;
      End-If;
      
      /* Build the informational text at the bottom of the page */
      /* ------------------------------------------------------ */
      &LongText = "";
      &Text = "";
      
      /* Build "Proof Required" message if appropriate */
      If &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.PROOF_REQ_IND.Value = "Y" Then
         Get_Text("RECAP_EOI1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         AppendText(&Text, &LongText, &HTMLNewLine);
      Else
         
         If &OPTNScrollWorkRec.COVERAGE_TYPE.Value = "2" Then
            If &CvrgElect = "W" Then
               If W3EB_ENR_L0_WRK.FLAT_AMOUNT > &OPTNScrollWorkRec.WV_PROOF_START_FLT.Value Then
                  Get_Text("RECAP_EOI1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
                  AppendText(&Text, &LongText, &HTMLNewLine);
               End-If;
            Else
               If W3EB_ENR_L0_WRK.FLAT_AMOUNT >= &OPTNScrollWorkRec.PROOF_START_FLT.Value Then
                  Get_Text("RECAP_EOI1", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
                  AppendText(&Text, &LongText, &HTMLNewLine);
               End-If;
            End-If;
         End-If;
      End-If;
      
      /* Build message regarding Coverage calculated using Salary As Of Date */
      
      If &OPTNScrollWorkRec.COVERAGE_TYPE.Value = "1" And
            &OPTNScrollRec.OPTION_TYPE.Value = "O" And
            All(&OPTNScrollWorkRec.COVRG_AS_OF_CD.Value) Then
         
         If &OPTNScrollWorkRec.COVRG_AS_OF_CD.Value = "C" Or
               &OPTNScrollWorkRec.COVRG_AS_OF_CD.Value = "P" Then
            /* Coverage amount is "as of Check Date" */
            Get_Text("RECAP_CVG2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         Else
            If &OPTNScrollWorkRec.COVRG_AS_OF_CD.Value = "T" Then
               /* Coverage amount is "as of 99/99 This Year" */
               &Year = Substring(&EVENT_DT, 1, 4);
            Else
               /* Coverage amount is "as of 99/99 Last Year" */
               &Year = Substring(&EVENT_DT, 1, 4);
               &Year = &Year - 1;
            End-If;
            &TempMM = &OPTNScrollWorkRec.COVRG_AS_OF_MM.Value;
            &TempDD = &OPTNScrollWorkRec.COVRG_AS_OF_DD.Value;
            W3EB_ENR_L0_WRK.DATE_WRK = Date3(&Year, &TempMM, &TempDD);
            &AsOfDate = GetLevel0()(1).W3EB_ENR_L0_WRK.DATE_WRK.FormattedValue;
            Get_Text("RECAP_CVG1", &PLAN_TYPE, &LongText, &AsOfDate, " ", " ", " ", " ");
         End-If;
         AppendText(&Text, &LongText, &HTMLNewLine);
      End-If;
      
      /* Build message regarding Premium calculated using Salary As Of Date */
      
      If &OPTNScrollWorkRec.COVERAGE_TYPE.Value = "1" And
            &OPTNScrollRec.OPTION_TYPE.Value = "O" And
            All(&OPTNScrollWorkRec.PREM_AS_OF_CD.Value) Then
         
         If &OPTNScrollWorkRec.PREM_AS_OF_CD.Value = "C" Or
               &OPTNScrollWorkRec.PREM_AS_OF_CD.Value = "P" Then
            /* Coverage amount is "as of Check Date" */
            Get_Text("RECAP_PREM2", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
         Else
            If &OPTNScrollWorkRec.PREM_AS_OF_CD.Value = "T" Then
               /* Coverage amount is "as of 99/99 This Year" */
               &Year = Substring(&EVENT_DT, 1, 4);
            Else
               /* Coverage amount is "as of 99/99 Last Year" */
               &Year = Substring(&EVENT_DT, 1, 4);
               &Year = &Year - 1;
            End-If;
            &TempMM = &OPTNScrollWorkRec.PREM_AS_OF_MM.Value;
            &TempDD = &OPTNScrollWorkRec.PREM_AS_OF_DD.Value;
            W3EB_ENR_L0_WRK.DATE_WRK = Date3(&Year, &TempMM, &TempDD);
            &AsOfDate = GetLevel0()(1).W3EB_ENR_L0_WRK.DATE_WRK.FormattedValue;
            
            /* Premium is fixed... */
            Get_Text("RECAP_PREM1", &PLAN_TYPE, &LongText, &AsOfDate, " ", " ", " ", " ");
         End-If;
         AppendText(&Text, &LongText, &HTMLNewLine);
      End-If;
      
      &BenefitPlan = &OPTNScrollRec.BENEFIT_PLAN.Value;
      &EVENT_DT_DT = &W3EBGBLREC_WORK.EVENT_DT.Value;
      GetRateRuleIDs(&PLAN_TYPE, &BenefitPlan, "", &RateTblId, &CalcRuleId);
      /* Instantiate global manager if not already done. */
      If (&W3EBGBLOBJ_RATEMGR = Null) Then
         &W3EBGBLOBJ_RATEMGR = create BN_RATES:RateAccessMgmt:BenefitRate();
      End-If;
      If (&W3EBGBLOBJ_RATEMGR.getRateRules(&RateTblId, &CalcRuleId, &EVENT_DT_DT)) Then
         /* Build message regarding Rate calculated using Age */
         If (&W3EBGBLOBJ_RATEMGR.RateTbl.UsesDemographics And
               (&W3EBGBLOBJ_RATEMGR.CalcRule.AgeAsOfCode = "C" Or
                  &W3EBGBLOBJ_RATEMGR.CalcRule.AgeAsOfCode = "P")) Then
            
            If (&W3EBGBLOBJ_RATEMGR.CalcRule.AgeSource = "E") Then
               /* Premium is based on YOUR age so deduction may change at next birthday. */
               Get_Text("RECAP_PREM3", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            Else
               /* Premium is based on age OF THE INDIVIDUAL COVERED PERSON so deduction may change at next birthday. */
               Get_Text("RECAP_PREM4", &PLAN_TYPE, &LongText, " ", " ", " ", " ", " ");
            End-If;
            AppendText(&Text, &LongText, &HTMLNewLine);
         End-If;
      End-If;
      
   End-If; /* SelectedOptionRow = 0?  (Yes/No style, "No" selected, no waive available */
   
   /* Insert the Boiler Plate messages */
   /* "Coverage begins..." */
   Get_Text("RECAP_CVG_EFFDT", &PLAN_TYPE, &LongText, &CoverageBeginDt, " ", " ", " ", " ");
   AppendText(&Text, &LongText, &HTMLNewLine);
   /* "Deductions and/or Credits begin..." */
   Get_Text("RECAP_DED_EFFDT", &PLAN_TYPE, &LongText, &DeductionBeginDt, " ", " ", " ", " ");
   AppendText(&Text, &LongText, " ");
   
   
   
   /* Display the Messages */
   W3EB_ENR_LBL.INFO_RECAP2 = WrapText(&Text, "PAADDITIONALINSTRUCTIONS");
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: JumpToInfo                                        */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This function calls the "Authoria/Provider" interface    */
/*    function to allow the user to jump to either Authoria    */
/*    content, or to the plan provider's web site to get       */
/*    further information regarding a benefit plan.            */
/*                                                             */
/*    This function is called from FieldChange peoplecode on   */
/*    the Benefit Plan button.                                 */
/* ----------------------------------------------------------- */
Function JumpToInfo();
   
   /* If Visual Method = "Scroll" Get the current row from the */
   /* scroll. Note that this may not be the same row as the    */
   /* "Selected Row".                                          */
   If &VisualMethod = "SCROLL" Then
      &CurrentRow = CurrentRowNumber(1);
   Else
      /* Scan through the scroll area looking for the one and  */
      /* only option.                                          */
      For &I = 1 To &OPTNScroll.ActiveRowCount
         If &OPTNScroll.GetRow(&I).GetRecord(Record.W3EB_PAROPTN_VW).GetField(Field.OPTION_TYPE).Value = "O" Then
            &CurrentRow = &I;
            Break;
         End-If;
      End-For;
   End-If;
   &Benefit_Plan = &OPTNScroll.GetRow(&CurrentRow).GetRecord(Record.W3EB_PAROPTN_VW).GetField(Field.BENEFIT_PLAN).Value;
   
   SaveGridAttribs();
   
   &DUMMY = EnrDisplayMerchantDescr(&PLAN_TYPE, &Benefit_Plan);
   
End-Function;

/* ----------------------------------------------------------- */
/* Function: StoreData                                         */
/* Returns: Nothing                                            */
/* Input Parameters:  None                                     */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This is the driver to update the Bas_Partic_xxx Global   */
/*    RowSet, and the Database.                                */
/*    This is done by building a RowSet for Bas_Partic_Dpnd,   */
/*    and another for Bas_Partic_Invt, and passing these to    */
/*    the common UpdateRS() function. Note that for 2X plans,  */
/*    the INVT rowset is just a dummy.                         */
/*    This is called from SavePreChange peoplecode on          */
/*    W3EB_ENR_PB_WRK, which is in turn invoked via a          */
/*    DoSaveNow() call from FieldChange PeopleCode on the OK   */
/*    button of the Recap page.                                */
/*    Note that we bypass this function if we have the special */
/*    case of a Yes/No style, "No" selected, and there is no   */
/*    Waive defined (&SelectedOptionRow = 0).                  */
/* ----------------------------------------------------------- */
Function StoreData();
   
   If All(&SelectedOptionRow) Then
      
      /* Create the two RowSets */
      If None(&RS1) Then
         &RS1 = CreateRowset(Record.BAS_PARTIC_DPND);
      End-If;
      If None(&RS2) Then
         &RS2 = CreateRowset(Record.BAS_PARTIC_INVT);
      End-If;
      /*
      &Life_ADD_Covrg = " ";
      */
      /* Setup the Bas_Partic_Plan entry fields */
      &Option_Cd = &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.OPTION_CD.Value;
      &Option_Type = &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.OPTION_TYPE.Value;
      If &Option_Type = "O" Then
         &Benefit_Plan = &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.BENEFIT_PLAN.Value;
         &PlanDefnRow = GetPlanDefnRow(&PLAN_TYPE, &Benefit_Plan);
         
         &Coverage_Type_SD = &PlanDefnRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value;
         &BN_Formula_ID_SD = &PlanDefnRow.W3EB_2XPLNDF_VW.BN_FORMULA_ID.Value;
         &Enrolle_Type_SD = &PlanDefnRow.W3EB_2XPLNDF_VW.ENROLLE_TYPE.Value;
         &Sum_Dep_Covg_SD = &PlanDefnRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value;
         
         If &PlanDefnRow.W3EB_2XPLNDF_VW.COVERAGE_TYPE.Value = "2" Then
            &Flat_Amount = W3EB_ENR_L0_WRK.FLAT_AMOUNT;
            
            &Coverage_Type_SD = "1"; /* Force to EE-SPecified Flat Amount */
         Else
            &Flat_Amount = 0;
         End-If;
         
         If &COLLECT_DEPBEN = "Y" Then
            /* Populate the Dependent RowSet */
            For &I = 1 To &DEPBENGrid.ActiveRowCount
               &DEPBENGridRec = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_VW0);
               &DEPBENGridWorkRec = &DEPBENGrid(&I).GetRecord(Record.DERIVED_W3EB);
               &DEPBENGridWorkRec2 = &DEPBENGrid(&I).GetRecord(Record.W3EBENR_DEP_WRK);
               &InsertRow = "N";
               &Excess = "N";
               &Contingent = "N";
               &Benef_Pct = 0;
               &Dep_Flat_Amount = 0;
               If &DependentPlan = "Y" Then
                  
                  If &PlanDefnRow.W3EB_2XPLNDF_VW.SUM_DEP_COVG.Value = "Y" Then
                     /* Sum of Dependent Coverage */
                     If All(&DEPBENGridWorkRec.FLAT_AMOUNT.Value) Then
                        &Dep_Flat_Amount = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                        &InsertRow = "Y";
                     End-If;
                  Else
                     If &DEPBENGridWorkRec2.SELECTED.Value = "Y" Then
                        &InsertRow = "Y";
                     End-If;
                  End-If;
               Else
                  If All(&DEPBENGridWorkRec.FLAT_AMOUNT.Value) Then
                     /* Primary */
                     &InsertRow = "Y";
                     If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
                        &Benef_Pct = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                     Else
                        &Dep_Flat_Amount = &DEPBENGridWorkRec.FLAT_AMOUNT.Value;
                        If W3EB_ENR_L0_WRK.DEPENDENT_BENEF = &DEPBENGridRec.DEPENDENT_BENEF.Value Then
                           &Excess = "Y";
                        End-If;
                     End-If;
                  End-If;
                  If All(&DEPBENGridWorkRec.FLAT_AMOUNT1.Value) Then
                     /* Secondary */
                     &InsertRow = "Y";
                     &Contingent = "Y";
                     If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "P" Then
                        &Benef_Pct = &DEPBENGridWorkRec.FLAT_AMOUNT1.Value;
                     Else
                        &Dep_Flat_Amount = &DEPBENGridWorkRec.FLAT_AMOUNT1.Value;
                        If W3EB_ENR_L0_WRK.DEPENDENT_BENEF = &DEPBENGridRec.DEPENDENT_BENEF.Value Then
                           &Excess = "Y";
                        End-If;
                     End-If;
                  End-If;
               End-If;
               If &InsertRow = "Y" Then
                  &RS1Row = &RS1.GetRow(1);
                  If All(&RS1Row.BAS_PARTIC_DPND.DEPENDENT_BENEF.Value) Then
                     /* This isn't the dummy row - insert a new row */
                     &RS1.InsertRow(1);
                     &RS1Row = &RS1.GetRow(2);
                  Else
                     &RS1Row = &RS1.GetRow(1);
                  End-If;
                  &RS1Rec = &RS1Row.GetRecord(Record.BAS_PARTIC_DPND);
                  &RS1Rec.DEPENDENT_BENEF.Value = &DEPBENGridRec.DEPENDENT_BENEF.Value;
                  &RS1Rec.BENEF_PCT.Value = &Benef_Pct;
                  &RS1Rec.FLAT_AMOUNT.Value = &Dep_Flat_Amount;
                  &RS1Rec.EXCESS.Value = &Excess;
                  &RS1Rec.CONTINGENT.Value = &Contingent;
               End-If;
               
            End-For;
         End-If;
      Else
         &Flat_Amount = 0;
      End-If;
      
      /* Just to be safe - flush the component buffers for anything that we don't */
      /* want to update by mistake. These page buffers should already be defined  */
      /* as no-auto-update, but "it shouldn't hurt" to do this too.               */
      ScrollFlush(Scroll.W3EB_PAROPTN_VW);
      ScrollFlush(Scroll.W3EBENR_DEP_VW0);
      ScrollFlush(Scroll.W3EBENR_DEP_VW1);
      ScrollFlush(Scroll.W3EBENR_DEP_VW2);
      
      
      
      UpdateRS(&PLAN_TYPE, &Option_Cd, " ", " ", &Flat_Amount, " ", 0, 0, " ", 0, 0, 0, 0, 0, 0, 0, 0, &RS1, &RS2);
   End-If;
End-Function;


/* ----------------------------------------------------------- */
/* Function: ValidatePage                                      */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    Logic to perform all page-level validations for the      */
/*    current plan type.                                       */
/*    ( ) Election made, if "Election Required".               */
/*    ( ) Coverage amount specified (if required).             */
/*    ( ) Specified Coverage amount is within plan limits.     */
/*    ( ) At least one beneficiary has been assigned.          */
/*    ( ) At least one dependent has been assigned a coverage  */
/*        amount if this is a dependent plan.                  */
/*    ( ) Beneficiary Allocations sum up properly.             */
/*    ( ) Flat Amount beneficiary allocations total close to   */
/*        the value of the benefit.                            */
/*    ( ) An "Excess" Beneficiary has been designated.         */
/*    ( ) An "Excess" Beneficiary cannot have a Primary        */
/*        allocation expressed as a percent.                   */
/*    ( ) Minimum Spousal Allocation requirement (if any)      */
/*        has been met.                                        */
/*    ( ) Allocation has not been carried forward to a         */
/*        deceased beneficiary.                                */
/*    ( ) Employee cannot Waive/Drop coverage when there is    */
/*        a court-ordered in effect for a Dep/Ben.             */
/*                                                             */
/*    If the page passes validation, we transfer to the        */
/*    recap (confirmation) page.                               */
/* ----------------------------------------------------------- */
Function ValidatePage();
   
   &OPTNErrorText = "";
   &DEPBENErrorText = "";
   &Coverage = "N"; /* Has the employee elected coverage? */
   
   /* Clear any existing errors, and hide the Error Display Areas */
   ClearAllErrors();
   
   If &SelectedOptionRow > 0 Then
      &OPTNScrollRow = &OPTNScroll.GetRow(&SelectedOptionRow);
      If &OPTNScrollRow.W3EB_PAROPTN_VW.OPTION_TYPE.Value = "O" Then
         &Coverage = "Y";
         &OPTNScrollWorkRec = &OPTNScrollRow.GetRecord(Record.W3EB_ENR_L1_WRK);
      End-If;
   Else
      &OPTNScrollRow = Null;
      &OPTNScrollWorkRec = Null;
   End-If;
   
   /* Validate "Election Required" */
   If &ElectRequired = "Y" Then
      If (&VisualMethod = "SCROLL" And
            None(&SelectedOptionRow)) Or
            (&VisualMethod = "Y/N" And
               None(W3EB_ENR_L0_WRK.SELECTED)) Then
         /* "A selection is required for this type of benefit." */
         &LongText = MsgGetExplainText(4001, 2, "Message Not Found");
         AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
         &OPTNErrorsExist = "Y";
      End-If;
   Else
      If (&VisualMethod = "SCROLL" And
            None(&SelectedOptionRow)) Or
            (&VisualMethod = "Y/N" And
               None(W3EB_ENR_L0_WRK.SELECTED)) Then
         /* "There is no election to store (you haven't selected an option). */
         &LongText = MsgGetExplainText(4001, 3, "Message Not Found");
         AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
         &OPTNErrorsExist = "Y";
      End-If;
   End-If;
   
   /* Validate that a Coverage Amount has been entered for an EE-Specified plan, */
   If &SelectedOptionRow > 0 Then
      
      If (&OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value = "2") And
            (&OPTNScrollRow.W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value <> "Y") Then
         If None(W3EB_ENR_L0_WRK.FLAT_AMOUNT) Then
            /* "You must enter a coverage amount." */
            &LongText = MsgGetExplainText(4001, 4, "Message Not Found");
            AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
            &OPTNErrorsExist = "Y";
         Else
            /* Apply Rounding Rules to the Elected Amount */
            W3EB_ENR_L0_WRK.FLAT_AMOUNT = RoundCoverage(W3EB_ENR_L0_WRK.FLAT_AMOUNT, &SelectedOptionRow);
            
            /* Check Min/Max */
            &Min = &OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_MINIMUM.Value;
            &Max = &OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_MAXIMUM.Value;
            If W3EB_ENR_L0_WRK.FLAT_AMOUNT < &Min Then
               If All(&OPTNErrorText) Then
                  &OPTNErrorText = &OPTNErrorText | &HTMLParagraph;
               End-If;
               /* "The coverage amount you entered is less than the minimum..." */
               &Formatted_Amount = FormatAmount(&Min, "N", "Y");
               &LongText = MsgGetExplainText(4001, 5, "Message Not Found", &Formatted_Amount);
               AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
               &OPTNErrorsExist = "Y";
            End-If;
            If W3EB_ENR_L0_WRK.FLAT_AMOUNT > &Max And
                  All(&Max) Then
               If All(&OPTNErrorText) Then
                  &OPTNErrorText = &OPTNErrorText | &HTMLParagraph;
               End-If;
               /* "The coverage amount you entered is more than the max allowable" */
               &Formatted_Amount = FormatAmount(&Max, "N", "Y");
               &LongText = MsgGetExplainText(4001, 6, "Message Not Found", &Formatted_Amount);
               AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
               &OPTNErrorsExist = "Y";
            End-If;
         End-If;
      End-If;
   End-If;
   
   /* Validate that for a non-Dependent plan, at least one primary */
   /* beneficiary has been designated.                             */
   If &DependentPlan <> "Y" Then
      If &COLLECT_DEPBEN <> "N" And
            &IgnoreDepBenEdit <> "Y" And
            &Coverage = "Y" Then
         &TempError = "Y";
         For &I = 1 To &DEPBENGrid.ActiveRowCount
            If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
               &TempError = "N";
               Break;
            End-If;
         End-For;
         If &TempError = "Y" Then
            /* "You must specify at least one primary beneficiary." */
            &LongText = MsgGetExplainText(4001, 7, "Message Not Found");
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
   End-If;
   
   /* Validate that for a Dependent plan, at least one dependent is covered. */
   If &DependentPlan = "Y" Then
      If &COLLECT_DEPBEN <> "N" And
            &IgnoreDepBenEdit <> "Y" And
            &Coverage = "Y" Then
         &TempError = "Y";
         &SumOfDepCoverage = "N";
         For &I = 1 To &DEPBENGrid.ActiveRowCount
            
            If &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.SUM_DEP_COVG.Value = "Y" Then
               &SumOfDepCoverage = "Y";
               If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
                  &TempError = "N";
                  Break;
               End-If;
            Else
               If &DEPBENGrid(&I).W3EBENR_DEP_WRK.SELECTED.Value = "Y" Then
                  &TempError = "N";
                  Break;
               End-If;
            End-If;
         End-For;
         If &TempError = "Y" Then
            /* "You must cover at least one dependent." */
            If &SumOfDepCoverage = "Y" Then
               &LongText = MsgGetExplainText(4001, 9, "Message Not Found");
            Else
               &LongText = MsgGetExplainText(4001, 8, "Message Not Found");
            End-If;
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
   End-If;
   
   
   /* Validate that the Beneficiary Allocations add up properly */
   If &COLLECT_DEPBEN <> "N" And
         &DependentPlan = "N" And
         &Coverage = "Y" Then
      UpdateAllocationSum();
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
         If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM <> 100 Then
            /* "The Primary Allocations you've entered do not total 100%." */
            &FieldLabel = GetLevel0()(1).W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI.Label;
            &LongText = MsgGetExplainText(4001, 10, "Message Not Found", &FieldLabel);
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" Then
         If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM = 0 Then
            /* "You have not entered any Flat Amounts for your Primary... " */
            &FieldLabel = GetLevel0()(1).W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI.Label;
            &LongText = MsgGetExplainText(4001, 12, "Message Not Found", &FieldLabel);
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "P" Then
         If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 <> 100 And
               W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 <> 0 Then
            /* "The Secondary Allocations you've entered do not total 100%. " */
            &FieldLabel = GetLevel0()(1).W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC.Label;
            &LongText = MsgGetExplainText(4001, 11, "Message Not Found", &FieldLabel);
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
   End-If;
   
   /* Validate the sum of flat amount validations against the value of the  */
   /* benefit. The total must be within 10% of the benefit total. If the total */
   /* is near 100, then the user is probably trying to enter percentages.   */
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &Coverage = "Y" Then
      If &SelectedOptionRow > 0 Then
         If All(&OPTNScrollRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value) Then
            /* We know the value of the benefit */
            &BenefitValueRange = 0.10;
            
            If &OPTNScrollRow.W3EB_ENR_L1_WRK.COVERAGE_TYPE.Value = "2" Then
               &BenefitValue = W3EB_ENR_L0_WRK.FLAT_AMOUNT;
            Else
               &BenefitValue = &OPTNScrollRow.W3EB_PAROPTN_VW.CALCULATED_BASE.Value;
            End-If;
            &Formatted_Amount = FormatAmount(&BenefitValue, "N", "Y");
            &BenefitValueMin = (1 - &BenefitValueRange) * &BenefitValue;
            &BenefitValueMax = (1 + &BenefitValueRange) * &BenefitValue;
            If (W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" And
                  W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM > 0) Then
               /* We have a Flat Amount Primary Allcoation */
               If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM = 100 Then
                  /* "It appears that you're allocating by percentages..." */
                  &LongText = MsgGetExplainText(4001, 41, "Message Not Found", &Formatted_Amount);
                  AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
                  &DEPBENErrorsExist = "Y";
               Else
                  If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM < &BenefitValueMin Or
                        W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM > &BenefitValueMax Then
                     /* "The total of your allocations do not closely..." */
                     &LongText = MsgGetExplainText(4001, 43, "Message Not Found", &Formatted_Amount);
                     AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
                     &DEPBENErrorsExist = "Y";
                  End-If;
               End-If;
            End-If;
            If (W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F" And
                  W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 > 0) Then
               /* We have a Flat Amount Secondary Allocation */
               If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 = 100 Then
                  /* "It appears that you're allocating by percentages..." */
                  &LongText = MsgGetExplainText(4001, 42, "Message Not Found", &Formatted_Amount);
                  AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
                  &DEPBENErrorsExist = "Y";
               Else
                  If W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 < &BenefitValueMin Or
                        W3EB_ENR_L0_WRK.FLAT_AMOUNT_SUM1 > &BenefitValueMax Then
                     /* "The total of your allocations do not closely..." */
                     &LongText = MsgGetExplainText(4001, 44, "Message Not Found", &Formatted_Amount);
                     AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
                     &DEPBENErrorsExist = "Y";
                  End-If;
               End-If;
            End-If;
         End-If;
      End-If;
   End-If;
   
   /* Validate that an "Excess" beneficiary has been designated for Flat Amounts */
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &Coverage = "Y" Then
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" Or
            W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F" Then
         If None(W3EB_ENR_L0_WRK.DEPENDENT_BENEF) Then
            /* You must specify a beneficiary to receive any excess..." */
            &FieldLabel = GetLevel0()(1).W3EB_ENR_L0_WRK.DEPENDENT_BENEF.Label;
            &LongText = MsgGetExplainText(4001, 13, "Message Not Found", &FieldLabel);
            AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If;
   End-If;
   
   /* Validate that an Excess beneficiary does not have a Primary allocation   */
   /* expressed as a percent. (This would imply that the excess applies to the */
   /* secondary allocations, in which case the primary beneficiaries would be  */
   /* deceased).                                                               */
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &Coverage = "Y" Then
      If W3EB_ENR_L0_WRK.ALLOC_MTHD_SEC = "F" And
            W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
         If All(W3EB_ENR_L0_WRK.DEPENDENT_BENEF) Then
            For &I = 1 To &DEPBENGrid.ActiveRowCount
               If &DEPBENGrid(&I).W3EBENR_DEP_VW0.DEPENDENT_BENEF.Value = W3EB_ENR_L0_WRK.DEPENDENT_BENEF Then
                  If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
                     &LongText = MsgGetExplainText(4001, 47, "Message Not Found");
                     AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
                     &DEPBENErrorsExist = "Y";
                  End-If;
               End-If;
            End-For;
         End-If;
      End-If;
   End-If;
   
   /* Validate that Minimum Spousal/Beneficiary Allocation has been met */
   /* Do not validate if there is a court-ordered flat amount allocation */
   &CourtOrderFlatAmt = "N";
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &CourtOrderExists = "Y" And
         W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "F" And
         &Coverage = "Y" Then
      /* See if there is a beneficiary with a court-ordered flat amount allocation */
      For &I = 1 To &DEPBENGrid.ActiveRowCount
         If &DEPBENGrid(&I).W3EBENR_DEP_WRK.DEPBEN_RIDER_FLG.Value = "Y" And
               All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
            &CourtOrderFlatAmt = "Y";
            Break;
         End-If;
      End-For;
   End-If;
   
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &CourtOrderFlatAmt = "N" And
         &Coverage = "Y" Then
      &SpouseError = "N";
      &MinSpouseAlloc = &OPTNScroll(&SelectedOptionRow).W3EB_ENR_L1_WRK.MIN_BENEFIC_ALLOC.Value;
      If All(&MinSpouseAlloc) Then
         /* Minimum Spousal Allocation Applies to this plan */
         For &I = 1 To &DEPBENGrid.ActiveRowCount
            /* The Dependent is not Deceased */
            If None(&DEPBENGrid(&I).W3EBENR_DEP_WRK.DT_OF_DEATH.Value) Then
               /* Locate the Spouse (if no spouse - no validation required */
               If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RELATIONSHIP.Value = "SP" Or
                     &DEPBENGrid(&I).W3EBENR_DEP_WRK.RELATIONSHIP.Value = "SS" Then
                  /* The employee has a spouse - see if the have a waiver */
                  If &DEPBENGrid(&I).W3EBENR_DEP_WRK.RIDER_TYPE.Value <> "S" Then
                     /* No spousal waiver on file - validation is required */
                     If None(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Then
                        /* Spouse has no primary allocation */
                        &SpouseError = "Y";
                     Else
                        If W3EB_ENR_L0_WRK.ALLOC_MTHD_PRI = "P" Then
                           /* Allocation expressed as a percent */
                           If &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value < &MinSpouseAlloc Then
                              &SpouseError = "Y";
                           End-If;
                        Else
                           /* Allocation expressed as a Flat Amount */
                           /* Calculate the plan's coverage amount */
                           &OptionCd = &OPTNScroll(&SelectedOptionRow).W3EB_PAROPTN_VW.OPTION_CD.Value;
                           &PlanAmount = Calculate2xCoverage(&PLAN_TYPE, &OptionCd, W3EB_ENR_L0_WRK.FLAT_AMOUNT, 0);
                           If &PlanAmount > 0 And
                                 &DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value < (&PlanAmount * (&MinSpouseAlloc / 100)) Then
                              &SpouseError = "Y";
                           End-If;
                        End-If;
                     End-If;
                  End-If;
               End-If;
            End-If;
         End-For;
         If &SpouseError = "Y" Then
            /* "This plan requires that you allocate at least..." */
            &Formatted_Amount = FormatAmount(&MinSpouseAlloc, "N", "N");
            &LongText = MsgGetExplainText(4001, 14, "Message Not Found", &Formatted_Amount);
            AppendText(&DEPBENErrorText, &LongText, &HTMLNewLine);
            &DEPBENErrorsExist = "Y";
         End-If;
      End-If
   End-If;
   
   /* Validate that an allocation hasn't been carried forward on a deceased beneficiary */
   If &COLLECT_DEPBEN <> "N" And
         &IgnoreDepBenEdit <> "Y" And
         &DependentPlan = "N" And
         &Coverage = "Y" Then
      /* Look for at least one deceased beneficiary with an allocation */
      For &I = 1 To &DEPBENGrid.ActiveRowCount
         If All(&DEPBENGrid(&I).W3EBENR_DEP_WRK.DT_OF_DEATH.Value) And
               &DEPBENGrid(&I).W3EBENR_DEP_WRK.DT_OF_DEATH.Value <= &EVENT_DT Then
            If All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT.Value) Or
                  All(&DEPBENGrid(&I).DERIVED_W3EB.FLAT_AMOUNT1.Value) Then
               &LongText = MsgGetExplainText(4001, 25, "Message Not Found");
               AppendText(&DEPBENErrorText, &LongText, &HTMLParagraph);
               &DEPBENErrorsExist = "Y";
               Break;
            End-If;
         End-If;
      End-For;
   End-If;
   
   /* Don't allow the employee to Waive/Drop coverage if there's a court order */
   If &CourtOrdersExist = "Y" Then
      If &Coverage <> "Y" Then
         &LongText = MsgGetExplainText(4001, 45, "Message Not Found");
         AppendText(&OPTNErrorText, &LongText, &HTMLParagraph);
         &OPTNErrorsExist = "Y";
      End-If;
   End-If;
   
   
   If &OPTNErrorsExist = "Y" Or
         &DEPBENErrorsExist = "Y" Then
      /* Expose the Error(s) on the page */
      If &OPTNErrorsExist = "Y" Then
         W3EB_ENR_LBL.INFO_ERROR1 = WrapText(&OPTNErrorText, "PAERRORTEXT");
         W3EB_ENR_LBL.GRPB_ERROR1.Visible = True;
      End-If;
      If &DEPBENErrorsExist = "Y" Then
         W3EB_ENR_LBL.INFO_DEP_ERROR1 = WrapText(&DEPBENErrorText, "PAERRORTEXT");
         W3EB_ENR_LBL.GRPB_DEP_ERROR1.Visible = True;
      End-If;
      /* Expose the Error Notification in the Header */
      W3EB_ENR_LBL.GRPB_PLANTYPEERR.Visible = True;
      SaveGridAttribs();
      TransferPage(Page.W3EB_ENR_TRANSFER);
   Else
      /* Save the visual attributes of the Dep/Ben Allocation Grid in case we return */
      SaveGridAttribs();
      /* Transfer to the Recap/Confirmation page */
      TransferPage(Page.W3EB_ENR_2X_RECAP);
   End-If;
End-Function;


/* ----------------------------------------------------------- */
/* Function: Present2xOptions                                  */
/* Returns: Nothing                                            */
/* Input Parameters: None                                      */
/* Output Parameters: None                                     */
/* Description:                                                */
/*    This is the main driver for building the Election page   */
/*    for Life/AD&D (2X) plans.                                */
/* ----------------------------------------------------------- */
Function Present2xOptions();
   
   AllowEmplIdChg( True);
   InitializeVariables();
   HideAllGroups();
   ClearAllErrors();
   GetCurrent2x(&PLAN_TYPE, &CvrgElect, &BenPlan, &Life_ADD_Covrg, &Descr, &DescrShort, &Covrg, &Text);
   LoadOptnScroll();
   DetermineVisualMethod(&VisualMethod);
   ApplyDefaultOption();
   ApplyInitialCrossPlan();
   BuildOptionRestrictions();
   ExposeOptions(&VisualMethod);
   BuildDepBenArea();
   SaveGridAttribs();
   TransferPage(Page.W3EB_ENR_TRANSFER);
   
End-Function;

