import EOCF_FILTER:FilterUser;
import EOCF_FILTER:FilterDefinition;
import EOCF_FILTER:FilterField;
import EOCF_FILTER:SavedFilter;
import EOCF_FILTER:Utilities:Utilities;
import EOCF_FILTER_CACHE:FilterFormCache;

import EOCF_TOOLS_METADATA:MetaData;
import EOCF_TOOLS_METADATA:DBField;
import EOCF_LIST_UTILS:ROWSET:RARowset;

rem import RB_UTILITIES:Navigation;
rem import RB_TOOLBAR:ToolbarSearchAdapter;

/********** ICE#1275091000 & Resolution id 625938 Dated 06/30/05  Yogesh Bapna ***************/
/**** Made the Case Sensitive flag independant of flag in ***/
/**** PSOPTIONS table. Value would be cached 			  ***/
/************************************************************/
/*-----------------------------------------------------------------------------------+
| class FilterForm                                                                   |
+------------------------------------------------------------------------------------*/
class FilterForm
   method FilterForm(&strComponent As string, &strMarket As string, &strPageName As string, &strRecordName As string);
   
   method Init();
   method FieldChange_Operator();
   method FieldChange_LookupType();
   method FieldEdit_FilterCriteria();
   method FieldChange_FilterCriteria();
   method FieldChange_FilterFieldHelp();
   method FieldChange_CaseSensitive();
   method UserPostExecuteCode();
   method FieldChange_FilterClear();
   method FieldChange_FilterExecute();
   method FieldChange_FilterLoad();
   method FieldChange_FilterSave();
   method FieldChange_FilterSaveSave();
   method FieldChange_FilterSaveCancel();
   REM   method FieldChange_ComponentTransfer();
   method FieldChange_FilterDelete();
   method PageActivate_FilterDelete();
   method FieldChange_FilterDeleteSave();
   method FieldChange_FilterPersonalize();
   method PageActivate_FilterPersonalize();
   method FieldChange_FilterPersonalizeSave();
   method FieldChange_FilterPersonalizeCancel();
   method FieldChange_Prompt();
   method FieldChange_Prompt3();
   method WhereClauseMarket(&strWhereClause As string) Returns string;
   method AcceptCriteria(&rowFilterCriteria As Row);
   method ExecuteFilter();
   method PreExecuteFilter();
   method PostExecuteFilter(&intRows As integer);
   
   method FillDropdownListBoxes();
   method FillDropdownListBox(&rowFilter As Row);
   method StopFetchAfterNRows() Returns string;
   method UpdateData();
   method ClearFilter();
   REM  method ClearFilterSpecify(&nRules As number);
   method ClearFilterRow(&rowFilterCriteria As Row);
   method GetSearchField(&sSearchRecName As string, &sSearchField As string) Returns string;
   method SetSearchField(&sSearchRecName As string, &sSearchField As string, &sSearchValue As string);
   method SetSearchFieldAndOper(&sSearchField As string, &sSearchValue As string, &sSearchOper As string);
   method SetSearchFieldForce(&sSearchRecName As string, &sSearchField As string, &sSearchValue As string);
   method ShowHideSaveOption(&sSaveOption As string);
   method FillDataDistributionRules();
   method LoadComponentFromCache() Returns boolean;
   method InitCached() Returns boolean;
   method SetDateAndTimeFields(&fldFilterField As Field, &fldDateField As Field, &fldTimeField As Field, &strCriteria As string);
   method InitializeGridRow(&rowGridRow As Row) Returns boolean;
   method SetFieldDefaults();
   method CIErrorHandling(&rsData As Rowset, &rowNumber As number);
   method DisplayCIError(&strCIName As string, &Session As ApiObject, &bStop As boolean) Returns string;
   method FillOperatorList(&recFilterCritWrk As Record);
   method ShowHideFilterInputFields(&rowFilterCriteria As Row);
   method GetFilterInputFields(&rowFilterCriteria As Row) Returns array of Field;
   method ShowHideFilterFields();
   method ShowHideFilterRow(&bShowRow As boolean, &rowCurrent As Row);
   method EnableDisableFilterRow(&bEnableRow As boolean, &rowCurrent As Row);
   REM  method PassesDistRuleCheck() Returns boolean;
   rem   method SetBOIDFields(&nBOID As number, &nRoleTypeID As number);
   method SaveLastUsedCriteria();
   rem   method SetDistributionRule(&strRuleName As string, &bUseRule As boolean);
   
   property EOCF_FILTER:FilterUser FilterUser readonly;
   property string WhereClause get;
   property string FilterCriteriaText get;
   rem   property string FilterDistCriteriaText get;
   property boolean IsInit readonly;
   property boolean IsReturnToSearch readonly;
   property boolean IsCriteria readonly;
   property Rowset GridRowset get;
   property Record FilterFormWorkRecord get;
   property Record FilterFormSaveRecord get;
   property Record FilterFormUserRecord get;
   property Rowset FilterFormRowset get;
   rem   property Rowset FilterFormDistRowset get;
   property boolean IsQuickCreate get;
   property integer MaxRows get set;
   property integer NumberOfRowsInGrid get set;
   property string FilterName get set;
   
   rem property FilteraudienceAdapter AudienceAdapter readonly;
   
private
   
   method SaveFilter(&strFilterName As string) Returns boolean;
   method ShowFilterButton();
   method DeleteFilter(&strFilterName As string) Returns boolean;
   method LoadFilter(&strFilterName As string) Returns boolean;
   method ShowPrompt(&sPromptPage As string);
   method SaveFilterValueToLevel0(&rowCurrent As Row);
   method GetSetControlSetID(&sSetControlField As string, &sSetControlRecord As string) Returns string;
   method BlankOutFields(&recFilterCritWrk As Record);
   method HideFields(&recFilterCritWrk As Record);
   method ShowHideRelatedDisplay(&bShow As boolean);
   method EnableDisableDeleteFilter();
   method ShowHideDataDistributionRules();
   method ShowHidePersonalizeLink();
   method NoSearchFields() Returns boolean;
   rem  method ClearBOFields(&nRoleTypeID As number);
   method GetSetID(&recFilterCritWrk As Record) Returns string;
   method IsCascadingPromptField(&strFieldName As string) Returns boolean;
   method ShowAdvancedBasic();
   method ShowHideDebugArea();
   method GetRelatedDisplayValue(&recFilterCritWrk As Record, &strPromptRecordName As string, &strIDValue As string);
   method ShowHideRelatedResultFields();
   method GetPromptRowset(&bIsXLAT As boolean, &sSetControlField As string, &sPromptRecordName As string, &sCurrentFieldName As string, &sWhere As string out) Returns Rowset;
   method GetHighOrderKeysRowset(&strPromptRecordName As string, &strCurrentFieldName As string, &intTotalKeyCount As integer out) Returns Rowset;
   method SetSavedFiltersDropDownValues();
   method ValidateCriteria(&rowFilterCriteria As Row);
   method SetAndLabels(&recFilterCritWrk As Record);
   method IsSavedFilter(&strFilterName As string) Returns boolean;
   method IsFieldInRecord(&strFieldName As string, &strRecName As string) Returns boolean;
   
   <*-----------------------------------------------------------------------------------+
   | Private instance variables                                                         |
   +------------------------------------------------------------------------------------*>
   instance EOCF_TOOLS_METADATA:DBField &objOprDBField;
   instance integer &nMaxRows;
   instance integer &nGridRows;
   instance string &sShowMoreDataHelpText;
   instance number &nMessageSetNumber;
   instance number &nMessageNumber;
   instance string &sRecnameHelpText;
   instance string &sFieldnameHelptext;
   instance string &sMsgTextorExplain;
   instance string &sMsghelpText;
   instance EOCF_FILTER:Utilities:Utilities &objUtils;
   instance array of string &m_arySearchFields;
   instance boolean &bStopExecute;
   instance boolean &bIsQuickCreate;
   instance boolean &bIsIgnoreCaseAllowed;
   instance boolean &m_bUnhideFieldsExist;
   instance boolean &m_bConstantsExist;
   instance array of string &m_aryOperatorNames;
   instance string &m_strDefinitionRecordName;
   instance array of string &m_aryHighOrderKeys;
   instance string &m_strHighOrderKeysWorkRecord;
   rem  instance string &m_strSecurityType;
   rem   instance string &m_strBUSecurity;
   rem   instance string &m_strSetidSecurity;
   
   <*-----------------------------------------------------------------------------------+
   | Private constants                                                                  |
   +------------------------------------------------------------------------------------*>
   Constant &strFieldDelimiter = "|";
   Constant &strValueDelimiter = ";";
   Constant &strUserListDelimiter = ",";
   Constant &numDataType_CHAR = 0;
   Constant &numDataType_LONG = 1;
   Constant &numDataType_NUM = 2;
   Constant &numDataType_SIGN = 3;
   Constant &numDataType_DATE = 4;
   Constant &numDataType_TIME = 5;
   Constant &numDataType_DTTM = 6;
   Constant &strPromptEditTypeNOEDIT = "1";
   Constant &strPromptEditTypePROMPTNOEDIT = "2";
   Constant &strPromptEditTypeXLAT = "3";
   Constant &strPromptEditTypeYesNo = "4";
   Constant &strPromptEditTypeDirectory = "5";
   Constant &strPromptEditTypeConstant = "6";
   Constant &strPromptEditTypePROMPTWITHEDIT = "7";
   Constant &strPromptEditTypeDropdown = "8";
   Constant &strOper_BEGINS_WITH = "1";
   Constant &strOper_EQUAL = "2";
   Constant &strOper_NOT_EQUAL = "3";
   Constant &strOper_LESS_THAN = "4";
   Constant &strOper_GREATER_THAN = "5";
   Constant &strOper_LESS_THAN_EQUAL = "6";
   Constant &strOper_GREATER_THAN_EQUAL = "7";
   Constant &strOper_CONTAINS = "8";
   Constant &strOper_BETWEEN = "9";
   Constant &strOper_IN = "10";
   Constant &strOper_IS_BLANK = "11";
   Constant &strOper_NOT_BLANK = "12";
   Constant &strOper_NOT_IN = "13";
   Constant &numDefaultMaxRows = 10000;
   Constant &numMaxPromptFields = 9;
   Constant &stradvBasicLookup_ADVANCED = "A";
   Constant &stradvBasicLookup_BASIC = "B";
   Constant &stradvBasicLookup_BOTH = "C";
   Constant &strFillOption_DEFAULT = "D";
   Constant &strFillOption_LASTCRITERIA = "L";
   Constant &strFillOption_NOFILL = "N";
   
end-class;

/*-----------------------------------------------------------------------------------+
| validation and conversion functions                                                |
+------------------------------------------------------------------------------------*/
Declare Function SetFieldTypeForConversions PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function IsUserFormattedValue PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function IsStoreFormattedValue PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function UserFormatToValue PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function StoreFormatToValue PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function ValueToUserFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function ValueToStoreFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function ValueToSqlInFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function ErrorUserFormattedValue PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE FieldFormula;
Declare Function SetUserFormatListSeparator PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function SetStoreFormatListSeparator PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function IsUserFormattedList PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function IsStoreFormattedList PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function UserFormatToArray PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function StoreFormatToArray PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function ArrayToUserFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function ArrayToStoreFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
Declare Function ArrayToSqlInFormat PeopleCode FUNCLIB_EOCF_RB.EOCF_VALUE_LIST FieldFormula;
rem Declare Function GetDatasetFilterSQL PeopleCode FUNCLIB_ECMOBIL.EOEC_MP_FUNCTIONS FieldFormula;
REM Declare Function DisplayCIError PeopleCode FUNCLIB_EOCF_RB.CONVERT_LEAD_CI FieldFormula;

/*-----------------------------------------------------------------------------------+
| component scope variables                                                          |
+------------------------------------------------------------------------------------*/

Global EOCF_FILTER_CACHE:FilterFormCache &gobjFilterFormCache;

/** COMMENTED BY SUJAY **/
rem Global RB_UTILITIES:Navigation &g_RBTB_oReturnNavigation;

rem Global number &gnLeadIndex;
Component EOCF_FILTER:FilterForm &cobjThisFilterForm;
Component integer &cmp_nNumberOfFields;
Component string &sComponentMoreRowsMessageText;


/*-----------------------------------------------------------------------------------+
| constructor method FilterForm()                                                    |
+------------------------------------------------------------------------------------*/
method FilterForm
   /+ &strComponent as String, +/
   /+ &strMarket as String, +/
   /+ &strPageName as String, +/
   /+ &strRecordName as String +/
   
   Local Rowset &rsFilterDefns = CreateRowset(Record.EOCF_FILTER_DFN);
   Local string &strIsIgnoreCaseAllowed;
   Local string &strSecurityType, &strBUSecurity, &strSetidSecurity;
   
   If Not All(&strComponent, &strMarket, &strPageName, &strRecordName) Then
      If &rsFilterDefns.Fill("where PNLGRPNAME = :1 and MARKET = :2", %Component, %Market) = 1 Then
         &strPageName = &rsFilterDefns(1).EOCF_FILTER_DFN.PNLNAME.Value;
         &strRecordName = &rsFilterDefns(1).EOCF_FILTER_DFN.RECNAME.Value;
      End-If;
   End-If;
   
   &FilterUser = create EOCF_FILTER:FilterUser((create EOCF_FILTER:FilterDefinition(&strComponent, &strMarket, &strPageName, &strRecordName)), %UserId);
   
   &objOprDBField = (create EOCF_TOOLS_METADATA:MetaData()).GetDBField(Field.EOCF_FILTER_OPER);
   
   /** Initialize variables which stores the preferences for showing the help text  **/
   /** if more rows than the specified limit are found matching the filter criteria **/
   
   &sShowMoreDataHelpText = %This.FilterUser.FilterDefn.ShowMoreDataHelpText;
   &sMsgTextorExplain = %This.FilterUser.FilterDefn.MoreRowsMessageTextOrExplain;
   &nMessageSetNumber = %This.FilterUser.FilterDefn.MoreRowsMessageSetNumber;
   &nMessageNumber = %This.FilterUser.FilterDefn.MoreRowsMessageNumber;
   &sRecnameHelpText = %This.FilterUser.FilterDefn.MoreRowsRecName;
   &sFieldnameHelptext = %This.FilterUser.FilterDefn.MoreRowsFieldName;
   &objUtils = create EOCF_FILTER:Utilities:Utilities();
   
   /********** ICE# Dated 06/30/05 Start Yogesh Bapna ***************/
   REM SQLExec("SELECT CASEINSSEARCH FROM PSOPTIONS", &strIsIgnoreCaseAllowed);
   REM  &bIsIgnoreCaseAllowed = (&strIsIgnoreCaseAllowed = "Y");
   &bIsIgnoreCaseAllowed = True;
   /********** ICE# Dated 06/30/05 End Yogesh Bapna ***************/
   
   &m_strDefinitionRecordName = %This.FilterUser.FilterDefn.RecordName;
   
   &m_aryHighOrderKeys = CreateArrayRept("", 0);
   &m_strHighOrderKeysWorkRecord = %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord;
   
   &cobjThisFilterForm = %This;
   
   rem   &AudienceAdapter = create FilteraudienceAdapter(%This);
   
end-method;


/*-----------------------------------------------------------------------------------+
| public method Init()                                                               |
+------------------------------------------------------------------------------------*/
method Init
   
   Local EOCF_FILTER:FilterField &objFilterField;
   Local Row &rowFilterCriteria;
   Local Record &recFilterCritDvw, &recFilterCritWrk, &recDerived;
   Local integer &iFieldNum, &i, &j;
   &IsInit = True;
   &IsCriteria = False;
   Local boolean &bLoadFilter, &bCollapse;
   
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = False;
   
   If Not &bIsIgnoreCaseAllowed Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "Y";
      /********** ICE# Dated 06/30/05 Start Yogesh Bapna ***************/
      rem  GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Visible = False;
      /********** ICE# Dated 06/30/05 End Yogesh Bapna ***************/
   End-If;
   
   <*-----------------------------------------------------------------------------------+
   | InitCahced is a "Lite" version of the Init() method, to enhace performance.        |
   | It copies Level0 from cache, and then does housekeeping such as restoring          |
   |   visible flags (which are not saved with the component buffer).                   |
   +------------------------------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.IsCacheOption Then
      If %This.InitCached() Then
         Return;
      End-If;
   End-If;
   
   GetLevel0()(1).EOCF_FLTFRM_WRK.OPRID.Value = %This.FilterUser.UserID;
   GetLevel0()(1).EOCF_FLTFRM_WRK.PNLGRPNAME.Value = %This.FilterUser.FilterDefn.ComponentName;
   GetLevel0()(1).EOCF_FLTFRM_WRK.MARKET.Value = %This.FilterUser.FilterDefn.Market;
   GetLevel0()(1).EOCF_FLTFRM_WRK.PNLNAME.Value = %This.FilterUser.FilterDefn.PageName;
   GetLevel0()(1).EOCF_FLTFRM_WRK.RECNAME.Value = &m_strDefinitionRecordName;
   If &bIsIgnoreCaseAllowed Then
      If %This.FilterUser.IsCaseSensitiveSearch Then
         GetLevel0()(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "Y";
      Else
         GetLevel0()(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N";
      End-If;
   Else
      GetLevel0()(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "Y";
   End-If;
   
   
   GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_ADV_BAS_LKUP.Value = %This.FilterUser.FilterDefn.AdvancedBasicLookupOption;
   GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPDFL.Value = %This.FilterUser.FilterDefn.AdvancedBasicLookupDefault;
   
   %This.ShowAdvancedBasic();
   
   GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).Flush();
   rem  GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).Flush();
   
   /*--------------------------------------------------+
   |  Fill instance array of operator names            |
   +--------------------------------------------------*/
   &m_aryOperatorNames = CreateArrayRept("", 0);
   For &i = 1 To &objOprDBField.XlatItems.Len
      &m_aryOperatorNames [&i] = &objOprDBField.GetXlatItem(String(&i)).LongName;
   End-For;
   
   For &iFieldNum = 1 To %This.FilterUser.FilterDefn.FieldCount
      
      &rowFilterCriteria = (create EOCF_LIST_UTILS:ROWSET:RARowset(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW))).GetNewRow( False);
      &recFilterCritDvw = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_DVW);
      &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
      &recDerived = &rowFilterCriteria.GetRecord(Record.DERIVED);
      
      &objFilterField = %This.FilterUser.FilterDefn.FilterFields [&iFieldNum];
      
      &recFilterCritDvw.FIELDNAME.Value = &objFilterField.FieldName;
      &recFilterCritWrk.FIELDNAME.Value = &objFilterField.FieldName;
      &recFilterCritWrk.EOCF_CB_USE_SEARCH.Value = &objFilterField.IsFilterFieldValue;
      &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = &objFilterField.AdvancedBasicLookupOption;
      
      &recFilterCritWrk.EOCF_RECNAME_ALT.Value = &objFilterField.RecnameAlt;
      &recFilterCritWrk.FIELDNUM.Value = &objFilterField.FieldNumber;
      &recFilterCritWrk.FIELDLABEL.Value = &objFilterField.Label;
      &recFilterCritWrk.PROMPT_EDITTYPE.Value = &objFilterField.EditType;
      If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeConstant Then
         &m_bConstantsExist = True;
      End-If;
      &recFilterCritWrk.SETCNTRLFLD.Value = &objFilterField.SetControlField;
      rem   &recFilterCritWrk.DISPLAY_CNTRL_FLD.Value = &objFilterField.DisplayControlField;
      rem   &recFilterCritWrk.DISPLAY_CNTRL_FLD2.Value = &objFilterField.DisplayControlFieldRoleType;
      &recFilterCritWrk.EOCF_PB_HELP.Visible = (&objFilterField.HelpMessageSetNumber > 0 And
         &objFilterField.HelpMessageNumber > 0);
      &recDerived.EDITTABLE.Value = &objFilterField.PromptTable;
      &recFilterCritWrk.EOCF_FILTER_OPER.Label = &objFilterField.Label;
      REM &recFilterCritWrk.EOCF_CB_USE_SEARCH.Value = &objFilterField.IsFilterFieldValue;
      &recFilterCritWrk.EOCF_CB_USE_RESULT.Value = &objFilterField.IsResultField;
      &recFilterCritWrk.EOCF_DROPDOWN_DESC.Value = &objFilterField.DropdownDescrField;
      
      /*     &recFilterCritWrk.COMPONENT_DRILL.Value = "N";
      If &objFilterField.IsDrillButton Then
         &recFilterCritWrk.COMPONENT_DRILL.Value = "Y";
      End-If;
*/
      &recFilterCritWrk.EOCF_CB_DISP_ONLY.Value = "N";
      If &objFilterField.IsDisplayOnly Then
         &recFilterCritWrk.EOCF_CB_DISP_ONLY.Value = "Y";
      End-If;
      &recFilterCritWrk.EOCF_DEFAULT_OPER.Value = &objFilterField.DefaultOperator;
      &recFilterCritWrk.EOCF_OPERATORS.Value = &objFilterField.GetOperators;
      rem     &recFilterCritWrk.QC_VALUE_REFERENCE.Value = &objFilterField.QuickCreateField;
      &recFilterCritWrk.FIELDTYPE.Value = &objFilterField.FieldType;
      If &objFilterField.IsHiddenField Then
         &recFilterCritWrk.EOCF_CB_HIDDEN.Value = "Y";
      Else
         &recFilterCritWrk.EOCF_CB_HIDDEN.Value = "N";
      End-If;
      &recFilterCritWrk.EOCF_FILTER_OPER.ShowRequiredFieldCue = False;
      If &objFilterField.IsRequired Then
         &recFilterCritWrk.REQUIRED_FLG.Value = "Y";
      Else
         &recFilterCritWrk.REQUIRED_FLG.Value = "N";
      End-If;
      &recFilterCritWrk.EOCF_UPPR_SRCH_FLD.Value = &objFilterField.UpperSearchField;
      
      &recFilterCritWrk.TEXT254.Visible = False;
      Local number &numMessageSetNumber = &objFilterField.InfoMessageSetNumber;
      Local number &numMessageNumber = &objFilterField.InfoMessageNumber;
      If All(&numMessageSetNumber, &numMessageNumber) Then
         If &numMessageSetNumber > 0 And
               &numMessageNumber > 0 Then
            &recFilterCritWrk.TEXT254.Value = &objFilterField.InfoMessageExplainText;
            REM &recFilterCritWrk.TEXT254.Value = "Setid: CRM01,  Customer ID: 301,  Phone: 800/988-5644";
            &recFilterCritWrk.TEXT254.Visible = True;
         End-If;
      End-If;
      
      &recFilterCritWrk.EOCF_UNHIDE.Value = &objFilterField.UnHideRelatedFields;
      If All(&recFilterCritWrk.EOCF_UNHIDE.Value) Then
         &m_bUnhideFieldsExist = True;
      End-If;
      
      REM &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = &objFilterField.AdvancedBasicLookupOption;
      
      &recFilterCritWrk.EOCF_FLT_CONSTANT.Value = &objFilterField.ConstantValue;
      
      %This.BlankOutFields(&recFilterCritWrk);
      
      %This.FillOperatorList(&recFilterCritWrk);
      
      If &objFilterField.IsXlat Then
         &recDerived.EDITTABLE.Value = Record.EOCF_XLAT_PRMPT;
      End-If;
      If &objFilterField.IsYesNo Then
         &recDerived.EDITTABLE.Value = Record.EOCF_YESNO_PRMT;
      End-If;
      
      If &recFilterCritWrk.FIELDNAME.Value = "BUSINESS_UNIT" Then
         &m_aryHighOrderKeys.Push(&recFilterCritWrk.FIELDNAME.Value);
      End-If;
      
      If &m_strHighOrderKeysWorkRecord <> "" Then
         If &recFilterCritWrk.FIELDNAME.Value <> "BUSINESS_UNIT" Then
            If %This.IsCascadingPromptField(&recFilterCritWrk.FIELDNAME.Value) Then
               &m_aryHighOrderKeys.Push(&recFilterCritWrk.FIELDNAME.Value)
            End-If;
         End-If;
      End-If;
      
      %This.ShowHideFilterInputFields(&rowFilterCriteria);
      
      %This.SetAndLabels(&recFilterCritWrk);
      
   End-For;
   
   GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).Sort(EOCF_FLTCRT_WRK.FIELDNUM, "A");
   
   %This.FillDataDistributionRules();
   
   %This.ShowHidePersonalizeLink();
   
   %This.ShowHideSaveOption(%This.FilterUser.FilterDefn.SaveOption);
   
   &bLoadFilter = False;
   
   If %CompIntfcName = "" Then
      
      If %This.FilterUser.FilterDefn.IsUserConfigOption Then
         If %This.FilterUser.FillOption = "" Then
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Or
                  %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
               &bLoadFilter = True;
            End-If;
         Else
            If %This.FilterUser.FillOption = &strFillOption_DEFAULT Or
                  %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA Then
               &bLoadFilter = True;
            End-If;
         End-If;
      Else
         If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Or
               %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
            &bLoadFilter = True;
         End-If;
      End-If;
      
      /* If &bLoadFilter Then
         If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
             If %This.FilterUser.LastUsedCriteria = "" Then 
            &bLoadFilter = False;
             End-If; 
         End-If;
      End-If; */
      
      <** COMMENTED BY SUJAY **
     
      <*-------------------------------------------------------|
      |  If  return to Search is occuring, reload the filter   |
      +--------------------------------------------------------*>
      Local RB_TOOLBAR:ToolbarSearchAdapter &objToolbar = CreateObject("RB_TOOLBAR:ToolbarSearchAdapter");
      
      If &objToolbar.CheckAndClearResults() Then
         &bLoadFilter = True;
         &IsReturnToSearch = True;
      Else
         &IsReturnToSearch = False;
      End-If;
      
** COMMENT ENDED BY SUJAY **>
      
      Local string &strParmFilterName = %Request.GetParameter("SEARCH");
      If All(&strParmFilterName) Then
         If %This.IsSavedFilter(&strParmFilterName) Then
            %This.FilterUser.DefaultSavedFilter = &strParmFilterName;
            &bLoadFilter = True;
            &IsReturnToSearch = False;
         End-If;
      End-If;
      
   End-If;
   
   /** CHANGED BY SUJAY */
   <* 
   If &bLoadFilter Then
      If %Component <> Component.RC_CASE_SW And
            %Component <> Component.RC_CASE_HD Then
         If %This.LoadFilter(%This.FilterUser.DefaultSavedFilter) = True Then
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = %This.FilterUser.DefaultSavedFilter;
            %This.SetFieldDefaults();
            %This.ExecuteFilter();
         Else
            %This.ClearFilter();
            %This.SetFieldDefaults();
            &IsInit = False;
            Error MsgGet(18112, 5042, "Error loading default filter.");
         End-If;
      End-If;
   Else
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
      %This.ClearFilter();
      %This.SetFieldDefaults();
   End-If;
*>
   If &bLoadFilter Then
      If %This.LoadFilter(%This.FilterUser.DefaultSavedFilter) = True Then
         GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = %This.FilterUser.DefaultSavedFilter;
         %This.SetFieldDefaults();
         
         /**** Modified to enable search results grid NOT to be auto-populated  **/
         /**** even when last criteria is being used			 			    **/
         rem  %This.ExecuteFilter();
      Else
         %This.ClearFilter();
         %This.SetFieldDefaults();
         &IsInit = False;
         Error MsgGet(18112, 5042, "Error loading default filter.");
      End-If;
   Else
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
      %This.ClearFilter();
      %This.SetFieldDefaults();
   End-If;
   
   /** CHANGE ENDED BY SUJAY **/
   
   %This.ShowFilterButton();
   %This.ShowHideDebugArea();
   
   If %This.FilterUser.FilterCollapsedOption = "Y" Then
      &bCollapse = True;
   Else
      If %This.FilterUser.FilterCollapsedOption = "" Then
         If %This.FilterUser.FilterDefn.FilterCollapsedOption = "Y" Then
            &bCollapse = True;
         End-If;
      End-If;
   End-If;
   
   If &bCollapse Then
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = True;
   Else
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = False;
   End-If;
   
   REM %This.ShowHideFilterFields();
   %This.SetSavedFiltersDropDownValues();
   
   rem  %This.AudienceAdapter.UpdateLinkDisplay();
   
   &IsInit = False;
   
end-method;


/*-----------------------------------------------------------------------------------+
| Private Method SetAndLables                                                        |
+------------------------------------------------------------------------------------*/
method SetAndLabels
   /+ &recFilterCritWrk as Record +/
   
   Local string &strLabel = MsgGetText(15670, 118, "And");
   
   &recFilterCritWrk.EOCF_VALUE2.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE2P.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_PROMPT2.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_PRMPT2P.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_DATE2.Label = &strLabel;
   REM &recFilterCritWrk.EOCF_VALUE_TIME2.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_XLAT2.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_XLAT2P.Label = &strLabel;
   &recFilterCritWrk.EOCF_VAL_DROPDOWN2.Label = &strLabel;
   &recFilterCritWrk.EOCF_VAL_DROPDOW2P.Label = &strLabel;
   &recFilterCritWrk.EOCF_VALUE_YESNO2.Label = &strLabel;
   
end-method;


/*-----------------------------------------------------------------------------------+
| Method ShowHideDebugArea                                                           |
+------------------------------------------------------------------------------------*/
method ShowHideDebugArea
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_SQLST.Visible = False;
   If %This.FilterUser.FilterDefn.FilterSQLOption = "Y" Then
      If %This.FilterUser.FilterDefn.DebugUsers = "" Then
         GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_SQLST.Visible = True;
      Else
         If %This.FilterUser.FilterDefn.IsDebugUser(%UserId) Then
            GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_SQLST.Visible = True;
         End-If;
      End-If;
   End-If;
end-method;



/*-----------------------------------------------------------------------------------+
| Method FillDataDistribution Rules                                                  |
+------------------------------------------------------------------------------------*/
method FillDataDistributionRules
   
   If %This.FilterUser.FilterDefn.SecureOption = "Y" Then
      GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).Select(Record.EOEC_DS_RULE_VW, "WHERE ROLEUSER = :1 AND EOEC_DATASETNAME = :2", %UserId, %This.FilterUser.FilterDefn.SecureDataSetName);
   End-If;
   
   %This.ShowHideDataDistributionRules();
   
end-method;



/*-----------------------------------------------------------------------------------+
| Method ShowHideDataDistribution Rules                                              |
+------------------------------------------------------------------------------------*/
method ShowHideDataDistributionRules;
   
   If (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 1 And
         None(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.DESCR.Value)) Or
         GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount < 1 Then
      GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).HideAllRows();
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_DDRULE.Visible = False;
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_DDRULE.Visible = True;
   End-If;
   
end-method;



/*-----------------------------------------------------------------------------------+
| Fill Dropdown List Boxes                                                           |
+------------------------------------------------------------------------------------*/
method FillDropdownListBoxes
   
   Local integer &i;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      If GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Then
         %This.FillDropdownListBox(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
      End-If;
   End-For;
   
end-method;


/*-----------------------------------------------------------------------------------+
| Fill Dropdown List Box                                                             |
+------------------------------------------------------------------------------------*/
method FillDropdownListBox
   /+ &rowFilter as Row +/
   Local integer &i, &j;
   Local Record &recFilterCritWrk;
   Local string &sDropDownItem, &sDropDownDescr, &sPromptRecordName;
   Local Rowset &rsPrompt;
   Local boolean &bIsCascadingPromptField;
   Local EOCF_FILTER:FilterField &objFilterField;
   Local string &strWhere;
   
   
   &recFilterCritWrk = &rowFilter.EOCF_FLTCRT_WRK;
   
   If &recFilterCritWrk.PROMPT_EDITTYPE.Value <> &strPromptEditTypeDropdown Then
      Return;
   End-If;
   
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   If Not &objFilterField.IsVisible Then
      Return
   End-If;
   
   &sPromptRecordName = &rowFilter.DERIVED.EDITTABLE.Value;
   &rsPrompt = %This.GetPromptRowset( False, &recFilterCritWrk.SETCNTRLFLD.Value, &sPromptRecordName, &recFilterCritWrk.FIELDNAME.Value, &strWhere);
   
   
   If All(&rsPrompt) Then
      If Not &objFilterField.IsPromptKeysChanged(&strWhere) Then
         Return;
      End-If;
      
      &bIsCascadingPromptField = (&m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0);
      
      If &bIsCascadingPromptField Then
         &recFilterCritWrk.EOCF_VAL_DROPDOWNP.ClearDropDownList();
         &recFilterCritWrk.EOCF_VAL_DROPDOW2P.ClearDropDownList();
      Else
         &recFilterCritWrk.EOCF_VAL_DROPDOWN.ClearDropDownList();
         &recFilterCritWrk.EOCF_VAL_DROPDOWN2.ClearDropDownList();
      End-If;
      If &rsPrompt.RowCount = 1 And
            None(&rsPrompt(1).GetRecord(@("Record." | &sPromptRecordName)).GetField(@("Field." | &recFilterCritWrk.FIELDNAME.Value)).Value) Then
      Else
         For &j = 1 To &rsPrompt.RowCount
            &sDropDownItem = &rsPrompt(&j).GetRecord(@("Record." | &sPromptRecordName)).GetField(@("Field." | &recFilterCritWrk.FIELDNAME.Value)).Value;
            &sDropDownDescr = &rsPrompt(&j).GetRecord(@("Record." | &sPromptRecordName)).GetField(@("Field." | &recFilterCritWrk.EOCF_DROPDOWN_DESC.Value)).Value;
            If &bIsCascadingPromptField Then
               &recFilterCritWrk.EOCF_VAL_DROPDOWNP.AddDropDownItem(&sDropDownItem, &sDropDownDescr);
               &recFilterCritWrk.EOCF_VAL_DROPDOW2P.AddDropDownItem(&sDropDownItem, &sDropDownDescr);
            Else
               &recFilterCritWrk.EOCF_VAL_DROPDOWN.AddDropDownItem(&sDropDownItem, &sDropDownDescr);
               &recFilterCritWrk.EOCF_VAL_DROPDOWN2.AddDropDownItem(&sDropDownItem, &sDropDownDescr);
            End-If;
         End-For;
      End-If;
   End-If;
   
   &objFilterField.PromptWhereClause = &strWhere;
   
end-method;




/*-----------------------------------------------------------------------------------+
| public method ShowHideSaveOption                                                   |
+------------------------------------------------------------------------------------*/
method ShowHideSaveOption
   /+ &sSaveOption as String +/
   
   If &sSaveOption = "N" Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_SAVE.Visible = False;
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_SAVE.Visible = True;
      %This.EnableDisableDeleteFilter();
   End-If;
   
end-method;


/*-----------------------------------------------------------------------------------+
| private method ShowHidePersonlizeLink                                              |
+------------------------------------------------------------------------------------*/
method ShowHidePersonalizeLink
   
   GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_PERS.Visible = True;
   If Not %This.FilterUser.FilterDefn.PersonalizeOption = "Y" Then
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_PERS.Visible = False;
   End-If;
   
end-method;


/*-----------------------------------------------------------------------------------+
| public method FillOperatorList                                                     |
+------------------------------------------------------------------------------------*/
method FillOperatorList
   /+ &recFilterCritWrk as Record +/
   
   Local integer &i;
   
   &recFilterCritWrk.EOCF_FILTER_OPER.ClearDropDownList();
   
   If All(&recFilterCritWrk.EOCF_OPERATORS.Value) Then
      Local array of string &aryFieldOperators = Split(&recFilterCritWrk.EOCF_OPERATORS.Value, ";");
      
      For &i = 1 To &aryFieldOperators.Len
         &recFilterCritWrk.EOCF_FILTER_OPER.AddDropDownItem(&aryFieldOperators [&i], &m_aryOperatorNames [Value(&aryFieldOperators [&i])]);
      End-For;
      
      If Not All(&recFilterCritWrk.EOCF_FILTER_OPER.Value) Then
         &recFilterCritWrk.EOCF_FILTER_OPER.Value = &recFilterCritWrk.EOCF_DEFAULT_OPER.Value;
      End-If;
      
   End-If;
   
end-method;

/*-----------------------------------------------------------------------------------+
| public property GridRowset ()                                                      |
+------------------------------------------------------------------------------------*/
get GridRowset
   /+ Returns Rowset +/
   Return GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName));
end-get;

/**************************************************/
/*  Get MaxRows                                   */
/**************************************************/

get MaxRows
   /+ Returns Integer +/
   Return &nMaxRows;
end-get;

/**************************************************/
/*  Set MaxRows                                   */
/**************************************************/

set MaxRows
   /+ &NewValue as Integer +/
   &nMaxRows = &NewValue;
   If &nMaxRows = 0 Then
      &nMaxRows = &numDefaultMaxRows;
   End-If;
end-set;

/**************************************************/
/*  Get NumberOfRowsInGrid                        */
/**************************************************/

get NumberOfRowsInGrid
   /+ Returns Integer +/
   Return &nGridRows;
end-get;

/**************************************************/
/*  Set NumberOfRowsInGrid                        */
/**************************************************/

set NumberOfRowsInGrid
   /+ &NewValue as Integer +/
   &nGridRows = &NewValue;
end-set;

/*-----------------------------------------------------------------------------------+
| public property IsQuickCreate ()                                                   |
+------------------------------------------------------------------------------------*/
get IsQuickCreate
   /+ Returns Boolean +/
   Return &bIsQuickCreate;
end-get;

/*-----------------------------------------------------------------------------------+
| public property FilterFormWorkRecord ()                                            |
+------------------------------------------------------------------------------------*/
get FilterFormWorkRecord
   /+ Returns Record +/
   Return GetLevel0()(1).EOCF_FLTFRM_WRK;
end-get;

/*-----------------------------------------------------------------------------------+
| public property FilterFormSaveRecord ()                                            |
+------------------------------------------------------------------------------------*/
get FilterFormSaveRecord
   /+ Returns Record +/
   Return GetLevel0()(1).EOCF_FLTSAV_WRK;
end-get;

/*-----------------------------------------------------------------------------------+
| public property FilterFormUserRecord ()                                            |
+------------------------------------------------------------------------------------*/
get FilterFormUserRecord
   /+ Returns Record +/
   Return GetLevel0()(1).EOCF_FLTUSR_WRK;
end-get;

/*-----------------------------------------------------------------------------------+
| public property FilterFormRowset ()                                                |
+------------------------------------------------------------------------------------*/
get FilterFormRowset
   /+ Returns Rowset +/
   Return GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW);
end-get;

<** COMMENTED BY SUJAY **

/*-----------------------------------------------------------------------------------+
| public property FilterFormDistRowset ()                                            |
+------------------------------------------------------------------------------------*/
get FilterFormDistRowset
   /+ Returns Rowset +/
   Return GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW);
end-get;

**>
/*-----------------------------------------------------------------------------------+
|  public property FilterName ()                                                     |
+------------------------------------------------------------------------------------*/
get FilterName
   /+ Returns String +/
   Return GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value
end-get;


/*-----------------------------------------------------------------------------------+
|  public property FilterName ()                                                     |
+------------------------------------------------------------------------------------*/
set FilterName
   /+ &NewValue as String +/
   
   Local EOCF_FILTER:SavedFilter &objSavedFilter;
   
   If All(&NewValue) Then
      &objSavedFilter = %This.FilterUser.GetSavedFilter(&NewValue);
      If &objSavedFilter = Null Then
         Return;
      End-If;
   End-If;
   
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = &NewValue;
end-set;

/*-----------------------------------------------------------------------------------+
| private method ShowAdvancedBasic()                                                 |
+------------------------------------------------------------------------------------*/
method ShowAdvancedBasic
   
   Local string &strOption;
   Local string &strFilterDefnDefault;
   Local string &strFilterDefnOption;
   Local string &strFilterUserDefault;
   
   &strFilterDefnDefault = %This.FilterUser.FilterDefn.AdvancedBasicLookupDefault;
   &strFilterDefnOption = %This.FilterUser.FilterDefn.AdvancedBasicLookupOption;
   &strFilterUserDefault = %This.FilterUser.AdvancedBasicLookupDefault;
   
   If %This.FilterUser.FilterDefn.IsUserConfigOption Then
      If %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA Then
         &strOption = %This.FilterUser.LastUsedLookupType;
      End-If;
      If %This.FilterUser.FillOption = &strFillOption_DEFAULT And
            %This.FilterUser.DefaultSavedFilter <> "" Then
         &strOption = %This.FilterUser.GetSavedFilter(%This.FilterUser.DefaultSavedFilter).FilterLookupType;
      End-If;
   Else
      If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
         &strOption = %This.FilterUser.LastUsedLookupType;
      End-If;
      If %This.FilterUser.FillOption = &strFillOption_DEFAULT And
            %This.FilterUser.DefaultSavedFilter <> "" Then
         &strOption = %This.FilterUser.GetSavedFilter(%This.FilterUser.DefaultSavedFilter).FilterLookupType;
      End-If;
   End-If;
   
   If None(&strOption) Then
      If None(&strFilterUserDefault) Then
         &strOption = &strFilterDefnDefault
      Else
         &strOption = &strFilterUserDefault;
      End-If;
   End-If;
   
   If None(&strOption) Then
      &strOption = &stradvBasicLookup_ADVANCED;
   End-If;
   
   If &strFilterDefnOption <> &stradvBasicLookup_BOTH And
         All(&strFilterDefnOption) Then
      &strOption = &strFilterDefnOption;
   End-If;
   
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value = &strOption;
   
   If %This.FilterUser.FilterDefn.AdvancedBasicLookupOption = &stradvBasicLookup_BOTH Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Visible = True;
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Visible = False;
   End-If;
   
   If &strOption = &stradvBasicLookup_BASIC Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Label = MsgGetText(18112, 5032, "Advanced Srch");
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Label = MsgGetText(18112, 5033, "Basic Srch");
   End-If;
   
end-method;


/*----------------------------------------------------------------------------------+
| private method ShowFilterButton()                                                 |
+-----------------------------------------------------------------------------------*/
method ShowFilterButton
   Local string &strOption;
   
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS.Visible = False;
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS2.Visible = False;
   
   If %This.FilterUser.FilterButtonOption = "" Then
      &strOption = %This.FilterUser.FilterDefn.FilterButtonOption;
   Else
      &strOption = %This.FilterUser.FilterButtonOption
   End-If;
   
   
   Evaluate &strOption
   When "T"
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS.Visible = True;
   When "B"
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS2.Visible = True;
   When-Other
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS.Visible = True;
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FLT_BTNS2.Visible = True;
   End-Evaluate;
   
end-method;

/*----------------------------------------------------------------------------------+
| private method ShowHideFilterInputFields()                                        |
+-----------------------------------------------------------------------------------*/
method ShowHideFilterInputFields
   /+ &rowFilterCriteria as Row +/
   
   Local array of Field &arFilterInputFields;
   Local Record &recFilterCritWrk;
   Local EOCF_FILTER:FilterField &objFilterField;
   Local array of string &arHideFilterFields;
   Local Field &fldNull;
   
   &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
   &arHideFilterFields = Split(%This.FilterUser.FilterFieldList, &strFieldDelimiter);
   
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   
   &recFilterCritWrk.EOCF_FLT_CONSTANT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE.Visible = False;
   &recFilterCritWrk.EOCF_VALUEP.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPTP.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_DATE.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_TIME.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLATP.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWN.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWNP.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_YESNO.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_LIST.Visible = False;
   &recFilterCritWrk.EOCF_VALUE2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE2P.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PRMPT2P.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_DATE2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_TIME2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT2P.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWN2.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOW2P.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_YESNO2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT3.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT3.Visible = False;
   
   &recFilterCritWrk.EOCF_CB_DISP_ONLY.Visible = False;
   &recFilterCritWrk.EOCF_PB_HELP.Visible = False;
   &recFilterCritWrk.EOCF_REL_DISP_VAL.Visible = False;
   
   
   /*---------------------------+
   | Hide row in some cases     |
   +----------------------------*/
   If &recFilterCritWrk.EOCF_CB_USE_SEARCH.Value <> "Y" Or
         &objFilterField.IsHiddenByApplication Or
         &arHideFilterFields.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Or
         Not (&recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = &stradvBasicLookup_BOTH Or
            &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value) Then
      
      &arFilterInputFields = CreateArrayRept(&fldNull, 0);
      &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE);
      &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE2);
      &arFilterInputFields [1].Visible = False;
      &arFilterInputFields [2].Visible = False;
      &recFilterCritWrk.EOCF_FILTER_OPER.Visible = False;
      If Not %This.IsInit Then
         %This.ClearFilterRow(&rowFilterCriteria);
      End-If;
      &objFilterField.IsVisible = False;
      Return;
   End-If;
   
   &arFilterInputFields = %This.GetFilterInputFields(&rowFilterCriteria);
   
   <*--------------------------------------------------------------------+
   | Unhide appropriate fields. Occurs [2] is only for BETWEEN operator  |
   +---------------------------------------------------------------------*>
   &recFilterCritWrk.EOCF_FILTER_OPER.Visible = True;
   &arFilterInputFields [1].Visible = True;
   If &arFilterInputFields [2] <> Null Then
      &arFilterInputFields [2].Visible = True;
   End-If;
   
   &recFilterCritWrk.EOCF_PB_HELP.Visible = (&objFilterField.HelpMessageSetNumber > 0 And
      &objFilterField.HelpMessageNumber > 0);
   
   
   <*--------------------------------------------------------------------+
   | If DateTime field show separate date and time entry fields          |
   | However, EOCF_VALUE is still inside &arFilterInputFields[]            |
   | AcceptCreitria() concatenates date and time fields to EOCF_VALUE      |
   +---------------------------------------------------------------------*>
   If &recFilterCritWrk.FIELDTYPE.Value = &numDataType_DTTM Then
      /* If &objFilterField.FieldType = &numDataType_DTTM Then */
      &arFilterInputFields [1].Visible = False;
      &recFilterCritWrk.EOCF_VALUE_DATE.Visible = True;
      &recFilterCritWrk.EOCF_VALUE_TIME.Visible = True;
      If &arFilterInputFields [2] <> Null Then
         &arFilterInputFields [2].Visible = False;
         &recFilterCritWrk.EOCF_VALUE_DATE2.Visible = True;
         &recFilterCritWrk.EOCF_VALUE_TIME2.Visible = True;
      End-If;
   End-If;
   
   <** COMMENTED BY SUJAY **
  
   <*--------------------------------------------------------------------+;
   | Show the Transfer-to-other-component button?                        |;
   +---------------------------------------------------------------------*>
   If &objFilterField.IsDrillButton Then
      &recFilterCritWrk.PB_COMP_DRILL.Visible = True;
   End-If;

**>
   
   If &objFilterField.IsRequired Then
      &recFilterCritWrk.EOCF_FILTER_OPER.ShowRequiredFieldCue = True;
   Else
      &recFilterCritWrk.EOCF_FILTER_OPER.ShowRequiredFieldCue = False;
   End-If;
   
   If &objFilterField.IsDisabledByApplication Then
      &arFilterInputFields [1].Enabled = False;
      &arFilterInputFields [1].Enabled = False;
      &recFilterCritWrk.EOCF_FILTER_OPER.Enabled = False;
   End-If;
   
   If &recFilterCritWrk.EOCF_CB_HIDDEN.Value = "Y" Then
      &arFilterInputFields [1].Visible = False;
      &arFilterInputFields [1].Visible = False;
      &recFilterCritWrk.EOCF_FILTER_OPER.Visible = False;
      Return;
   End-If;
   
   &objFilterField.IsVisible = True;
   
   If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Then
      %This.FillDropdownListBox(&rowFilterCriteria);
   End-If;
   
end-method;


<*----------------------------------------------------------------------------------+
| private method GetFilterInputFields()                                             |
| Returns array of 2 field objects.                                                 |
| Occur 1 = the input field                                                         |
| Occur 2 = second input field (for between operator only, is null if not between)  |
+-----------------------------------------------------------------------------------*>
method GetFilterInputFields
   /+ &rowFilterCriteria as Row +/
   /+ Returns Array of Field +/
   
   Local Record &recFilterCritWrk;
   Local array of Field &arFilterInputFields;
   Local Field &fldNull;
   
   &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
   &arFilterInputFields = CreateArrayRept(&fldNull, 0);
   &recFilterCritWrk.EOCF_FILTER_OPER.Enabled = True;
   
   <*-------------------------------------------------------+
   | Constant Value                                         |
   +--------------------------------------------------------*>
   If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeConstant Then
      &recFilterCritWrk.EOCF_FILTER_OPER.Value = &recFilterCritWrk.EOCF_DEFAULT_OPER.Value;
      &recFilterCritWrk.EOCF_FILTER_OPER.Enabled = False;
      &arFilterInputFields.Push(&recFilterCritWrk.EOCF_FLT_CONSTANT);
      &arFilterInputFields.Push( Null);
      Return (&arFilterInputFields);
   End-If;
   
   <*-------------------------------------------------------+
   | Display Only                                           |
   +--------------------------------------------------------*>
   If &recFilterCritWrk.EOCF_CB_DISP_ONLY.Value = "Y" Then
      &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_EQUAL;
      &recFilterCritWrk.EOCF_FILTER_OPER.DisplayOnly = True;
      &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE);
      &arFilterInputFields [1].DisplayOnly = True;
      &arFilterInputFields.Push( Null);
      Return (&arFilterInputFields);
   End-If;
   
   <*-------------------------------------------------------+
   | List                                                   |
   +--------------------------------------------------------*>
   If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IN Or
         &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_IN Then
      &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_LIST);
      
      If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeYesNo Then
         &arFilterInputFields.Push(&recFilterCritWrk.EOCF_PB_FLT_PRMPT3);
      Else
         &arFilterInputFields.Push( Null);
      End-If;
   Else
      
      <*-------------------------------------------------------+
      | Prompt Edit                                            |
      +--------------------------------------------------------*>
      If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Then
         If &m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPTP);
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PRMPT2P);
         Else
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPT);
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPT2);
         End-If;
         
      Else
         
         <*-------------------------------------------------------+
         | Date Edit                                              |
         +--------------------------------------------------------*>
         If &recFilterCritWrk.FIELDTYPE.Value = &numDataType_DATE Then
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_DATE);
            &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_DATE2);
            
         Else
            
            <*-------------------------------------------------------+
            | XLAT Edit                                              |
            +--------------------------------------------------------*>
            If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Then
               
               If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_BEGINS_WITH Or
                     &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_CONTAINS Then
                  If &m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPTP);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PRMPT2P);
                  Else
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPT);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_PROMPT2);
                  End-If;
               Else
                  If &m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_XLATP);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_XLAT2P);
                  Else
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_XLAT);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_XLAT2);
                  End-If;
               End-If;
            Else
               
               <*-------------------------------------------------------+
               | Dropdown list                                          |
               +-------------------------------------------------------*>
               If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Then
                  If &m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VAL_DROPDOWNP);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VAL_DROPDOW2P);
                  Else
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VAL_DROPDOWN);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VAL_DROPDOWN2);
                  End-If;
               Else
                  
                  <*-------------------------------------------------------+
                  | Yes/No Edit                                            |
                  +-------------------------------------------------------*>
                  If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeYesNo Then
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_YESNO);
                     &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE_YESNO2);
                  Else
                     
                     <*-------------------------------------------------------+
                     | No Edit                                                |
                     +-------------------------------------------------------*>
                     If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDirectory Then
                        
                     Else
                        If &m_aryHighOrderKeys.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
                           &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUEP);
                           &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE2P);
                        Else
                           &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE);
                           &arFilterInputFields.Push(&recFilterCritWrk.EOCF_VALUE2);
                        End-If;
                     End-If;
                     
                  End-If;
               End-If;
            End-If;
         End-If;
      End-If;
      
      <*-------------------------------------------------------+
      | If operator is not BETWEEN then...                     |
      +--------------------------------------------------------*>
      If &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_BETWEEN Then
         &arFilterInputFields.Pop();
         &arFilterInputFields.Push( Null);
      End-If;
      
   End-If;
   
   Return &arFilterInputFields;
end-method;


<*----------------------------------------------------------------------------------+
| public method ShowHideFilterRow()                                                 |
+-----------------------------------------------------------------------------------*>
method ShowHideFilterRow
   /+ &bShowRow as Boolean, +/
   /+ &rowCurrent as Row +/
   
   Local Record &recFilterCritWrk = &rowCurrent.GetRecord(Record.EOCF_FLTCRT_WRK);
   
   Local EOCF_FILTER:FilterField &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   
   If &bShowRow Then
      &objFilterField.IsHiddenByApplication = False;
      %This.ShowHideFilterInputFields(&rowCurrent);
   Else
      &objFilterField.IsHiddenByApplication = True;
      %This.ClearFilterRow(&rowCurrent);
      %This.HideFields(&rowCurrent.EOCF_FLTCRT_WRK);
      &objFilterField.IsVisible = False;
   End-If;
   
end-method;


<*----------------------------------------------------------------------------------+
| public method EnableDisableFilterRow()                                            |
+-----------------------------------------------------------------------------------*>
method EnableDisableFilterRow
   /+ &bEnableRow as Boolean, +/
   /+ &rowCurrent as Row +/
   
   Local Record &recFilterCritWrk = &rowCurrent.GetRecord(Record.EOCF_FLTCRT_WRK);
   
   Local EOCF_FILTER:FilterField &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   
   If &bEnableRow Then
      &objFilterField.IsDisabledByApplication = False;
   Else
      &objFilterField.IsDisabledByApplication = True;
   End-If;
   
   %This.ShowHideFilterInputFields(&rowCurrent);
   
end-method;



<*------------------------------------------------------+
| Private method HideFields                             |
+-------------------------------------------------------*>
method HideFields
   /+ &recFilterCritWrk as Record +/
   
   &recFilterCritWrk.BUSINESS_UNIT.Visible = False;
   &recFilterCritWrk.SETID.Visible = False;
   &recFilterCritWrk.OPRID.Visible = False;
   &recFilterCritWrk.EFFDT.Visible = False;
   /* &recFilterCritWrk.KEY1_FLD_VAL.Visible = False;
   &recFilterCritWrk.KEY2_FLD_VAL.Visible = False;
   &recFilterCritWrk.KEY3_FLD_VAL.Visible = False;  */
   &recFilterCritWrk.EO_VALUE.Visible = False;
   &recFilterCritWrk.SQLTEXT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE.Visible = False;
   &recFilterCritWrk.EOCF_VALUEP.Visible = False;
   rem &recFilterCritWrk.EOCF_VALUE_CONT.Visible = False;
   rem &recFilterCritWrk.EOCF_VALUE_SITE.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPTP.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_DATE.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_TIME.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLATP.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWN.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWNP.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_YESNO.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_LIST.Visible = False;
   &recFilterCritWrk.EOCF_VALUE2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE2P.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PRMPT2P.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_DATE2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_XLAT2P.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOWN2.Visible = False;
   &recFilterCritWrk.EOCF_VAL_DROPDOW2P.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_YESNO2.Visible = False;
   &recFilterCritWrk.EOCF_VALUE_PROMPT3.Visible = False;
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT3.Visible = False;
   &recFilterCritWrk.EOCF_FILTER_OPER.Visible = False;
   &recFilterCritWrk.TEXT254.Visible = False;
   
end-method;



<*-----------------------------------------------------+
| Private method BlankOutFields                        |
+------------------------------------------------------*>
method BlankOutFields
   /+ &recFilterCritWrk as Record +/
   
   <*------------------------------------------------------+
   | Reset the prompt control and critiera value fields.   |
   +-------------------------------------------------------*>
   &recFilterCritWrk.BUSINESS_UNIT.Value = "";
   &recFilterCritWrk.SETID.Value = "";
   &recFilterCritWrk.OPRID.Value = %UserId;
   &recFilterCritWrk.EFFDT.Value = %Date;
   /* &recFilterCritWrk.KEY1_FLD_VAL.Value = "";
   &recFilterCritWrk.KEY2_FLD_VAL.Value = "";
   &recFilterCritWrk.KEY3_FLD_VAL.Value = ""; */
   &recFilterCritWrk.EO_VALUE.Value = "";
   &recFilterCritWrk.SQLTEXT.Value = "";
   &recFilterCritWrk.EOCF_VALUE.Value = "";
   &recFilterCritWrk.EOCF_VALUEP.Value = "";
   /*
   &recFilterCritWrk.EOCF_VALUE_CONT.Value = "";
   &recFilterCritWrk.EOCF_VALUE_SITE.Value = "";
*/
   &recFilterCritWrk.EOCF_VALUE_PROMPT.Value = "";
   &recFilterCritWrk.EOCF_VALUE_PROMPTP.Value = "";
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT.Value = "";
   &recFilterCritWrk.EOCF_VALUE_DATE.SetDefault();
   &recFilterCritWrk.EOCF_VALUE_TIME.SetDefault();
   &recFilterCritWrk.EOCF_VALUE_XLAT.Value = "";
   &recFilterCritWrk.EOCF_VALUE_XLATP.Value = "";
   &recFilterCritWrk.EOCF_VAL_DROPDOWN.Value = "";
   &recFilterCritWrk.EOCF_VAL_DROPDOWNP.Value = "";
   &recFilterCritWrk.EOCF_VALUE_YESNO.Value = "";
   &recFilterCritWrk.EOCF_VALUE_LIST.Value = "";
   &recFilterCritWrk.EOCF_VALUE2.Value = "";
   &recFilterCritWrk.EOCF_VALUE2P.Value = "";
   &recFilterCritWrk.EOCF_VALUE_PROMPT2.Value = "";
   &recFilterCritWrk.EOCF_VALUE_PRMPT2P.Value = "";
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT2.Value = "";
   &recFilterCritWrk.EOCF_VALUE_DATE2.SetDefault();
   &recFilterCritWrk.EOCF_VALUE_TIME2.SetDefault();
   &recFilterCritWrk.EOCF_VALUE_XLAT2.Value = "";
   &recFilterCritWrk.EOCF_VALUE_XLAT2P.Value = "";
   &recFilterCritWrk.EOCF_VAL_DROPDOWN2.Value = "";
   &recFilterCritWrk.EOCF_VAL_DROPDOW2P.Value = "";
   &recFilterCritWrk.EOCF_VALUE_YESNO2.Value = "";
   &recFilterCritWrk.EOCF_VALUE_PROMPT3.Value = "";
   &recFilterCritWrk.EOCF_PB_FLT_PRMPT3.Value = "";
   &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
   /*
   &recFilterCritWrk.BO_ID.Value = 0;
   &recFilterCritWrk.ROLE_TYPE_ID.Value = 0;
   &recFilterCritWrk.BO_ID_CUST.Value = 0;
   &recFilterCritWrk.ROLE_TYPE_ID_CUST.Value = 0;
   &recFilterCritWrk.BO_ID_CONTACT.Value = 0;
   &recFilterCritWrk.ROLE_TYPE_ID_CNTCT.Value = 0;
*/
end-method;


<*----------------------------------------------------------------------------------+
| private method ShowHideFilterFields()                                             |
+-----------------------------------------------------------------------------------*>
method ShowHideFilterFields
   Local array of string &arHideFilterFields;
   Local integer &i;
   Local Record &recFilterCritWrk;
   REM Local EOCF_FILTER:FilterField &objFilterField;
   REM Local string &strOldOperatorValue;
   
   &arHideFilterFields = Split(%This.FilterUser.FilterFieldList, &strFieldDelimiter);
   rem GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ShowAllRows();
   For &i = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount To 1 Step - 1
      &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i).GetRecord(Record.EOCF_FLTCRT_WRK);
      If &arHideFilterFields.Find(&recFilterCritWrk.FIELDNAME.Value) > 0 Then
         
         %This.BlankOutFields(&recFilterCritWrk);
         
         REM &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
         
         <*------------------------------------------------------+
         | Reset the operator appropriately.                     |
         +-------------------------------------------------------*>
         %This.FillOperatorList(&recFilterCritWrk);
         
         rem GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i).Visible = False;
      End-If;
      %This.ShowHideFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i));
   End-For;
   GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).Sort(EOCF_FLTCRT_WRK.FIELDNUM, "A");
end-method;


<*----------------------------------------------------------------------------------+
| private method SetSavedFiltersDropDownValues()                                    |
+-----------------------------------------------------------------------------------*>
method SetSavedFiltersDropDownValues
   Local array of EOCF_FILTER:SavedFilter &arSavedFilters;
   Local integer &i;
   
   &arSavedFilters = %This.FilterUser.SavedFilters;
   GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.ClearDropDownList();
   
   For &i = 1 To &arSavedFilters.Len
      
      GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.AddDropDownItem(&arSavedFilters [&i].FilterName, &arSavedFilters [&i].FilterName);
   End-For;
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | private method IsSavedFilter()                                                    |;
REM +-----------------------------------------------------------------------------------+;
method IsSavedFilter
   /+ &strFilterName as String +/
   /+ Returns Boolean +/
   
   Local array of EOCF_FILTER:SavedFilter &arSavedFilters;
   Local integer &i;
   &arSavedFilters = %This.FilterUser.SavedFilters;
   
   &i = &arSavedFilters.Find(&strFilterName);
   For &i = 1 To &arSavedFilters.Len
      If &arSavedFilters [&i].FilterName = &strFilterName Then
         Return True;
      End-If;
   End-For;
   
   Return False;
   
end-method;


<*----------------------------------------------------------------------------------+
| private method LoadFilter()                                                       |
+-----------------------------------------------------------------------------------*>
method LoadFilter
   /+ &strFilterName as String +/
   /+ Returns Boolean +/
   
   Local EOCF_FILTER:SavedFilter &objSavedFilter;
   Local string &strFilterCriteriaText, &strFieldValue;
   Local array of string &arFilterCriteriaText;
   Local array of string &arFilterCriteriaField;
   Local array of array of string &arFilterCriteriaFields;
   Local array of Field &arFilterInputFields;
   Local string &strStoreFormattedList;
   Local array of any &arValuesArray;
   Local integer &i, &j, &nSpace;
   Local Row &rowFilterCriteria;
   Local Record &recFilterCritWrk;
   Local EOCF_FILTER:FilterField &objFilterField;
   Local boolean &bDoFieldChange, &bLastCriteria;
   Local string &strFilterDistCriteriaText;
   Local array of string &arFilterDistCriteriaText;
   Local string &sTimeValue, &sTimeSource;
   
   
   &IsCriteria = False;
   
   If %This.IsInit Then
      If %This.FilterUser.FilterDefn.IsUserConfigOption Then
         
         If %This.FilterUser.FillOption = "" Then
            
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
               &bLastCriteria = True;
            End-If;
            
         Else
            
            If %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA Then
               &bLastCriteria = True;
            End-If;
         End-If;
      Else
         If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
            &bLastCriteria = True;
         End-If;
      End-If;
      
      If %This.IsReturnToSearch Then
         &bLastCriteria = True;
      End-If;
      
      If &bLastCriteria Then
         &strFilterCriteriaText = %This.FilterUser.LastUsedCriteria;
         &strFilterDistCriteriaText = %This.FilterUser.LastUsedDistCriteria;
         If None(&strFilterCriteriaText, &strFilterDistCriteriaText, &strFilterName) Then
            Return True;
         End-If;
      End-If;
   End-If;
   
   If All(&strFilterName) Then
      &objSavedFilter = %This.FilterUser.GetSavedFilter(&strFilterName);
      If &objSavedFilter = Null Then
         %This.SetSavedFiltersDropDownValues();
         GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
         Return True;
      End-If;
   End-If;
   
   If Not %This.IsInit Then
      %This.ClearFilter();
   End-If;
   If None(&strFilterCriteriaText) And
         All(&strFilterName) Then
      &strFilterCriteriaText = &objSavedFilter.FilterCriteriaText;
   End-If;
   
   <*----------------------------------------------------------+
   | Append any constant values to the Filter Criteria Text    |
   +-----------------------------------------------------------*>
   If &m_bConstantsExist Then
      For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
         If GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.PROMPT_EDITTYPE.Value = &strPromptEditTypeConstant Then
            If All(&strFilterCriteriaText) Then
               &strFilterCriteriaText = &strFilterCriteriaText | &strFieldDelimiter;
            End-If;
            &strFilterCriteriaText = &strFilterCriteriaText | GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.FIELDNAME.Value | &strValueDelimiter | &strOper_EQUAL | &strValueDelimiter | GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.EOCF_FLT_CONSTANT.Value;
         End-If;
      End-For;
   End-If;
   
   If All(&strFilterCriteriaText) Then
      
      &IsCriteria = True;
      
      SetUserFormatListSeparator(&strUserListDelimiter);
      SetStoreFormatListSeparator(&strValueDelimiter);
      
      <*----------------------------------------------------------+
      | Split the criteria text into a 2-dimensional array        |
      +-----------------------------------------------------------*>
      &arFilterCriteriaText = Split(&strFilterCriteriaText, &strFieldDelimiter);
      &arFilterCriteriaFields = CreateArrayRept(&arFilterCriteriaField, 0);
      For &i = 1 To &arFilterCriteriaText.Len
         &arFilterCriteriaField = Split(&arFilterCriteriaText [&i], &strValueDelimiter);
         If &arFilterCriteriaField.Len >= 2 Then
            &arFilterCriteriaFields.Push(&arFilterCriteriaField);
         End-If;
      End-For;
      
      <*----------------------------------------------------------------------+
      | Loop thru Fields rowset and search for the field in the 2-dim array   |
      +-----------------------------------------------------------------------*>
      For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
         &bDoFieldChange = False;
         &strFieldValue = "";
         &rowFilterCriteria = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i);
         &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
         &j = &arFilterCriteriaFields.Find(&recFilterCritWrk.FIELDNAME.Value);
         If All(&j) Then
            
            <*----------------------------------------------------------+
            | Criteria for this field was found                         |
            +-----------------------------------------------------------*>
            
            Evaluate &arFilterCriteriaFields [&j][2]
            When = &strOper_BEGINS_WITH
            When = &strOper_EQUAL
            When = &strOper_NOT_EQUAL
            When = &strOper_LESS_THAN
            When = &strOper_GREATER_THAN
            When = &strOper_LESS_THAN_EQUAL
            When = &strOper_GREATER_THAN_EQUAL
            When = &strOper_CONTAINS
            When = &strOper_BETWEEN
            When = &strOper_IN
            When = &strOper_IS_BLANK
            When = &strOper_NOT_BLANK
            When = &strOper_NOT_IN
               &recFilterCritWrk.EOCF_FILTER_OPER.Value = &arFilterCriteriaFields [&j][2];
               Break;
            End-Evaluate;
            
            &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
            %This.ShowHideFilterInputFields(&rowFilterCriteria);
            SetFieldTypeForConversions(&objFilterField.FieldType);
            
            If &arFilterCriteriaFields [&j].Len > 2 Or
                  (&arFilterCriteriaFields [&j].Len = 2 And
                     (&recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IS_BLANK Or
                        &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_BLANK Or
                        &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_IN)) Then
               If &arFilterCriteriaFields [&j].Len > 2 Then
                  &strFieldValue = &arFilterCriteriaFields [&j][3];
               End-If;
               
               &arFilterInputFields = %This.GetFilterInputFields(&rowFilterCriteria);
               
               
               <*---------------------------------------------------+
               | Operator = IN                                      |
               +----------------------------------------------------*>
               If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IN Then
                  &strStoreFormattedList = &arFilterCriteriaFields [&j].Subarray(3, &arFilterCriteriaFields [&j].Len - 2).Join(&strValueDelimiter, "", "");
                  If IsStoreFormattedList(&strStoreFormattedList) Then
                     &arValuesArray = StoreFormatToArray(&strStoreFormattedList);
                     &arFilterInputFields [1].Value = ArrayToUserFormat(&arValuesArray);
                     &bDoFieldChange = True;
                  Else
                     /* error ??? */
                  End-If;
               Else
                  
                  <*----------------------------------------------------+
                  | Operator <> IN                                     |
                  +----------------------------------------------------*>
                  If All(&strFieldValue) Then
                     If IsStoreFormattedValue(&strFieldValue) Then
                        If &arFilterInputFields [1].Type = "CHAR" Then
                           &arFilterInputFields [1].Value = ValueToUserFormat(StoreFormatToValue(&arFilterCriteriaFields [&j][3]));
                           
                           If &objFilterField.FieldType = &numDataType_DTTM Then
                              
                              %This.SetDateAndTimeFields(&arFilterInputFields [1], &recFilterCritWrk.EOCF_VALUE_DATE, &recFilterCritWrk.EOCF_VALUE_TIME, &arFilterCriteriaFields [&j][3]);
                              
                              <*---------------------------------------------+
                              | DateTime Fields are special                  |
                              | Separate them into two date and time fields  |
                              +----------------------------------------------*>
                              
                           End-If;
                        Else
                           
                           &arFilterInputFields [1].Value = StoreFormatToValue(&arFilterCriteriaFields [&j][3]);
                        End-If;
                        &bDoFieldChange = True;
                     Else
                        /*  error ???*/
                     End-If;
                  Else
                     If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IS_BLANK Or
                           &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_BLANK Or
                           &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_IN Then
                        &bDoFieldChange = True;
                     End-If;
                     
                  End-If;
                  
                  <*---------------------------------------------------+
                  | Operator = BETWEEN                                 |
                  +----------------------------------------------------*>
                  If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_BETWEEN And
                        &arFilterCriteriaFields [&j].Len > 3 Then
                     If All(&arFilterCriteriaFields [&j][4]) Then
                        If IsStoreFormattedValue(&arFilterCriteriaFields [&j][4]) Then
                           If &arFilterInputFields [2].Type = "CHAR" Then
                              &arFilterInputFields [2].Value = ValueToUserFormat(StoreFormatToValue(&arFilterCriteriaFields [&j][4]));
                              
                              If &objFilterField.FieldType = &numDataType_DTTM Then
                                 <*---------------------------------------------+
                                 | DateTime Fields are special                  |
                                 | Separate them into two date and time fields  |
                                 +----------------------------------------------*>
                                 %This.SetDateAndTimeFields(&arFilterInputFields [2], &recFilterCritWrk.EOCF_VALUE_DATE2, &recFilterCritWrk.EOCF_VALUE_TIME2, &arFilterCriteriaFields [&j][4]);
                              End-If;
                              
                           Else
                              &arFilterInputFields [2].Value = StoreFormatToValue(&arFilterCriteriaFields [&j][4]);
                           End-If;
                           &bDoFieldChange = True;
                        Else
                           /*  error ???*/
                        End-If;
                     End-If;
                  End-If;
               End-If;
            End-If;
         End-If;
         
         If &bDoFieldChange = True Then
            If &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = &stradvBasicLookup_BOTH Or
                  &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value Then
               %This.ValidateCriteria(&rowFilterCriteria);
               %This.AcceptCriteria(&rowFilterCriteria);
            End-If;
         End-If;
      End-For;
   End-If;
   
   <** COMMENTED BY SUJAY **

   <*-----------------------------------------------------------------+
   | Remember which data distribution rule checkboxes are checked-on  |
   +------------------------------------------------------------------*>
   If GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount > 1 Or
         (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 1 And
            All(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.DESCR.Value)) Then
      
      &strFilterDistCriteriaText = "";
      If %This.IsInit Then
         &strFilterDistCriteriaText = %This.FilterUser.LastUsedDistCriteria;
      End-If;
      If None(&strFilterDistCriteriaText) And
            &objSavedFilter <> Null Then
         &strFilterDistCriteriaText = &objSavedFilter.FilterDistCriteriaText;
      End-If;
      
      If All(&strFilterDistCriteriaText) Then
         &arFilterDistCriteriaText = Split(&strFilterDistCriteriaText, &strFieldDelimiter);
      End-If;
      For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount
         GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&i).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "N";
         If All(&strFilterDistCriteriaText) Then
            &j = &arFilterDistCriteriaText.Find(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&i).EOEC_DS_RULE_VW.EOEC_RULENAME.Value);
            If All(&j) Then
               GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&i).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "Y";
            End-If;
         End-If;
      End-For;
   End-If;

* COMMENT ENDED BY SUJAY *>
   
   GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = &strFilterName;
   Return True;
   
end-method;

<*---------------------------------------------+
| Private Method SaveDateAndTimeFields         |
+----------------------------------------------*>
method SetDateAndTimeFields
   /+ &fldFilterField as Field, +/
   /+ &fldDateField as Field, +/
   /+ &fldTimeField as Field, +/
   /+ &strCriteria as String +/
   
   Local number &nSpace = Find(" ", &fldFilterField.Value);
   If &nSpace > 0 Then
      Local string &sTimeSource = Substring(&strCriteria, 9, 12);
      &fldDateField.Value = DateValue(Substring(&fldFilterField.Value, 1, &nSpace - 1));
      If &sTimeSource = "000000000000" Then
         &fldTimeField.Value = "";
      Else
         &fldTimeField.Value = TimeValue(Substring(&fldFilterField.Value, &nSpace + 1, Len(&fldFilterField.Value)));
      End-If;
   Else
      &fldDateField.Value = DateValue(&fldFilterField.Value);
      &fldTimeField.Value = "";
   End-If;
end-method;

<*----------------------------------------------------------------------------------+
| private method SaveFilter()                                                       |
+-----------------------------------------------------------------------------------*>
method SaveFilter
   /+ &strFilterName as String +/
   /+ Returns Boolean +/
   If None(&strFilterName) Then
      Warning MsgGetText(18112, 5035, "No Search Name was Entered. The Search Criteria was not saved.");
      Return True;
   End-If;
   Local EOCF_FILTER:SavedFilter &objSavedFilter;
   &objSavedFilter = create EOCF_FILTER:SavedFilter(%This.FilterUser, &strFilterName);
   &objSavedFilter.FilterCriteriaText = %This.FilterCriteriaText;
   &objSavedFilter.FilterLookupType = GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value;
   rem  &objSavedFilter.FilterDistCriteriaText = %This.FilterDistCriteriaText;
   Return &objSavedFilter.Save();
end-method;


<*----------------------------------------------------------------------------------+
| private method DeleteFilter()                                                     |
+-----------------------------------------------------------------------------------*>
method DeleteFilter
   /+ &strFilterName as String +/
   /+ Returns Boolean +/
   Local EOCF_FILTER:SavedFilter &objSavedFilter;
   &objSavedFilter = %This.FilterUser.GetSavedFilter(&strFilterName);
   If &objSavedFilter = Null Then
      Return False;
   Else
      If &objSavedFilter.Delete() Then
         If %This.FilterUser.FillOption = &strFillOption_DEFAULT And
               %This.FilterUser.DefaultSavedFilter = &strFilterName Then
            %This.FilterUser.DefaultSavedFilter = "";
            %This.FilterUser.FillOption = &strFillOption_NOFILL;
            If %This.FilterUser.Save() Then
            End-If;
         End-If;
         Return True;
      Else
         Return False;
      End-If;
   End-If;
end-method;

<*----------------------------------------------------------------------------------+
| private method NoSearchFields                                                     |
+-----------------------------------------------------------------------------------*>
method NoSearchFields
   /+ Returns Boolean +/
   
   Local integer &i;
   Local array of Field &aryFilterField;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      &aryFilterField = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
      If All(&aryFilterField [1].Value) Then
         Return False;
      End-If;
   End-For;
   
   Return True;
   
end-method;



<*----------------------------------------------------------------------------------+
| private method ShowHideRelatedResultFields()                                      |
+-----------------------------------------------------------------------------------*>
method ShowHideRelatedResultFields
   
   Local array of string &aryUnhide;
   Local Record &recFilterCritWrk;
   Local integer &i, &j, &FindPos;
   Local Grid &grdGrid;
   
   try
      
      &grdGrid = GetGrid(%Page, &m_strDefinitionRecordName);
      
      For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
         &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK;
         If All(&recFilterCritWrk.EOCF_UNHIDE.Value) Then
            &aryUnhide = Split(&recFilterCritWrk.EOCF_UNHIDE.Value, ";");
            If &m_arySearchFields <> Null Then
               If &m_arySearchFields.Len > 0 Then
                  &FindPos = &m_arySearchFields.Find(&recFilterCritWrk.FIELDNAME.Value);
               End-If;
            End-If;
            For &j = 1 To &aryUnhide.Len
               
               If &FindPos > 0 Then
                  &grdGrid.GetColumn(&aryUnhide [&j]).Visible = True;
               Else
                  &grdGrid.GetColumn(&aryUnhide [&j]).Visible = False;
               End-If;
               
            End-For;
         End-If;
         
      End-For;
      
   catch Exception &exAny
   end-try;
   
end-method;


<*----------------------------------------------------------------------------------+
| private method PreExecuteFilter()                                                 |
+-----------------------------------------------------------------------------------*>
method PreExecuteFilter
   Local integer &i, &j;
   Local string &strPanelFieldName;
   
   &sComponentMoreRowsMessageText = "";
   
   %This.NumberOfRowsInGrid = 0;
   &nMaxRows = %This.FilterUser.FilterDefn.MaxRowsToFetch;
   
   If &nMaxRows < 1 Then
      &nMaxRows = &numDefaultMaxRows;
   End-If;
   
   <*-----------------------------------------------------------+
   |  Check Option to show error if no Search Criteria          |
   +------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.SearchAllOrError = "E" And
         Not %This.IsInit Then
      If %This.NoSearchFields() Then
         Local number &nErrorMessageNbr = %This.FilterUser.FilterDefn.NoCriteriaMessageNumber;
         Local number &nErrorMessageSet = %This.FilterUser.FilterDefn.NoCriteriaMessageSetNumber;
         If &nErrorMessageNbr <= 0 Or
               &nErrorMessageSet <= 0 Then
            MessageBox(0, "", 18112, 5036, "You must enter at least one search field before pressing the Search button.");
            &bStopExecute = True;
         Else
            MessageBox(0, "", &nErrorMessageSet, &nErrorMessageNbr, "You must enter at least one search field before pressing the Search button.");
            &bStopExecute = True;
         End-If;
      End-If;
   End-If;
   
end-method;


<*----------------------------------------------------------------------------------+
| private method PostExecuteFilter                                                  |
+-----------------------------------------------------------------------------------*>
method PostExecuteFilter
   /+ &intRows as Integer +/
   
   Local integer &i, &j;
   Local string &strPanelFieldName;
   Local boolean &bEmptyFirstRow;
   
   
   /** &sComponentMoreRowsMessageText is set to a help text if the **/
   /** select clause retrieves more rows than the max limit.       **/
   
   If %This.FilterUser.FilterDefn.ShowMoreDataHelpText = "Y" And
         %This.FilterUser.FilterDefn.MoreRowsRecName <> "" And
         %This.FilterUser.FilterDefn.MoreRowsFieldName <> "" And
         All(&sComponentMoreRowsMessageText) Then
      GetRecord(@("Record." | %This.FilterUser.FilterDefn.MoreRowsRecName)).GetField(@("Field." | %This.FilterUser.FilterDefn.MoreRowsFieldName)).Value = &sComponentMoreRowsMessageText;
   End-If;
   
   <*---------------------------------------+
   |  Disable all fields if empty rowset    |
   +----------------------------------------*>
   If (GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName)).RowCount = 1 And
         GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName))(1).IsNew) And
         &intRows < 2 Then
      &bEmptyFirstRow = True;
      For &i = 1 To GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName))(1).RecordCount
         For &j = 1 To GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName))(1).GetRecord(&i).FieldCount
            GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName))(1).GetRecord(&i).GetField(&j).Enabled = False;
         End-For;
      End-For;
   End-If;
   
   If &m_bUnhideFieldsExist Then
      %This.ShowHideRelatedResultFields();
   End-If;
   
   If Not %This.IsInit And
         %CompIntfcName = "" Then
      %This.SaveLastUsedCriteria();
   End-If;
   
   <*----------------------------------------------------------------+
   | put the component buffer, and FilterForm object in global cache |
   +-----------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.IsCacheOption Then
      If &gobjFilterFormCache <> Null Then
         
         &gobjFilterFormCache.ComponentName = %This.FilterUser.FilterDefn.ComponentName;
         &gobjFilterFormCache.Market = %This.FilterUser.FilterDefn.Market;
         &gobjFilterFormCache.PageName = %This.FilterUser.FilterDefn.PageName;
         &gobjFilterFormCache.RecordName = &m_strDefinitionRecordName;
         
         &gobjFilterFormCache.SaveComponentBuffer();
         
         &gobjFilterFormCache.SaveFilterForm(%This);
         
      End-If;
      
   End-If;
   
   
   <*----------------------------------------------------------------+
   | If one search result row, try to go to transaction              |
   +-----------------------------------------------------------------*>
   If &intRows = 1 And
         Not %This.IsInit And
         Not &bEmptyFirstRow Then
      Local string &sTransferMenu = %This.FilterUser.FilterDefn.TransferMenu;
      Local string &sTransferBar = %This.FilterUser.FilterDefn.TransferBar;
      Local string &sTransferItem = %This.FilterUser.FilterDefn.TransferItem;
      Local string &sTransferComponent = %This.FilterUser.FilterDefn.TransferComponent;
      Local string &sTransferPage = %This.FilterUser.FilterDefn.TransferPage;
      Local string &sTransferMode = %This.FilterUser.FilterDefn.TransferMode;
      
      If None(&sTransferMode) Then
         &sTransferMode = "U";
      End-If;
      
      If All(&sTransferMenu, &sTransferBar, &sTransferItem, &sTransferPage) Then
         
         Transfer( False, @("MenuName." | &sTransferMenu), @("BarName." | &sTransferBar), @("ItemName." | &sTransferItem), @("Page." | &sTransferPage), &sTransferMode, GetRowset(@("Scroll." | &m_strDefinitionRecordName))(1).GetRecord(@("Record." | &m_strDefinitionRecordName)));
         
      End-If;
   End-If;
   
   If %This.FilterUser.FilterDefn.CollapseWhenSearchOption = "Y" And
         &intRows > 0 And
         Not (&bEmptyFirstRow) Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = True;
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = False;
   End-If;
   
   try
      EOCF_FLTFRM_WRK.EOCF_PB_1.SetCursorPos(%Page);
   catch Exception &exAnyError
   end-try;
   
end-method;

<*----------------------------------------------------------------------------------+
| public method ExecuteFilter()                                                     |
+-----------------------------------------------------------------------------------*>
method ExecuteFilter
   Local string &sWhereClause;
   Local number &i;
   Local Rowset &rsTemp;
   &bStopExecute = False;
   
   
   GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName)).Flush();
   &rsTemp = CreateRowset(@("Record." | &m_strDefinitionRecordName));
   
   <** COMMENTED BY SUJAY **
  
   If Not %This.PassesDistRuleCheck() Then
      Return;
   End-If;
   
**>
   
   %This.PreExecuteFilter();
   
   If %This.bStopExecute Then
      Return;
   End-If;
   
   &sWhereClause = %This.WhereClause;
   
   Local integer &intRows = &rsTemp.Fill(&sWhereClause);
   
   If &intRows > 0 Then
      &rsTemp.CopyTo(GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName)));
   End-If;
   
   rem &intRows = GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName)).Select(@("Record." | &m_strDefinitionRecordName), &sWhereClause);
   
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FLT_SQL_STMT.Value = "SELECT * FROM PS_" | &m_strDefinitionRecordName | " FILL " | &sWhereClause;
   
   %This.PostExecuteFilter(&intRows);
   If %This.bStopExecute Then
      Return;
   End-If;
   
   %This.UserPostExecuteCode();
   
end-method;


<*----------------------------------------------------------------------------------+
| public stub method UserPostExecuteCode                                            |
+-----------------------------------------------------------------------------------*>
method UserPostExecuteCode
end-method;

<** COMMENTED BY SUJAY **

<*----------------------------------------------------------------------------------+
| private method PassesDistRuleCheck                                                |
+-----------------------------------------------------------------------------------*>
method PassesDistRuleCheck
   /+ Returns Boolean +/
   
   <* -----------------------------------------------------------------------+
   | Dont show results if Distr Rules Option indicates "no"                 |
   +------------------------------------------------------------------------ *>
   If %This.FilterUser.FilterDefn.SecureOption = "Y" And
         (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 0 Or
            (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 1 And
               None(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.DESCR.Value))) And
         Not %This.FilterUser.FilterDefn.IsShowResultsIfNoRules Then
      Return False;
   End-If;
   Return True;
end-method;

**>

<*----------------------------------------------------------------------------------+
| private method SaveLastUsedCriteria()                                             |
+-----------------------------------------------------------------------------------*>
method SaveLastUsedCriteria
   Local boolean &bDefaultFilter;
   %This.FilterUser.LastUsedCriteria = %This.FilterCriteriaText;
   rem  %This.FilterUser.LastUsedDistCriteria = %This.FilterDistCriteriaText;
   %This.FilterUser.LastUsedLookupType = EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value;
   
   If %This.FilterUser.FillOption = "" Then
      If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Then
         &bDefaultFilter = True;
      End-If;
   Else
      If %This.FilterUser.FillOption = &strFillOption_DEFAULT Then
         &bDefaultFilter = True;
      End-If;
   End-If;
   If Not &bDefaultFilter Then
      %This.FilterUser.DefaultSavedFilter = EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value;
   End-If;
   If GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "Y" Then
      %This.FilterUser.IsCaseSensitiveSearch = True;
   Else
      %This.FilterUser.IsCaseSensitiveSearch = False;
   End-If;
   If %This.FilterUser.Save() Then
   End-If;
end-method;

<** COMMENTED BY SUJAY **

<*----------------------------------------------------------------------------------+
| public method ClearFilterSpecify(&nRules as number)                               |
+-----------------------------------------------------------------------------------*>
method ClearFilterSpecify
   /+ &nRules as Number +/
   
   rem After calling ClearFilter, this method goes back through the distribution rules ;
   rem and sets the first &nRules to Y. ;
   
   Local number &nIterator = 0;
   
   %This.ClearFilter();
   For &nIterator = 1 To &nRules
      If GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount >= &nIterator And
            All(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&nIterator).EOEC_DS_RULE_VW.DESCR.Value) Then
         GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&nIterator).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "Y";
      End-If;
   End-For;
   
end-method;

**>

<*----------------------------------------------------------------------------------+
| public method ClearFilterRow()                                                    |
+-----------------------------------------------------------------------------------*>
method ClearFilterRow
   /+ &rowFilterCriteria as Row +/
   
   Local Record &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
   
   If &recFilterCritWrk.EOCF_CB_DISP_ONLY.Value = "Y" Then
      Return;
   End-If;
   
   %This.BlankOutFields(&recFilterCritWrk);
   
   <*------------------------------------------------------+
   | Reset the operator appropriately.                     |
   +-------------------------------------------------------*>
   &recFilterCritWrk.EOCF_FILTER_OPER.Value = &recFilterCritWrk.EOCF_DEFAULT_OPER.Value;
   
end-method;



<*----------------------------------------------------------------------------------+
| public method ClearFilter()                                                       |
+-----------------------------------------------------------------------------------*>
method ClearFilter
   
   Local integer &i;
   Local Row &rowFilterCriteria;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      &rowFilterCriteria = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i);
      %This.ClearFilterRow(&rowFilterCriteria);
      
      <*------------------------------------------------------+
      | Display the appropriate criteria value fields.        |
      +-------------------------------------------------------*>
      %This.ShowHideFilterInputFields(&rowFilterCriteria);
   End-For;
   
   /* %This.ClearBOFields(99999); */
   
   <** COMMENTED BY SUJAY **
   
   <*------------------------------------------------------+
   | Set first dist rule checkbox to Y and the rest to N   |
   +-------------------------------------------------------*>
   If GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount > 1 Or
         (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 1 And
            All(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.DESCR.Value)) Then
      GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "Y";
      If GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount > 1 Then
         For &i = 2 To GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount
            GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&i).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "N";
         End-For;
      End-If;
   End-If;

**>
   
end-method;


<*----------------------------------------------------------------------------------+
| get FilterCriteriaText                                                            |
+-----------------------------------------------------------------------------------*>
get FilterCriteriaText
   /+ Returns String +/
   Local integer &i;
   Local Record &recFilterCritWrk;
   Local string &strFilterCriteriaText;
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i).GetRecord(Record.EOCF_FLTCRT_WRK);
      If All(&recFilterCritWrk.EO_VALUE.Value) Or
            &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IS_BLANK Or
            &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_BLANK Or
            &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_IN Then
         &strFilterCriteriaText = &strFilterCriteriaText | &strFieldDelimiter | &recFilterCritWrk.EO_VALUE.Value;
      End-If;
   End-For;
   If Left(&strFilterCriteriaText, 1) = &strFieldDelimiter Then
      &strFilterCriteriaText = Right(&strFilterCriteriaText, Len(&strFilterCriteriaText) - 1);
   End-If;
   Return &strFilterCriteriaText;
end-get;

<** COMMENTED BY SUJAY **
 
<*----------------------------------------------------------------------------------+
| get FilterDistCriteriaText                                                        |
+-----------------------------------------------------------------------------------*>
get FilterDistCriteriaText
   /+ Returns String +/
   Local integer &i;
   Local Record &recFilterDistCritWrk;
   Local string &strFilterDistCriteriaText;
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).ActiveRowCount
      &recFilterDistCritWrk = GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).GetRow(&i).GetRecord(Record.EOEC_DS_RULE_VW);
      If &recFilterDistCritWrk.EOEC_SELECT_RULE.Value = "Y" Then
         &strFilterDistCriteriaText = &strFilterDistCriteriaText | &strFieldDelimiter | &recFilterDistCritWrk.EOEC_RULENAME.Value;
      End-If;
   End-For;
   If Left(&strFilterDistCriteriaText, 1) = &strFieldDelimiter Then
      &strFilterDistCriteriaText = Right(&strFilterDistCriteriaText, Len(&strFilterDistCriteriaText) - 1);
   End-If;
   Return &strFilterDistCriteriaText;
   
end-get;

**>

<*----------------------------------------------------------------------------------+
| get WhereClause                                                                   |
+-----------------------------------------------------------------------------------*>
get WhereClause
   /+ Returns String +/
   Local integer &i, &nCount;
   Local Record &recFilterCritWrk;
   Local string &strWhereClause, &strOrderBy, &strSortFields, &strSortField, &strascDesc, &strWhereAscDesc;
   Local string &strWhereClauseMarket;
   Local string &strDataSetRuleSQL, &strValueDisplay;
   Local array of Field &ary_fldFilterInputFields;
   Local array of string &arySortFields;
   Local Rowset &rsFilter;
   Local string &strSyncidText;
   
   &m_arySearchFields = CreateArrayRept("", 0);
   &rsFilter = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW);
   
   For &i = 1 To &rsFilter.ActiveRowCount
      &recFilterCritWrk = &rsFilter(&i).GetRecord(Record.EOCF_FLTCRT_WRK);
      
      If All(&recFilterCritWrk.SQLTEXT.Value) Then
         <*--------------------------------------+
         | This field has a search condition     |
         +---------------------------------------*>
         
         If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_BETWEEN Then
            &ary_fldFilterInputFields = %This.GetFilterInputFields(&rsFilter(&i));
            If Not All(&ary_fldFilterInputFields [1].Value, &ary_fldFilterInputFields [2].Value) Then
               Error MsgGet(18112, 5037, "Fill in both from and thru when operator is Between.", &recFilterCritWrk.FIELDLABEL.Value);
            End-If;
         End-If;
         
         If All(&recFilterCritWrk.EOCF_RECNAME_ALT.Value) And
               &recFilterCritWrk.EOCF_RECNAME_ALT.Value <> GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.RECNAME.Value Then
            <*-----------------------------------------------------------+
            | Not the main record, build a "SYNCID IN" condition         |
            +------------------------------------------------------------*>
            
            Local EOCF_FILTER:FilterField &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
            
            If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IS_BLANK Or
                  &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_IN Or
                  &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_EQUAL Then
               &strSyncidText = " AND NOT EXISTS "
            Else
               &strSyncidText = " AND EXISTS "
            End-If;
            
            &strWhereClause = &strWhereClause | &strSyncidText | "(SELECT 'X' FROM PS_" | &recFilterCritWrk.EOCF_RECNAME_ALT.Value | " WHERE FILL." | &objFilterField.JoinSearchFromField | "= " | &objFilterField.JoinSearchToField | " AND " | &recFilterCritWrk.SQLTEXT.Value | ")";
            
         Else
            <*-------------------------------------------------------------+
            | Is main record, build normal condition                       |
            +--------------------------------------------------------------*>
            &strWhereClause = &strWhereClause | " AND " | &recFilterCritWrk.SQLTEXT.Value;
            
         End-If;
         
         <*-------------------------------------------------------------+
         | Concatenate the informational line at top of display grid    |
         +--------------------------------------------------------------*>
         If All(&recFilterCritWrk.EOCF_VALUE_DISPLAY.Value) Then
            &strValueDisplay = &strValueDisplay | &recFilterCritWrk.EOCF_VALUE_DISPLAY.Value | " AND ";
         End-If;
         
         <*-------------------------------------------------------------+
         | Save Fields used in search in Instance array                 |
         +--------------------------------------------------------------*>
         If All(&recFilterCritWrk.EOCF_UNHIDE.Value) Then
            &m_arySearchFields.Push(&recFilterCritWrk.FIELDNAME.Value);
         End-If;
         
      Else
         
         <*--------------------------------------------+
         | Required Fields must be filled in           |
         +---------------------------------------------*>
         If &recFilterCritWrk.REQUIRED_FLG.Value = "Y" And
               ( Not %This.IsInit) And
               ( Not &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IS_BLANK) And
               ( Not &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_NOT_BLANK) And
               (&recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = "C" Or
                  &recFilterCritWrk.EOCF_ADV_BAS_LKUP.Value = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value) Then
            Error MsgGet(18112, 5054, &recFilterCritWrk.FIELDNAME.Value | " is required.", &recFilterCritWrk.FIELDNAME.Value);
         End-If;
         
      End-If;
   End-For;
   
   <*-----------------------------------------------------------+
   | Fill the informational line at top of display grid         |
   +------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.MoreRowsRecName <> "" And
         %This.FilterUser.FilterDefn.MoreRowsFieldName <> "" Then
      If All(&strValueDisplay) And
            %This.FilterUser.FilterDefn.MoreRowsRecName <> "" And
            %This.FilterUser.FilterDefn.MoreRowsFieldName <> "" Then
         &strValueDisplay = Substring(&strValueDisplay, 1, Len(&strValueDisplay) - 5);
         GetRecord(@("Record." | %This.FilterUser.FilterDefn.MoreRowsRecName)).GetField(@("Field." | %This.FilterUser.FilterDefn.MoreRowsFieldName)).Value = &strValueDisplay;
      Else
         GetRecord(@("Record." | %This.FilterUser.FilterDefn.MoreRowsRecName)).GetField(@("Field." | %This.FilterUser.FilterDefn.MoreRowsFieldName)).Value = MsgGetText(18112, 5038, "Use Search Criteria to Narrow the Search Results");
      End-If;
   End-If;
   
   <** COMMENTED BY SUJAY **
   
   <*-----------------------------------------------------------+
   | Append any data distribution rule SQL to the WHERE clause  |
   +------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.SecureOption = "Y" And
         Not (GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount = 1 And
            None(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.DESCR.Value)) Then
      
      <*---------------------------------------------------------------------+
      | If none of the rules are checked-on, then auto-check the first rule. |
      +----------------------------------------------------------------------*>
      If Not %This.FilterUser.FilterDefn.IsShowResultsIfNoRules Then
         For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).ActiveRowCount
            If GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(&i).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "Y" Then
               Break;
            End-If;
            If &i = GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).ActiveRowCount Then
               GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW)(1).EOEC_DS_RULE_VW.EOEC_SELECT_RULE.Value = "Y"
            End-If;
         End-For;
      End-If;
      GetDatasetFilterSQL(GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW), &strDataSetRuleSQL);
      &strWhereClause = &strWhereClause | &strDataSetRuleSQL;
      
   End-If;

**>
   
   <*---------------------------------------------------------------------+
   | If MARKET is on main reocrd or one of its subrecords, include that   |
   +----------------------------------------------------------------------*>
   SQLExec("SELECT COUNT(*) FROM PSRECFIELD A WHERE (A.FIELDNAME = 'MARKET' OR (A.SUBRECORD = 'Y' AND 'MARKET' IN (SELECT B.FIELDNAME FROM PSRECFIELD B WHERE B.RECNAME = A.FIELDNAME))) AND A.RECNAME = :1", GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.RECNAME.Value, &nCount);
   
   If &nCount > 0 And
         %Market <> "" Then
      &strWhereClause = %This.WhereClauseMarket(&strWhereClause);
   End-If;
   
   <*---------------------------------------------------------------------+
   | append ORDER BY clause                                               |
   +----------------------------------------------------------------------*>
   &strSortFields = %This.FilterUser.FilterDefn.SortFields;
   If All(&strSortFields) Then
      &arySortFields = Split(&strSortFields, ";");
      
      For &i = 1 To &arySortFields.Len
         &strascDesc = Substring(&arySortFields [&i], 1, 1);
         If &strascDesc = "A" Then
            &strWhereAscDesc = " ASC";
         Else
            If &strascDesc = "D" Then
               &strWhereAscDesc = " DESC";
            End-If;
         End-If;
         &strSortField = Substring(&arySortFields [&i], 2, Len(&arySortFields [&i]));
         
         If All(&strWhereAscDesc, &strSortField) Then
            If All(&strOrderBy) Then
               &strOrderBy = &strOrderBy | ", ";
            End-If;
            &strOrderBy = &strOrderBy | &strSortField | &strWhereAscDesc;
         End-If;
      End-For;
      
      If All(&strOrderBy) Then
         &strWhereClause = &strWhereClause | " ORDER BY " | &strOrderBy;
      End-If;
      
   End-If;
   
   
   
   <*------------------------------------------------------------------+
   | Put WHERE at the begining of the Where Clause                     |
   +-------------------------------------------------------------------*>
   If Left(&strWhereClause, 5) = " AND " Then
      &strWhereClause = Right(&strWhereClause, Len(&strWhereClause) - 5);
   End-If;
   If All(&strWhereClause) Then
      &strWhereClause = "WHERE " | &strWhereClause;
   End-If;
   
   Return &strWhereClause;
end-get;




<*----------------------------------------------------------------------------------+
| public method WhereClauseMarket                                                   |
| can be overridden by apps if they dont want to use %Market                        |
+-----------------------------------------------------------------------------------*>
method WhereClauseMarket
   /+ &strWhereClause as String +/
   /+ Returns String +/
   
   &strWhereClause = &strWhereClause | " AND MARKET = '" | %Market | "'";
   
   Return &strWhereClause;
   
end-method;


<*----------------------------------------------------------------------------------+
| private method ValidateCriteria                                                   |
+-----------------------------------------------------------------------------------*>
method ValidateCriteria
   /+ &rowFilterCriteria as Row +/
   
   Local Record &recFilterCritWrk;
   Local EOCF_FILTER:FilterField &objFilterField;
   Local array of Field &arFilterInputFields;
   Local integer &i;
   Local any &anyValue;
   Local number &nCount;
   
   If %This.IsInit Then
      Return;
   End-If;
   
   &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
   
   If &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_IN And
         &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_EQUAL And
         &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_NOT_EQUAL Then
      Return;
   End-If;
   
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   &arFilterInputFields = %This.GetFilterInputFields(&rowFilterCriteria);
   
   SetFieldTypeForConversions(&objFilterField.FieldType);
   SetUserFormatListSeparator(&strUserListDelimiter);
   
   
   <*----------------------------------------------------------------------------+
   | If Operator = IN                                                            |
   +-----------------------------------------------------------------------------*>
   If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_IN Then
      
      If &arFilterInputFields [2] <> Null Then
         If All(&arFilterInputFields [2].Value) Then
            If IsUserFormattedValue(&arFilterInputFields [2].Value) = False Then
               ErrorUserFormattedValue(&arFilterInputFields [2].Value);
            End-If;
         End-If;
      End-If;
      
      If All(&arFilterInputFields [1].Value) Then
         If IsUserFormattedList(&arFilterInputFields [1].Value) = False Then
            ErrorUserFormattedValue(&arFilterInputFields [1].Value);
         End-If;
      End-If;
   Else
      
      <*----------------------------------------------------------------------------+
      | Operator <> IN                                                              |
      +-----------------------------------------------------------------------------*>
      If &arFilterInputFields [1].Type = "CHAR" Then
         
         If IsUserFormattedValue(&arFilterInputFields [1].Value) = False Then
            ErrorUserFormattedValue(&arFilterInputFields [1].Value);
         End-If;
      End-If;
      
      <*-------------------------------------------------------------------------+
      | If Operator = BETWEEN                                                    |
      +--------------------------------------------------------------------------*>
      If &recFilterCritWrk.EOCF_FILTER_OPER.Value = &strOper_BETWEEN Then
         If &arFilterInputFields [2].Type = "CHAR" Then
            If IsUserFormattedValue(&arFilterInputFields [2].Value) = False Then
               ErrorUserFormattedValue(&arFilterInputFields [2].Value);
            End-If;
         End-If;
      End-If;
   End-If;
   
   <*-------------------------------------------------------------------------+
   | If Prompt With Edit Field                                                |
   +--------------------------------------------------------------------------*>
   
   If All(&arFilterInputFields [1].Value) Then
      If &objFilterField.IsPromptWithEdit Then
         
         If &objFilterField.FieldType = &numDataType_NUM Then
            
            &anyValue = Value(&arFilterInputFields [1].Value);
            
         Else
            
            &anyValue = &arFilterInputFields [1].Value;
            
         End-If;
         
         
         If &objFilterField.IsFormatUpper And
               (&objFilterField.FieldType = &numDataType_CHAR Or
                  &objFilterField.FieldType = &numDataType_LONG) Then
            &anyValue = Upper(&anyValue);
         End-If;
         
         /***************************************************************
         * JNP 6/16/03 - ICE #603493000                                 *
         * Check value length, if too long, then throw invalid value    *
         * error.  This is to prevent SQL error on DB2/Unix when the    *
         * passed into the bind is longer than the field column length. *
         ****************************************************************/
         If &objFilterField.FieldType = &numDataType_CHAR And
               Len(&anyValue) > &objFilterField.Length Then
            Error MsgGet(18112, 5055, "Invalid Value", &arFilterInputFields [1].Value, &rowFilterCriteria.EOCF_FLTCRT_WRK.FIELDLABEL.Value);
         End-If;
         /** JNP 6/16/03 - ICE #603493000 - END */
         
         
         try
            
            SQLExec("SELECT COUNT(*) FROM PS_" | &rowFilterCriteria.DERIVED.EDITTABLE.Value | " WHERE " | &rowFilterCriteria.EOCF_FLTCRT_WRK.FIELDNAME.Value | " = :1", &anyValue, &nCount);
            
            If &nCount = 0 Then
               Error MsgGet(18112, 5055, "Invalid Value", &arFilterInputFields [1].Value, &rowFilterCriteria.EOCF_FLTCRT_WRK.FIELDLABEL.Value);
            End-If;
            
         catch Exception &excBadField
            
            If &excBadField.MessageSetNumber = 2 And
                  &excBadField.MessageNumber = 273 Then
            Else
               throw (&excBadField);
            End-If;
            
         end-try;
         
      End-If;
   End-If;
   
   
end-method;


<*----------------------------------------------------------------------------------+
| public method AcceptCriteria                                                      |
+-----------------------------------------------------------------------------------*>
method AcceptCriteria
   /+ &rowFilterCriteria as Row +/
   
   Local Record &recFilterCritWrk, &recFilterCritWrk2, &recDerived2;
   Local EOCF_FILTER:FilterField &objFilterField;
   Local array of Field &arFilterInputFields;
   Local array of Field &arControlFields;
   Local string &strStoreExpression, &strSqlExpression, &strOperator, &strFieldName, &strControlFieldName, &strControlValue, &strSearchField, &strControlFieldRoleType, &strControlValueRoleType, &strValueDisplay, &strControlValue2;
   Local string &strUserFormattedValue, &strUserFormattedValue2;
   Local string &strStoreValue, &strStoreValue2, &strSqlValue, &strSqlValue2;
   Local any &anyValue, &anyValue2, &anyValueStore, &anyValueStore2;
   Local array of any &arValuesArray;
   Local integer &i;
   Local number &numDataType;
   Local string &strRecAlias, &strOper, &strOperNull;
   Local string &strDTTMDate, &strDTTMTime, &strFirstPart, &strSecondPart, &strDateFormat;
   
   &recFilterCritWrk = &rowFilterCriteria.GetRecord(Record.EOCF_FLTCRT_WRK);
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   
   &numDataType = &objFilterField.FieldType;
   
   <* --------------------------------------------------------------------------+
   | For DateTime fields, the entry fields are EOCF_VALUE_DATE and EOCF_VALUE_TIME  |
   |  Concatenate them into EOCF_VALUE for building the SQL                       |
   +---------------------------------------------------------------------------*>
   If &objFilterField.FieldType = &numDataType_DTTM Then
      Evaluate %Session.DateFormat
      When 0
         &strDateFormat = "M/d/y";
      When 1
         &strDateFormat = "d/M/y";
      When 2
         &strDateFormat = "y/M/d";
      When-Other
         &strDateFormat = "M/d/y";
      End-Evaluate;
      
      If None(&recFilterCritWrk.EOCF_VALUE_DATE.Value, &recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
         &recFilterCritWrk.EOCF_VALUE.Value = "";
      Else
         If None(&recFilterCritWrk.EOCF_VALUE_DATE.Value) Then
            &recFilterCritWrk.EOCF_VALUE_DATE.Value = %Date;
            &strDTTMDate = DateTimeToLocalizedString(%Date, &strDateFormat);
         Else
            &strDTTMDate = DateTimeToLocalizedString(&recFilterCritWrk.EOCF_VALUE_DATE.Value, &strDateFormat);
         End-If;
         If None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
            &strDTTMTime = "00:00:00";
         Else
            &strDTTMTime = &recFilterCritWrk.EOCF_VALUE_TIME.Value;
         End-If;
         &recFilterCritWrk.EOCF_VALUE.Value = &strDTTMDate | " " | &strDTTMTime;
      End-If;
      
      If None(&recFilterCritWrk.EOCF_VALUE_DATE2.Value, &recFilterCritWrk.EOCF_VALUE_TIME2.Value) Then
         &recFilterCritWrk.EOCF_VALUE2.Value = "";
      Else
         If None(&recFilterCritWrk.EOCF_VALUE_DATE2.Value) Then
            If All(&recFilterCritWrk.EOCF_VALUE_DATE.Value) Then
               &recFilterCritWrk.EOCF_VALUE_DATE2.Value = &recFilterCritWrk.EOCF_VALUE_DATE.Value;
               &strDTTMDate = DateTimeToLocalizedString(&recFilterCritWrk.EOCF_VALUE_DATE.Value, &strDateFormat);
            Else
               &recFilterCritWrk.EOCF_VALUE_DATE2.Value = %Date;
               &strDTTMDate = DateTimeToLocalizedString(%Date, &strDateFormat);
            End-If;
         Else
            &strDTTMDate = DateTimeToLocalizedString(&recFilterCritWrk.EOCF_VALUE_DATE2.Value, &strDateFormat);
         End-If;
         If None(&recFilterCritWrk.EOCF_VALUE_TIME2.Value) Then
            &strDTTMTime = "00:00:00";
         Else
            &strDTTMTime = &recFilterCritWrk.EOCF_VALUE_TIME2.Value;
         End-If;
         &recFilterCritWrk.EOCF_VALUE2.Value = &strDTTMDate | " " | &strDTTMTime;
      End-If;
   End-If;
   
   &arFilterInputFields = %This.GetFilterInputFields(&rowFilterCriteria);
   
   If &objFilterField.IsFormatUpper = True And
         (&objFilterField.FieldType = &numDataType_CHAR Or
            &objFilterField.FieldType = &numDataType_LONG) Then
      &arFilterInputFields [1].Value = Upper(&arFilterInputFields [1].Value);
      If &arFilterInputFields [2] <> Null Then
         &arFilterInputFields [2].Value = Upper(&arFilterInputFields [2].Value);
      End-If;
   End-If;
   
   If &recFilterCritWrk.FIELDNAME.Value = "BUSINESS_UNIT" Then
      &recFilterCritWrk.BUSINESS_UNIT.Value = &arFilterInputFields [1].Value;
   End-If;
   &strStoreExpression = "";
   &strSqlExpression = "";
   &strOperator = &recFilterCritWrk.EOCF_FILTER_OPER.Value;
   &strFieldName = &recFilterCritWrk.FIELDNAME.Value;
   &strSearchField = &strFieldName;
   &strRecAlias = "";
   
   If All(&recFilterCritWrk.EOCF_RECNAME_ALT.Value) And
         &recFilterCritWrk.EOCF_RECNAME_ALT.Value <> &m_strDefinitionRecordName Then
      REM &strRecAlias = "PS_" | &recFilterCritWrk.EOCF_RECNAME_ALT.Value | ".";
   End-If;
   
   SetFieldTypeForConversions(&objFilterField.FieldType);
   SetUserFormatListSeparator(&strUserListDelimiter);
   SetStoreFormatListSeparator(&strValueDelimiter);
   
   
   <*----------------------------------------------------------------------------+
   | If Operator = IN                                                            |
   +-----------------------------------------------------------------------------*>
   If &strOperator = &strOper_IN Or
         &strOperator = &strOper_NOT_IN Then
      
      If &m_strDefinitionRecordName = &recFilterCritWrk.EOCF_RECNAME_ALT.Value Then
         
         If &strOperator = &strOper_IN Then
            &strOper = " IN ";
         Else
            &strOper = " NOT IN ";
         End-If;
         
      Else
         
         &strOper = " IN ";
         
      End-If;
      
      
      If &arFilterInputFields [2] <> Null Then
         If All(&arFilterInputFields [2].Value) Then
            &arFilterInputFields [1].Value = &arFilterInputFields [1].Value | &strUserListDelimiter | " " | &arFilterInputFields [2].Value;
            &arFilterInputFields [2].Value = "";
            &arFilterInputFields [1].SetCursorPos(%Page);
         End-If;
      End-If;
      
      &strUserFormattedValue = &arFilterInputFields [1].Value;
      If All(&strUserFormattedValue) Then
         &arValuesArray = UserFormatToArray(&strUserFormattedValue);
         &arFilterInputFields [1].Value = ArrayToUserFormat(&arValuesArray);
         &strStoreValue = ArrayToStoreFormat(&arValuesArray);
         &strSqlValue = ArrayToSqlInFormat(&arValuesArray, (GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N"));
         
         <*---------------------------------------------------+
         |  Build Informational Line at top of screen         |
         +----------------------------------------------------*>
         If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Then
            Local array of string &arRelatedDisplay = Split(&arFilterInputFields [1].Value, &strUserListDelimiter);
            &strValueDisplay = "(";
            For &i = 1 To &arRelatedDisplay.Len
               %This.GetRelatedDisplayValue(&recFilterCritWrk, &rowFilterCriteria.DERIVED.EDITTABLE.Value, &arRelatedDisplay [&i]);
               If &i > 1 Then
                  &strValueDisplay = &strValueDisplay | ",";
               End-If;
               &strValueDisplay = &strValueDisplay | &recFilterCritWrk.EOCF_REL_DISP_VAL.Value;
            End-For;
            &strValueDisplay = &strValueDisplay | ")";
            &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
            
            &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &m_aryOperatorNames [Value(&strOperator)] | " " | &strValueDisplay;
         Else
            &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
            
            &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &m_aryOperatorNames [Value(&strOperator)] | " (" | &arFilterInputFields [1].Value | ")";
         End-If;
         
         &recFilterCritWrk.EOCF_VALUE_DISPLAY.Value = &strValueDisplay;
         
         &strStoreExpression = &strFieldName | &strValueDelimiter | &strOperator | &strValueDelimiter | &strStoreValue;
         
         If (&numDataType = &numDataType_CHAR Or
               &numDataType = &numDataType_LONG) And
               GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
            &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ")" | &strOper | "(" | &strSqlValue | ")";
         Else
            &strSqlExpression = &strRecAlias | &strSearchField | &strOper | "(" | &strSqlValue | ")";
         End-If;
      End-If;
   Else
      
      <*----------------------------------------------------------------------------+
      | Operator <> IN                                                              |
      +-----------------------------------------------------------------------------*>
      If &arFilterInputFields [1].Type = "CHAR" Then
         &strUserFormattedValue = &arFilterInputFields [1].Value;
         &anyValue = UserFormatToValue(&strUserFormattedValue);
         &arFilterInputFields [1].Value = ValueToUserFormat(&anyValue);
      Else
         &strUserFormattedValue = &arFilterInputFields [1].FormattedValue;
         &anyValue = &arFilterInputFields [1].Value;
      End-If;
      
      &anyValueStore = &anyValue;
      If All(&strControlValue) Then
         &anyValue = &strControlValue;
      End-If;
      
      <*-------------------------------------------------------------------------+
      | If Operator = BETWEEN                                                    |
      +--------------------------------------------------------------------------*>
      If &strOperator = &strOper_BETWEEN Then
         
         If &arFilterInputFields [2].Type = "CHAR" Then
            &strUserFormattedValue2 = &arFilterInputFields [2].Value;
            &anyValue2 = UserFormatToValue(&strUserFormattedValue2);
            &arFilterInputFields [2].Value = ValueToUserFormat(&anyValue2);
         Else
            &strUserFormattedValue2 = &arFilterInputFields [2].FormattedValue;
            &anyValue2 = &arFilterInputFields [2].Value;
         End-If;
         &anyValueStore2 = &anyValue2;
         If All(&strControlValue2) Then
            &anyValue2 = &strControlValue;
         End-If;
         
         If All(&strUserFormattedValue) Or
               All(&strUserFormattedValue2) Then
            
            &strStoreValue = ValueToStoreFormat(&anyValueStore);
            &strSqlValue = ValueToSqlInFormat(&anyValue, False);
            
            If All(&strControlValue) Then
               &strSqlValue = Substitute(&strSqlValue, "'", "");
            End-If;
            
            &strStoreValue2 = ValueToStoreFormat(&anyValueStore2);
            &strSqlValue2 = ValueToSqlInFormat(&anyValue2, False);
            
            If All(&strControlValue2) Then
               &strSqlValue = Substitute(&strSqlValue2, "'", "");
            End-If;
            
            If &objFilterField.FieldType = &numDataType_DTTM And
                  None(&recFilterCritWrk.EOCF_VALUE_TIME2.Value) Then
               &strSqlValue2 = Substring(&strSqlValue2, 1, 24) | "23:59:59.999999')";
            End-If;
            
            &strStoreExpression = &strFieldName | &strValueDelimiter | &strOperator | &strValueDelimiter | &strStoreValue | &strValueDelimiter | &strStoreValue2;
            
            If &numDataType = &numDataType_CHAR Or
                  &numDataType = &numDataType_LONG And
                     GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
               &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") BETWEEN %Upper(" | &strSqlValue | ") AND %Upper(" | &strSqlValue2 | ")";
            Else
               &strSqlExpression = &strRecAlias | &strSearchField | " BETWEEN " | &strSqlValue | " AND " | &strSqlValue2;
            End-If;
            
         End-If;
      Else
         
         <*----------------------------------------------------------------------------+
         | Operator <> BETWEEN                                                         |
         +-----------------------------------------------------------------------------*>
         If All(&strUserFormattedValue) Or
               (None(&strUserFormattedValue) And
                  (&strOperator = &strOper_IS_BLANK Or
                     &strOperator = &strOper_NOT_BLANK)) Then
            &strStoreValue = ValueToStoreFormat(&anyValueStore);
            &strSqlValue = ValueToSqlInFormat(&anyValue, False);
            
            If All(&strControlValue) Then
               &strSqlValue = Substitute(&strSqlValue, "'", "");
            End-If;
            
            &strStoreExpression = &strFieldName | &strValueDelimiter | &strOperator | &strValueDelimiter | &strStoreValue;
            
            
            Evaluate &strOperator
            When = &strOper_BEGINS_WITH
               <*-------------------------------------------------------------------+
               | Operator = Begins With                                             |
               +--------------------------------------------------------------------*>
               
               If All(&recFilterCritWrk.EOCF_UPPR_SRCH_FLD.Value) Then
                  &strSqlExpression = &strRecAlias | &recFilterCritWrk.EOCF_UPPR_SRCH_FLD.Value | " LIKE %Upper(" | ValueToSqlInFormat(&anyValue | "%", False) | ")";
               Else
                  If GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                     &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") LIKE %Upper(" | ValueToSqlInFormat(&anyValue | "%", False) | ")";
                  Else
                     &strSqlExpression = &strRecAlias | &strSearchField | " LIKE " | ValueToSqlInFormat(&anyValue | "%", False);
                  End-If;
               End-If;
               Break;
               
               
            When = &strOper_EQUAL
               <*-------------------------------------------------------------------+
               | Operator = Equals                                                  |
               +--------------------------------------------------------------------*>
               
               If &numDataType = &numDataType_DTTM And
                     None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                  &strFirstPart = " >= " | Substring(&strSqlValue, 1, 24) | "00:00:00.000000')";
                  &strSecondPart = " <= " | Substring(&strSqlValue, 1, 24) | "23:59:59.999999')";
                  &strSqlExpression = &strRecAlias | &strSearchField | &strFirstPart | " AND " | &strRecAlias | &strSearchField | &strSecondPart;
               Else
                  If (&numDataType = &numDataType_CHAR Or
                        &numDataType = &numDataType_LONG) And
                        GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" And
                        None(&strControlValue) Then
                     &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") = %Upper(" | &strSqlValue | ")";
                  Else
                     &strSqlExpression = &strRecAlias | &strSearchField | " = " | &strSqlValue;
                  End-If;
               End-If;
               Break;
               
            When = &strOper_NOT_EQUAL
               <*-------------------------------------------------------------------+
               | Operator = Not Equal                                               |
               +--------------------------------------------------------------------*>
               
               If &m_strDefinitionRecordName = &recFilterCritWrk.EOCF_RECNAME_ALT.Value Then
                  &strOper = " <> ";
               Else
                  &strOper = " = ";
               End-If;
               
               If &numDataType = &numDataType_DTTM And
                     None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                  &strFirstPart = " < " | Substring(&strSqlValue, 1, 24) | "00:00:00.000000')";
                  &strSecondPart = " > " | Substring(&strSqlValue, 1, 24) | "23:59:59.999999')";
                  &strSqlExpression = &strRecAlias | &strSearchField | &strFirstPart | " OR " | &strRecAlias | &strSearchField | &strSecondPart;
               Else
                  If (&numDataType = &numDataType_CHAR Or
                        &numDataType = &numDataType_LONG) And
                        GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" And
                        None(&strControlValue) Then
                     &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ")" | &strOper | "%Upper(" | &strSqlValue | ")";
                  Else
                     &strSqlExpression = &strRecAlias | &strSearchField | &strOper | &strSqlValue;
                  End-If;
               End-If;
               Break;
               
            When = &strOper_LESS_THAN
               <*-------------------------------------------------------------------+
               | Operator = Less Than                                               |
               +--------------------------------------------------------------------*>
               
               If (&numDataType = &numDataType_CHAR Or
                     &numDataType = &numDataType_LONG) And
                     GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                  &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") < %Upper(" | &strSqlValue | ")";
               Else
                  If &objFilterField.FieldType = &numDataType_DTTM And
                        None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                     &strSqlValue = Substring(&strSqlValue, 1, 24) | "00:00:00.000000')";
                  End-If;
                  &strSqlExpression = &strRecAlias | &strSearchField | " < " | &strSqlValue;
               End-If;
               Break;
               
            When = &strOper_GREATER_THAN
               <*-------------------------------------------------------------------+
               | Operator = Greater Than                                            |
               +--------------------------------------------------------------------*>
               If (&numDataType = &numDataType_CHAR Or
                     &numDataType = &numDataType_LONG) And
                     GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                  &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") > %Upper(" | &strSqlValue | ")";
               Else
                  If &objFilterField.FieldType = &numDataType_DTTM And
                        None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                     &strSqlValue = Substring(&strSqlValue, 1, 24) | "23:59:59.999999')";
                  End-If;
                  &strSqlExpression = &strRecAlias | &strSearchField | " > " | &strSqlValue;
               End-If;
               Break;
               
            When = &strOper_LESS_THAN_EQUAL
               <*-------------------------------------------------------------------+
               | Operator = Less Than or Equal                                      |
               +--------------------------------------------------------------------*>
               If (&numDataType = &numDataType_CHAR Or
                     &numDataType = &numDataType_LONG) And
                     GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                  &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") <= %Upper(" | &strSqlValue | ")";
               Else
                  If &objFilterField.FieldType = &numDataType_DTTM And
                        None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                     &strSqlValue = Substring(&strSqlValue, 1, 24) | "23:59:59.999999')";
                  End-If;
                  &strSqlExpression = &strRecAlias | &strSearchField | " <= " | &strSqlValue;
               End-If;
               Break;
               
            When = &strOper_GREATER_THAN_EQUAL
               <*-------------------------------------------------------------------+
               | Operator = Greater Than or Equal                                   |
               +--------------------------------------------------------------------*>
               If (&numDataType = &numDataType_CHAR Or
                     &numDataType = &numDataType_LONG) And
                     GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                  &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") >= %Upper(" | &strSqlValue | ")";
               Else
                  If &objFilterField.FieldType = &numDataType_DTTM And
                        None(&recFilterCritWrk.EOCF_VALUE_TIME.Value) Then
                     &strSqlValue = Substring(&strSqlValue, 1, 24) | "00:00:00.000000')";
                  End-If;
                  &strSqlExpression = &strRecAlias | &strSearchField | " >= " | &strSqlValue;
               End-If;
               Break;
               
            When = &strOper_CONTAINS
               <*-------------------------------------------------------------------+
               | Operator = Contains                                                |
               +--------------------------------------------------------------------*>
               If GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.CASESENSATIVE.Value = "N" Then
                  &strSqlExpression = "%Upper(" | &strRecAlias | &strSearchField | ") LIKE %Upper(" | ValueToSqlInFormat("%" | &anyValue | "%", False) | ")";
               Else
                  &strSqlExpression = &strRecAlias | &strSearchField | " LIKE " | ValueToSqlInFormat("%" | &anyValue | "%", False);
               End-If;
               Break;
               
            When = &strOper_NOT_BLANK
            When = &strOper_IS_BLANK
               <*-------------------------------------------------------------------+
               | Operator = Is Blank                                                |
               +--------------------------------------------------------------------*>
               
               If &m_strDefinitionRecordName = &recFilterCritWrk.EOCF_RECNAME_ALT.Value Then
                  
                  If &strOperator = &strOper_IS_BLANK Then
                     &strOper = " =";
                     &strOperNull = " IS";
                  Else
                     &strOper = " <>";
                     &strOperNull = " IS NOT";
                  End-If;
                  
               Else
                  
                  &strOper = " <>";
                  &strOperNull = " IS NOT";
                  
               End-If;
               
               If &objFilterField.FieldType = &numDataType_DATE Or
                     &objFilterField.FieldType = &numDataType_TIME Or
                     &objFilterField.FieldType = &numDataType_DTTM Then
                  &strSqlExpression = &strRecAlias | &strSearchField | &strOperNull | " NULL";
                  &arFilterInputFields [1].Value = "";
               Else
                  If &objFilterField.FieldType = &numDataType_LONG Or
                        &objFilterField.FieldType = &numDataType_NUM Or
                        &objFilterField.FieldType = &numDataType_SIGN Then
                     &strSqlExpression = &strRecAlias | &strSearchField | &strOper | " 0";
                     &arFilterInputFields [1].Value = "";
                  Else
                     If &objFilterField.FieldType = &numDataType_CHAR Then
                        &strSqlExpression = &strRecAlias | &strSearchField | &strOper | " ' '";
                        &arFilterInputFields [1].Value = "";
                     End-If;
                  End-If;
               End-If;
               
               Break;
               
            End-Evaluate;
         End-If;
      End-If;
   End-If;
   
   
   &recFilterCritWrk.EO_VALUE.Value = &strStoreExpression;
   &recFilterCritWrk.SQLTEXT.Value = &strSqlExpression;
   
   If %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord <> "" Then
      %This.SaveFilterValueToLevel0(&rowFilterCriteria);
   End-If;
   
   If &strOperator <> &strOper_IN Then
      <*---------------------------------------------------+
      | Store the info line at the top of the grid         |
      +----------------------------------------------------*>
      If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
            &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Then
         %This.GetRelatedDisplayValue(&recFilterCritWrk, &rowFilterCriteria.DERIVED.EDITTABLE.Value, &arFilterInputFields [1].Value);
         If All(&recFilterCritWrk.EOCF_REL_DISP_VAL.Value) Then
            /* &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &objOprDBField.GetXlatItem(&strOperator).LongName | " " | &recFilterCritWrk.EOCF_REL_DISP_VAL.Value; */
            &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &m_aryOperatorNames [Value(&strOperator)] | " " | &recFilterCritWrk.EOCF_REL_DISP_VAL.Value;
         Else
            /* &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &objOprDBField.GetXlatItem(&strOperator).LongName | " " | &arFilterInputFields [1].Value; */
            &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &m_aryOperatorNames [Value(&strOperator)] | " " | &arFilterInputFields [1].Value;
         End-If;
      Else
         /* &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &objOprDBField.GetXlatItem(&strOperator).LongName | " " | &arFilterInputFields [1].Value; */
         &strValueDisplay = &recFilterCritWrk.FIELDLABEL.Value | " " | &m_aryOperatorNames [Value(&strOperator)] | " " | &arFilterInputFields [1].Value;
      End-If;
      
      If &strOperator = &strOper_BETWEEN Then
         If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Then
            %This.GetRelatedDisplayValue(&recFilterCritWrk, &rowFilterCriteria.DERIVED.EDITTABLE.Value, &arFilterInputFields [2].Value);
            
            If All(&recFilterCritWrk.EOCF_REL_DISP_VAL.Value) Then
               &strValueDisplay = &strValueDisplay | " & " | &recFilterCritWrk.EOCF_REL_DISP_VAL.Value;
            Else
               &strValueDisplay = &strValueDisplay | " & " | &arFilterInputFields [2].Value
            End-If;
         Else
            &strValueDisplay = &strValueDisplay | " & " | &arFilterInputFields [2].Value;
         End-If;
      End-If;
   End-If;
   
   &recFilterCritWrk.EOCF_VALUE_DISPLAY.Value = &strValueDisplay;
   
   If &strOperator = &strOper_BETWEEN Then
      %This.ShowHideRelatedDisplay( False);
   Else
      %This.ShowHideRelatedDisplay( True);
   End-If;
   
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      &recFilterCritWrk2 = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i).EOCF_FLTCRT_WRK;
      &recDerived2 = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).GetRow(&i).DERIVED;
      If &recFilterCritWrk2.FIELDNAME.Value <> &strFieldName Then
         /* &objFilterField2 = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk2.FIELDNAME.Value); */
         
         /*-------------------------+
         | Business Unit            |
         +--------------------------*/
         /* If &objFilterField2.BusinessUnitField = &strFieldName Then */
         If &strFieldName = "BUSINESS_UNIT" Then
            &recFilterCritWrk2.BUSINESS_UNIT.Value = &anyValue;
         End-If;
         
         <*
         /*-------------------------+
         | SetID                    |
         +--------------------------*/
         If &objFilterField2.SetIDField = &strFieldName Then
            &recFilterCritWrk2.SETID).Value = &anyValue;
         End-If;
         
         REM +--------------------------+;
         REM | Effective Date           |;
         REM +--------------------------+;
         If &objFilterField2.EffectiveDateField = &strFieldName Then
            &recFilterCritWrk2.EFFDT).Value = &anyValue;
         End-If;
         
         REM +--------------------------+;
         REM | Key 1                    |;
         REM +--------------------------+;
         If &objFilterField2.Key1Field = &strFieldName Then
            &recFilterCritWrk2.KEY1_FLD_VAL).Value = &anyValue;
         End-If;
         
         REM +--------------------------+;
         REM | Key 2                    |;
         REM +--------------------------+;
         If &objFilterField2.Key2Field = &strFieldName Then
            &recFilterCritWrk2.GetField(Field.KEY2_FLD_VAL).Value = &anyValue;
         End-If;
         
         REM +--------------------------+;
         REM | Key 3                    |;
         REM +--------------------------+;
         If &objFilterField2.Key3Field = &strFieldName Then
            &recFilterCritWrk2.KEY3_FLD_VAL).Value = &anyValue;
         End-If;
         *>
         
         <*-------------------------+
         | Set Control              |
         +--------------------------*>
         /* If &objFilterField2.SetControlField = &strFieldName Then */
         If &recFilterCritWrk2.SETCNTRLFLD.Value = &strFieldName Then
            try
               &recFilterCritWrk2.SETID.Value = GetSetId(&strFieldName, &anyValue, &recDerived2.EDITTABLE.Value, "");
            catch Exception &exBadSetControl
               If &exBadSetControl.MessageSetNumber = 2 And
                     &exBadSetControl.MessageNumber = 214 Then
                  &recFilterCritWrk2.SETID.Value = "";
               Else
                  throw (&exBadSetControl);
               End-If;
            end-try;
         End-If;
      End-If;
   End-For;
end-method;

<** COMMENTED BY SUJAY **

<*---------------------------------------------------------+
| private Method ClearBOFields                             |
+----------------------------------------------------------*>
method ClearBOFields
   /+ &nRoleTypeID as Number +/
   
   Local integer &i;
   Local Record &recFilterCritWrk;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK;
      
      If &nRoleTypeID = 2 Or
            &nRoleTypeID = 9 Or
            &nRoleTypeID = 99999 Then
         &recFilterCritWrk.BO_ID.Value = 0;
         &recFilterCritWrk.ROLE_TYPE_ID.Value = 0;
         &recFilterCritWrk.BO_ID_CUST.Value = 0;
         &recFilterCritWrk.ROLE_TYPE_ID_CUST.Value = 0;
      End-If;
      
      If &nRoleTypeID = 8 Or
            &nRoleTypeID = 99999 Then
         &recFilterCritWrk.BO_ID_CONTACT.Value = 0;
         &recFilterCritWrk.ROLE_TYPE_ID_CNTCT.Value = 0;
      End-If;
      
      If &nRoleTypeID = 3 Or
            &nRoleTypeID = 99999 Then
         &recFilterCritWrk.BO_ID_SITE.Value = 0;
         &recFilterCritWrk.ROLE_TYPE_ID_SITE.Value = 0;
      End-If;
   End-For;
   
end-method;

** COMMENT ENDED BY SUJAY **>

<*---------------------------------------------------------+
| Method ShowHideRelatedDisplay                            |
+----------------------------------------------------------*>
method ShowHideRelatedDisplay
   /+ &bShow as Boolean +/
   
   Local integer &i;
   Local Record &recFilterCritWrk;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK;
      
      &recFilterCritWrk.EOCF_REL_DISP_VAL.Visible = False;
      If &bShow Then
         If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTNOEDIT Or
               &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypePROMPTWITHEDIT Then
            If All(&recFilterCritWrk.EOCF_REL_DISP_VAL.Value) Then
               &recFilterCritWrk.EOCF_REL_DISP_VAL.Visible = True;
            End-If;
         End-If;
      End-If;
   End-For;
   
end-method;


<*---------------------------------------------------------+
| Method GetRelatedDisplayValue                            |
+----------------------------------------------------------*>
method GetRelatedDisplayValue
   /+ &recFilterCritWrk as Record, +/
   /+ &strPromptRecordName as String, +/
   /+ &strIDValue as String +/
   
   Local integer &i;
   Local Rowset &rsSearchKeys;
   Local string &strKeyValue, &strHighOrderKeysRecord;
   Local Record &recPromptRecord;
   Local integer &intTotalKeyCount;
   
   If None(&strIDValue) Then
      &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
   Else
      
      &strIDValue = LTrim(RTrim(&strIDValue));
      &recPromptRecord = CreateRecord(@("Record." | &strPromptRecordName));
      
      If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Then
         <*--------------------+
         |  XLAT Field         |
         + --------------------*>
         &recPromptRecord.FIELDNAME.Value = &recFilterCritWrk.FIELDNAME.Value;
         &recPromptRecord.FIELDVALUE.Value = &strIDValue;
         
      Else
         
         <*--------------------------------------+
         | Dropdown Field or Prompt Field        |
         +---------------------------------------*>
         If All(&recFilterCritWrk.EOCF_DROPDOWN_DESC.Value) Then;
            
            &strHighOrderKeysRecord = %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord;
            
            &rsSearchKeys = %This.GetHighOrderKeysRowset(&strPromptRecordName, &recFilterCritWrk.FIELDNAME.Value, &intTotalKeyCount);
            
            try
               
               If All(&strHighOrderKeysRecord) Then
                  
                  If &rsSearchKeys.RowCount = 0 Or
                        &rsSearchKeys.RowCount = 1 And
                           None(&rsSearchKeys(1).PSRECFIELD.FIELDNAME.Value) Then
                     
                  Else
                     
                     For &i = 1 To &rsSearchKeys.RowCount
                        
                        If All(&recFilterCritWrk.SETCNTRLFLD.Value) And
                              &i = 1 Then
                           &strKeyValue = %This.GetSetControlSetID(&recFilterCritWrk.SETCNTRLFLD.Value, &strPromptRecordName);
                        Else
                           &strKeyValue = GetLevel0()(1).GetRecord(@("Record." | &strHighOrderKeysRecord)).GetField(@("Field." | &rsSearchKeys(&i).PSRECFIELD.FIELDNAME.Value)).Value;
                        End-If;
                        
                        &recPromptRecord.GetField(@("Field." | &rsSearchKeys(&i).PSRECFIELD.FIELDNAME.Value)).Value = &strKeyValue;
                        
                     End-For;
                     
                  End-If;
                  
               End-If;
               
               <*----------------------------------------------------------------------+
               |  If only one search key, search on that field no matter what its name |
               +-----------------------------------------------------------------------*>
               If &rsSearchKeys <> Null Then
                  
                  
                  If &intTotalKeyCount = 1 And
                        All(&rsSearchKeys(1).PSRECFIELD.FIELDNAME.Value) Then
                     &recPromptRecord.GetField(@("Field." | &rsSearchKeys(1).PSRECFIELD.FIELDNAME.Value)).Value = &strIDValue;
                  Else
                     If All(&recFilterCritWrk.SETCNTRLFLD.Value) Then
                        &strKeyValue = %This.GetSetControlSetID(&recFilterCritWrk.SETCNTRLFLD.Value, &strPromptRecordName);
                        &recPromptRecord.GetField(@("Field." | &rsSearchKeys(1).PSRECFIELD.FIELDNAME.Value)).Value = &strKeyValue;
                     End-If;
                     &recPromptRecord.GetField(@("Field." | &recFilterCritWrk.FIELDNAME.Value)).Value = &strIDValue;
                  End-If;
               Else
                  &recPromptRecord.GetField(@("Field." | &recFilterCritWrk.FIELDNAME.Value)).Value = &strIDValue;
               End-If;
               
            catch Exception &excBadField
               
               If &excBadField.MessageSetNumber = 2 And
                     &excBadField.MessageNumber = 273 Then
               Else
                  throw (&excBadField);
               End-If;
               
            end-try;
            
         Else
            &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
            Return;
         End-If;
      End-If;
      
      
      <*----------------------+
      |  Select by Key        |
      +-----------------------*>
      If &recPromptRecord.SelectByKey() Then
         &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
         If &recFilterCritWrk.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Then
            &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = &recPromptRecord.XLATLONGNAME.Value;
         Else
            If All(&recFilterCritWrk.EOCF_DROPDOWN_DESC.Value) Then
               &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = &recPromptRecord.GetField(@("Field." | &recFilterCritWrk.EOCF_DROPDOWN_DESC.Value)).Value;
            Else
               &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = &strIDValue;
            End-If;
         End-If;
      Else
         &recFilterCritWrk.EOCF_REL_DISP_VAL.Value = "";
      End-If;
   End-If;
   
   
   <*------------------------------------------------------------------------+
   |  Display Value has been put in work record on the page EOCF_REL_DISP_VAL  |
   +-------------------------------------------------------------------------*>
   
end-method;


<*----------------------------------------------------------------------------------+
| private method GetSetControlSetid                                                 |
+-----------------------------------------------------------------------------------*>
method GetSetControlSetID
   /+ &sSetControlField as String, +/
   /+ &sSetControlRecord as String +/
   /+ Returns String +/
   
   Local integer &iIndex;
   Local string &sSetControlValue, &sSetID;
   Local Field &fldTargetField;
   
   If None(&sSetControlField) Then
      Return "";
   End-If;
   
   <*-------------------------------------------------------------------+
   | Find the Filter field which is the Set Control Field               |
   +--------------------------------------------------------------------*>
   For &iIndex = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      If GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&iIndex).EOCF_FLTCRT_WRK.FIELDNAME.Value = &sSetControlField Then
         Local array of Field &ary_fldFilterInputFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&iIndex));
         &sSetControlValue = &ary_fldFilterInputFields [1].Value;
         <*-------------------------------------------------------------------+
         | Found it in filter list but its blank, then return                |
         +--------------------------------------------------------------------*>
         If None(&sSetControlValue) Then
            Return "";
         End-If;
         Break;
      End-If;
   End-For;
   
   <*-------------------------------------------------------------------------+
   | If Set Control Field not found in Filters, look on level 0 Work Record   |
   +--------------------------------------------------------------------------*>
   If Not All(&sSetControlField, &sSetControlValue, &sSetControlRecord) Then
      If %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord <> "" Then
         try
            &fldTargetField = GetLevel0()(1).GetRecord(@("Record." | %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord)).GetField(@("Field." | &sSetControlField));
         catch Exception &exNotFound
            If &exNotFound.MessageSetNumber = 2 And
                  &exNotFound.MessageNumber = 273 Then
               Return "";
            Else
               throw (&exNotFound);
            End-If;
         end-try;
         If All(&fldTargetField) Then
            &sSetControlValue = &fldTargetField.Value;
         End-If;
      End-If;
   End-If;
   
   Local number &numPos = Find(",", &sSetControlValue);
   If &numPos = 1 Then
      Return "";
   End-If;
   If &numPos > 1 Then
      &sSetControlValue = Substring(&sSetControlValue, 1, &numPos - 1);
   End-If;
   
   If All(&sSetControlField, &sSetControlValue, &sSetControlRecord) Then
      try
         &sSetID = GetSetId(&sSetControlField, &sSetControlValue, &sSetControlRecord, "");
      catch Exception &exBadSetControl
         If &exBadSetControl.MessageSetNumber = 2 And
               &exBadSetControl.MessageNumber = 214 Then
         Else
            throw (&exBadSetControl);
         End-If;
      end-try;
      If All(&sSetID) Then
         Return &sSetID;
      Else
         &sSetControlRecord = &m_strDefinitionRecordName;
         try
            &sSetID = GetSetId(&sSetControlField, &sSetControlValue, &sSetControlRecord, "");
         catch Exception &exBadSetControl2
            If &exBadSetControl.MessageSetNumber = 2 And
                  &exBadSetControl.MessageNumber = 214 Then
            Else
               throw (&exBadSetControl2);
            End-If;
         end-try;
         Return &sSetID;
      End-If;
   End-If;
   
   Return "";
   
   
end-method;

<*----------------------------------------------------------------------------------+
| private method GetPromptRowset                                                    |
+-----------------------------------------------------------------------------------*>
method GetPromptRowset
   /+ &bIsXLAT as Boolean, +/
   /+ &sSetControlField as String, +/
   /+ &sPromptRecordName as String, +/
   /+ &sCurrentFieldName as String, +/
   /+ &sWhere as String out +/
   /+ Returns Rowset +/
   
   Local Rowset &rsPrompt, &rsFields, &rsScroll, &rsSearchKeys;
   Local integer &i, &j, &nCount, &nResultField, &intTotalKeyCount;
   Local string &sSetControlValue, &sSetControlRecord, &sSetID, &sKeyValue, &sInList;
   Local Record &recPromptRecord;
   Local array of Field &ary_fldFilterInputFields;
   Local Row &rowCurrentRow;
   Local Field &fldPrompt, &fldScroll, &fldResultListField, &fldLevel0Work;
   
   If None(&sPromptRecordName) Then
      Return &rsPrompt;
   End-If;
   
   &rsPrompt = CreateRowset(@("Record." | &sPromptRecordName));
   
   &sWhere = "";
   
   If &bIsXLAT Then
      
      &sWhere = " AND FIELDNAME = '" | &sCurrentFieldName | "'";
      
   Else
      
      <*-----------------------------------------------------------------------+
      | Get the SETID if this field has a Set Control Field in Filter Setup    |
      +------------------------------------------------------------------------*>
      If All(&sSetControlField) Then
         &sSetID = %This.GetSetControlSetID(&sSetControlField, &sPromptRecordName);
         &sWhere = " AND SETID = '" | &sSetID | "'";
      End-If;
      
      <*-------------------------------------------------------------------+
      | Find Higher-Order Keys and limit the search to those key values    |
      +--------------------------------------------------------------------*>
      If %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord <> "" Then
         
         &rsSearchKeys = %This.GetHighOrderKeysRowset(&sPromptRecordName, &sCurrentFieldName, &intTotalKeyCount);
         <*---------------------------------------------------------------------+
         | &rsSearchKeys now has the search key fields in the right sequence    |
         +----------------------------------------------------------------------*>
         
         If All(&rsSearchKeys) Then
            For &j = 1 To &rsSearchKeys.RowCount
               &fldLevel0Work = &rsSearchKeys(&j).PSRECFIELD.FIELDNAME;
               <*------------------------------------------------------------------------------+
               | When we reach the point in the keylist where we are at current field, get out |
               +-------------------------------------------------------------------------------*>
               If &fldLevel0Work.Value = &sCurrentFieldName Then
                  Break;
               End-If;
               
               If All(&rsSearchKeys(&j).PSRECFIELD.SETCNTRLFLD.Value) Then
                  <*------------------------------------------------------------------------+
                  | if already got SETID based on Filter Setup Set Control Field (above)    |
                  | then dont need to try again.                                            |
                  +-------------------------------------------------------------------------*>
                  If None(&sSetID) Then
                     &sKeyValue = %This.GetSetControlSetID(&rsSearchKeys(&j).PSRECFIELD.SETCNTRLFLD.Value, &sPromptRecordName);
                     &sWhere = &sWhere | " AND SETID = '" | &sKeyValue | "'";
                  End-If;
               Else
                  If (&rsSearchKeys(&j).PSRECFIELD.FIELDNAME.Value) <> "SETID" Then
                     try
                        
                        &sKeyValue = GetLevel0()(1).GetRecord(@("Record." | %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord)).GetField(@("Field." | &fldLevel0Work.Value)).Value;
                        
                        &sWhere = &sWhere | " AND " | &fldLevel0Work.Value | " = '" | &sKeyValue | "'";
                     catch Exception &exAny;
                     end-try;
                  End-If;
               End-If;
            End-For;
         End-If;
      End-If;
      
      <** COMMENTED BY SUJAY **
      <*----------------------------------------------------------------+
      | If field is BUSINESS_UNIT or SETID see if security by OPRID or  |
      | OPRCLASS needs to be enforced.                                  |
      +-----------------------------------------------------------------*>
      If &sCurrentFieldName = "BUSINESS_UNIT" And
            &m_strBUSecurity = "Y" And
            &m_strSecurityType <> "N" Then
         &sKeyValue = GetLevel0()(1).EOCF_FLTFRM_WRK.OPRID.Value;
         
         If %This.IsFieldInRecord("OPRID", &sPromptRecordName) Then
            &sWhere = &sWhere | " AND OPRID = '" | &sKeyValue | "'";
         End-If;
      Else
         
         If &sCurrentFieldName = "SETID" And
               &m_strSetidSecurity = "Y" And
               &m_strSecurityType <> "N" Then
            &sKeyValue = GetLevel0()(1).EOCF_FLTFRM_WRK.OPRID.Value;
            If %This.IsFieldInRecord("OPRID", &sPromptRecordName) Then
               &sWhere = &sWhere | " AND OPRID = '" | &sKeyValue | "'";
            End-If;
         End-If;
      End-If;
      
** COMMENT ENDED BY SUJAY *>
      
   End-If;
   
   If All(&sWhere) Then
      <*-------------------------------------------------------------------+
      | Place "WHERE" at the beginning of the where clause string          |
      +--------------------------------------------------------------------*>
      &sWhere = Substring(&sWhere, 6, Len(&sWhere));
      &sWhere = "WHERE " | &sWhere;
   End-If;
   
   
   &rsPrompt.Fill(&sWhere);
   <*-------------------------------------------------------------------+
   | &rsPrompt now contains all the prompt rows to put in the grid      |
   +--------------------------------------------------------------------*>
   
   
   Return &rsPrompt;
   
end-method;


method IsFieldInRecord
   /+ &strFieldName as String, +/
   /+ &strRecName as String +/
   /+ Returns Boolean +/
   
   Local Rowset &rsRecFields;
   Local integer &i;
   
   &rsRecFields = CreateRowset(@("Record." | &strRecName));
   
   For &i = 1 To &rsRecFields.RowCount
      If &rsRecFields(&i).GetRecord(@("Record." | &strRecName)).GetField(&i).Name = &strFieldName Then
         Return True
      End-If;
   End-For;
   
   Return False;
   
end-method;

<*-------------------------------------------------------------------+
| Private method GetHighOrderKeysRowset                              |
+--------------------------------------------------------------------*>
method GetHighOrderKeysRowset
   /+ &strPromptRecordName as String, +/
   /+ &strCurrentFieldName as String, +/
   /+ &intTotalKeyCount as Integer out +/
   /+ Returns Rowset +/
   
   Local integer &j;
   Local string &sInList;
   Local Rowset &rsHighOrderKeys;
   
   &intTotalKeyCount = 0;
   
   Local Record &recPromptRecord = CreateRecord(@("Record." | &strPromptRecordName));
   For &j = 1 To &recPromptRecord.FieldCount
      If &recPromptRecord.GetField(&j).IsKey Then
         &intTotalKeyCount = &intTotalKeyCount + 1;
         &sInList = &sInList | "'" | &recPromptRecord.GetField(&j).Name | "',";
      End-If;
   End-For;
   
   If All(&sInList) Then
      &sInList = Substring(&sInList, 1, Len(&sInList) - 1);
      &sInList = "(" | &sInList | ")";
      Local Rowset &rsSearchKeys = CreateRowset(Record.PSRECFIELD);
      &rsSearchKeys.Fill("WHERE RECNAME = '" | &strPromptRecordName | "' AND FIELDNAME IN " | &sInList | " ORDER BY FIELDNUM");
   End-If;
   <*---------------------------------------------------------------------+
   | &rsSearchKeys now has the search key fields in the right sequence    |
   +----------------------------------------------------------------------*>
   
   If &rsSearchKeys.RowCount = 0 Then
      Return &rsSearchKeys;
   Else
      &rsHighOrderKeys = CreateRowset(&rsSearchKeys);
      For &j = 1 To &rsSearchKeys.RowCount
         <*------------------------------------------------------------------------------+
         | When we reach the point in the keylist where we are at current field, get out |
         +-------------------------------------------------------------------------------*>
         If &rsSearchKeys(&j).PSRECFIELD.FIELDNAME.Value = &strCurrentFieldName Then
            Break;
         Else
            If &j > 1 Then
               &rsHighOrderKeys.InsertRow(&j - 1);
            End-If;
            &rsSearchKeys(&j).CopyTo(&rsHighOrderKeys(&j));
         End-If;
      End-For;
      
      Return &rsHighOrderKeys;
   End-If;
   
end-method;



<*----------------------------------------------------------------------------------+
| private method ShowPrompt                                                         |
| For in-list prompt, we show our own custom prompt page so we can let the user     |
| select several values at once.                                                    |
+-----------------------------------------------------------------------------------*>
method ShowPrompt
   /+ &sPromptPage as String +/
   Local Rowset &rsPrompt, &rsFields, &rsScroll, &rsSearchKeys;
   Local integer &i, &j, &nCount, &nResultField;
   Local string &sPromptRecordName, &sWhere, &sKeyValue, &sInList;
   Local Record &recPromptRecord;
   Local array of number &aryFieldPosition;
   Local array of Field &ary_fldFilterInputFields;
   Local boolean &bIsXLAT, &bIsDropdown;
   Local Field &fldPrompt, &fldCurrent, &fldScroll, &fldResultListField, &fldLevel0Work;
   Local Row &rowCurrent;
   Local string &strWhere;
   
   &aryFieldPosition = CreateArrayRept(0, 0);
   &nCount = 0;
   &rowCurrent = GetRow();
   &fldCurrent = &rowCurrent.EOCF_FLTCRT_WRK.FIELDNAME;
   
   If &rowCurrent.EOCF_FLTCRT_WRK.PROMPT_EDITTYPE.Value = &strPromptEditTypeXLAT Then
      &bIsXLAT = True;
   End-If;
   If &rowCurrent.EOCF_FLTCRT_WRK.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown Then
      &bIsDropdown = True;
   End-If;
   &fldResultListField = &rowCurrent.EOCF_FLTCRT_WRK.EOCF_VALUE_LIST;
   
   &sPromptRecordName = &rowCurrent.DERIVED.EDITTABLE.Value;
   If None(&sPromptRecordName) Then
      Return;
   End-If;
   
   &rsPrompt = %This.GetPromptRowset(&bIsXLAT, &rowCurrent.EOCF_FLTCRT_WRK.SETCNTRLFLD.Value, &sPromptRecordName, &fldCurrent.Value, &strWhere);
   
   <*--------------------------------------------------------------------------------+
   | Fill an array with the field position of each "list" field on the prompt record |
   +---------------------------------------------------------------------------------*>
   &recPromptRecord = &rsPrompt(1).GetRecord(@("Record." | &sPromptRecordName));
   For &i = 1 To &recPromptRecord.FieldCount
      If &recPromptRecord.GetField(&i).IsListItem Then
         &nCount = &nCount + 1;
         &aryFieldPosition [&nCount] = &i;
      End-If;
   End-For;
   
   <*-------------------------------------------------------------------------+
   | &rsScroll is the (work) results grid on the secondary page.              |
   | Set labels for each grid column (&aryFieldPosition.Len = last column)    |
   +--------------------------------------------------------------------------*>
   &rsScroll = GetRowset(Scroll.EOCF_SCROL_L1N1);
   &rsScroll.Flush();
   
   For &i = 1 To &aryFieldPosition.Len
      &fldScroll = &rsScroll(1).EOCF_FILTR_PRMT.GetField(@("Field.KEY" | &i | "_FLD_VAL"));
      &fldPrompt = &rsPrompt(1).GetRecord(@("Record." | &sPromptRecordName)).GetField(&aryFieldPosition [&i]);
      If &bIsXLAT Then
         &fldScroll.Label = &fldPrompt.GetLongLabel(&fldCurrent.Value);
      Else
         &fldScroll.Label = &fldPrompt.GetLongLabel(&fldPrompt.Name);
      End-If;
   End-For;
   
   <*---------------------------------------------+
   | Move each row to the results grid            |
   +----------------------------------------------*>
   For &i = 1 To &rsPrompt.RowCount
      If &i > 1 Then
         &rsScroll.InsertRow(&i - 1);
      End-If;
      &recPromptRecord = &rsPrompt(&i).GetRecord(@("Record." | &sPromptRecordName));
      <*-------------------------------------------------------------------+
      | For each "list" field, put the value in the results grid           |
      +--------------------------------------------------------------------*>
      For &j = 1 To &aryFieldPosition.Len
         &fldPrompt = &recPromptRecord.GetField(&aryFieldPosition [&j]);
         &fldScroll = &rsScroll(&i).EOCF_FILTR_PRMT.GetField(@("Field.KEY" | &j | "_FLD_VAL"));
         &fldScroll.Value = &fldPrompt.Value;
         If &j = 1 And
               &sPromptPage = Page.EOCF_FILTER_PRMPT2 Then
            &fldScroll.Label = &fldPrompt.Value
         End-If;
      End-For;
      <*-------------------------------------------------------------------+
      | Put the "value" to be returned in a field called CODE_LONG_DESC    |
      +--------------------------------------------------------------------*>
      If &bIsXLAT Then
         &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_COD_LONG_DESC.Value = &recPromptRecord.FIELDVALUE.Value;
      Else
         &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_COD_LONG_DESC.Value = &recPromptRecord.GetField(@("Field." | &fldCurrent.Value)).Value;
      End-If;
   End-For;
   
   
   <*-------------------------------------------------------------------------+
   | Cant access grid object on secondary page from here,                     |
   | so must pass a component variable, and hide trailing blank grid columns  |
   | in the PageActivate peoplecode on the secondary page (EOCF_FILTR_PRMT)   |
   +--------------------------------------------------------------------------*>
   &cmp_nNumberOfFields = &aryFieldPosition.Len;
   
   <*-------------------------+
   | Show the prompt page     |
   +--------------------------*>
   If DoModal(@("Page." | &sPromptPage), "", - 1, - 1) = 1 Then
      &fldResultListField.Value = "";
      
      Evaluate &sPromptPage
      When Page.EOCF_FILTER_PRMPT2 /* normal prompt page  */
         For &i = 1 To &rsScroll.RowCount
            If &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_CB_PROMPT.Value = "Y" Then
               &ary_fldFilterInputFields = %This.GetFilterInputFields(&rowCurrent);
               If &rowCurrent.EOCF_FLTCRT_WRK.EOCF_FILTER_OPER.Value = &strOper_BETWEEN Then
                  &nResultField = 3
               Else
                  &nResultField = 1
               End-If;
               &ary_fldFilterInputFields [&nResultField].Value = &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_COD_LONG_DESC.Value;
               Break;
            End-If;
         End-For;
         
      When Page.EOCF_FILTER_PRMPT /* in-list prompt page */
         <*---------------------------------------------------------------------+
         | For each value chosen, put it in the in-list separated by commas     |
         +----------------------------------------------------------------------*>
         For &i = 1 To &rsScroll.RowCount
            If &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_CB_PROMPT.Value = "Y" Then
               &fldResultListField.Value = &fldResultListField.Value | &rsScroll(&i).EOCF_FILTR_PRMT.EOCF_COD_LONG_DESC.Value | ",";
            End-If;
         End-For;
         
         <*-----------------------------+
         | Strip the trailing comma     |
         +------------------------------*>
         If All(&fldResultListField.Value) Then
            &fldResultListField.Value = Substring(&fldResultListField.Value, 1, Len(&fldResultListField.Value) - 1);
         End-If;
         
      End-Evaluate;
      
      %This.AcceptCriteria(&rowCurrent);
      
   End-If;
   
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_Prompt (normal prompt)                                  |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_Prompt
   
   %This.ShowPrompt(Page.EOCF_FILTER_PRMPT2);
   
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_Prompt3 (in-list prompt)                                |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_Prompt3
   
   %This.ShowPrompt(Page.EOCF_FILTER_PRMPT);
   
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_CaseSensitive                                           |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_CaseSensitive
   Local integer &i;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
   End-For;
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_Operator                                                |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_Operator
   Local array of Field &arFilterInputFields;
   rem &arFilterInputFields = %This.GetFilterInputFields(GetRow());
   /*  any way to transfer values if operator is changing to/from IN ??? */
   %This.ShowHideFilterInputFields(GetRow());
   %This.ValidateCriteria(GetRow());
   
   %This.AcceptCriteria(GetRow());
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_LookupType                                              |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_LookupType
   Local integer &i;
   
   If GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value = &stradvBasicLookup_BASIC Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value = &stradvBasicLookup_ADVANCED;
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Label = MsgGetText(18112, 5033, "Basic Srch");
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value = &stradvBasicLookup_BASIC;
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Label = MsgGetText(18112, 5032, "Advanced Srch");
   End-If;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      %This.ShowHideFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
   End-For;
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldEdit_FilterCriteria                                            |;
REM +-----------------------------------------------------------------------------------+;
method FieldEdit_FilterCriteria
   %This.ValidateCriteria(GetRow());
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterCriteria                                          |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterCriteria
   
   Local Record &recFilter;
   Local integer &i;
   Local string &strCurrentField;
   
   %This.AcceptCriteria(GetRow());
   &strCurrentField = GetRow().EOCF_FLTCRT_WRK.FIELDNAME.Value;
   
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      &recFilter = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK;
      If &recFilter.PROMPT_EDITTYPE.Value = &strPromptEditTypeDropdown And
            &recFilter.FIELDNAME.Value <> &strCurrentField Then
         %This.FillDropdownListBox(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
      End-If;
   End-For;
   
   
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | private method SaveFilterValueToLevel0                                            |;
REM | moves entered values to like-named fields in level 0 work record so that          |;
REM | prompts with higher-order keys will recognize the value in the buffer             |;
REM +-----------------------------------------------------------------------------------+;
method SaveFilterValueToLevel0
   /+ &rowCurrent as Row +/
   /* &rowCurrent as Row */
   Local integer &i, &j;
   Local Field &fldTargetField;
   Local array of Field &arFilterInputFields;
   
   try
      
      &fldTargetField = GetLevel0()(1).GetRecord(@("Record." | %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord)).GetField(@("Field." | &rowCurrent.EOCF_FLTCRT_WRK.FIELDNAME.Value));
   catch Exception &exFieldNotFound
      If &exFieldNotFound.MessageSetNumber = 2 And
            &exFieldNotFound.MessageNumber = 273 Then
         Return
      Else
         throw (&exFieldNotFound);
      End-If;
   end-try;
   
   &arFilterInputFields = %This.GetFilterInputFields(&rowCurrent);
   
   try
      If All(&fldTargetField) Then
         &fldTargetField.Value = &arFilterInputFields [1].Value;
      End-If;
   catch Exception &exFieldIsNull
      If (&exFieldIsNull.MessageSetNumber = 2 And
            &exFieldIsNull.MessageNumber = 119) Or
            (&exFieldIsNull.MessageSetNumber = 180 And
               &exFieldIsNull.MessageNumber = 236) Then
      Else
         throw (&exFieldIsNull);
      End-If;
   end-try;
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | private method IsCascadingPromptField                                             |;
REM +-----------------------------------------------------------------------------------+;
method IsCascadingPromptField
   /+ &strFieldName as String +/
   /+ Returns Boolean +/
   
   Local integer &i, &j;
   Local Field &fldTargetField;
   Local array of Field &arFilterInputFields;
   
   try
      
      &fldTargetField = GetLevel0()(1).GetRecord(@("Record." | %This.FilterUser.FilterDefn.HighOrderKeysWorkRecord)).GetField(@("Field." | &strFieldName));
   catch Exception &exFieldNotFound
      Return False;
   end-try;
   
   Return True;
   
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterFieldHelp                                         |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterFieldHelp
   Local EOCF_FILTER:FilterField &objFilterField;
   Local Record &recFilterCritWrk;
   &recFilterCritWrk = GetRow().GetRecord(Record.EOCF_FLTCRT_WRK);
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
   If &objFilterField.HelpMessageSetNumber <> 0 And
         &objFilterField.HelpMessageNumber <> 0 Then
      MessageBox(%MsgStyle_OK, "", &objFilterField.HelpMessageSetNumber, &objFilterField.HelpMessageNumber, "Message not found.");
   End-If;
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterSave                                              |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterSave
   
   GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value;
   
   <*-----------------------------------------------------------------+
   | If fill option is "default" then show checkbox                   |
   +------------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Or
         (%This.FilterUser.FilterDefn.IsUserConfigOption And
            %This.FilterUser.FillOption = &strFillOption_DEFAULT) Then
      GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Visible = True;
      If %This.FilterUser.DefaultSavedFilter = GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value Then
         GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Value = "Y";
      Else
         GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Value = "N";
      End-If;
   Else
      GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Visible = False;
      GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Value = "";
   End-If;
   
   rem   %This.AudienceAdapter.InitSavePage();
   
   <*-----------------------------------------------------------------+
   | Modal transfer to Save Filter page                               |
   +------------------------------------------------------------------*>
   If DoModal(Page.EOCF_FILTER_SAVE, "", - 1, - 1) = 1 Then
      
      If %This.SaveFilter(GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value) = True Then
         GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value;
         %This.SetSavedFiltersDropDownValues();
         %This.EnableDisableDeleteFilter();
         
         <*-------------------------------------------------------------------------+
         | If fill option is "default" then set the default filter if appropriate   |
         +--------------------------------------------------------------------------*>
         If %This.FilterUser.FillOption = &strFillOption_DEFAULT Then
            If GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_SAVEAS_DFTFLT.Value = "Y" Then
               %This.FilterUser.DefaultSavedFilter = GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value;
               If %This.FilterUser.Save() = False Then
                  Error MsgGet(18112, 5043, "Error saving user default filter.");
               End-If;
            Else
               If %This.FilterUser.DefaultSavedFilter = GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FILTER_NAME.Value Then
                  %This.FilterUser.DefaultSavedFilter = "";
                  If %This.FilterUser.Save() = False Then
                     Error MsgGet(18112, 5043, "Error saving user default filter.");
                  End-If;
               End-If;
            End-If;
         End-If;
         
      Else
         Error MsgGet(18112, 5043, "Error saving user default filter.");
      End-If;
      
   End-If;
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterSaveSave                                          |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterSaveSave
   
   /** COMMENTED BY SUJAY **/
   
   rem %This.AudienceAdapter.SaveAudience();
   EndModal(1);
end-method;



REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterSaveCancel                                        |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterSaveCancel
   EndModal(0);
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterDelete                                            |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterDelete
   Local array of string &arDeleteFilters;
   Local integer &i;
   If DoModal(Page.EOCF_FILTER_DELETE, "", - 1, - 1) = 1 Then
      &arDeleteFilters = Split(GetLevel0()(1).EOCF_FLTSAV_WRK.EOCF_FLT_CRITERIA.Value, &strFieldDelimiter);
      For &i = 1 To &arDeleteFilters.Len
         If &arDeleteFilters [&i] = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value Then
            %This.ClearFilter();
            GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
         End-If;
         If %This.DeleteFilter(&arDeleteFilters [&i]) = False Then
            Error MsgGet(18112, 5044, "Error deleting saved search defintion");
         End-If;
      End-For;
      %This.SetSavedFiltersDropDownValues();
      %This.EnableDisableDeleteFilter();
   End-If;
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method PageActivate_FilterDelete                                           |;
REM +-----------------------------------------------------------------------------------+;
method PageActivate_FilterDelete
   Local EOCF_LIST_UTILS:ROWSET:RARowset &rsFilterSaved;
   Local array of EOCF_FILTER:SavedFilter &arSavedFilters;
   Local integer &i;
   &rsFilterSaved = create EOCF_LIST_UTILS:ROWSET:RARowset(GetRowset(Scroll.EOCF_FLTSAV_DVW));
   &rsFilterSaved.Flush();
   &arSavedFilters = %This.FilterUser.SavedFilters;
   For &i = 1 To &arSavedFilters.Len
      &rsFilterSaved.GetNewRow( False).EOCF_FLTSAV_DVW.EOCF_FILTER_NAME.Value = &arSavedFilters [&i].FilterName;
   End-For;
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterDeleteSave                                        |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterDeleteSave
   Local Rowset &rsFilterSaved;
   Local Record &recFilterSaveWrkLocal;
   Local integer &i;
   &recFilterSaveWrkLocal = GetRecord(Record.EOCF_FLTSAV_WRK);
   &recFilterSaveWrkLocal.EOCF_FLT_CRITERIA.Value = "";
   &rsFilterSaved = GetRowset(Scroll.EOCF_FLTSAV_DVW);
   For &i = 1 To &rsFilterSaved.ActiveRowCount
      If &rsFilterSaved.GetRow(&i).Selected = True Then
         &recFilterSaveWrkLocal.EOCF_FLT_CRITERIA.Value = &recFilterSaveWrkLocal.EOCF_FLT_CRITERIA.Value | &strFieldDelimiter | &rsFilterSaved.GetRow(&i).GetRecord(Record.EOCF_FLTSAV_DVW).EOCF_FILTER_NAME.Value;
      End-If;
   End-For;
   &recFilterSaveWrkLocal.EOCF_FLT_CRITERIA.Value = LTrim(&recFilterSaveWrkLocal.EOCF_FLT_CRITERIA.Value, &strFieldDelimiter);
   EndModal(1);
end-method;

REM +-----------------------------------------------------------------------------------+;
REM | private method EnableDisableDeleteFilter                                          |;
REM +-----------------------------------------------------------------------------------+;
method EnableDisableDeleteFilter
   
   Local array of EOCF_FILTER:SavedFilter &arSavedFilters;
   
   &arSavedFilters = %This.FilterUser.SavedFilters;
   If &arSavedFilters.Len = 0 Then
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_DELETE_FILTER.Enabled = False;
   Else
      GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_DELETE_FILTER.Enabled = True;
   End-If;
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterPersonalize                                       |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterPersonalize
   
   Local array of string &arHideFilterFields;
   Local integer &i;
   
   GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_FILL_OPT.Value = %This.FilterUser.FillOption;
   GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_CRITERIA.Value = %This.FilterUser.FilterFieldList;
   GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_BUTON_OPT.Value = %This.FilterUser.FilterButtonOption;
   GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_COLLAPSED.Value = %This.FilterUser.FilterCollapsedOption;
   GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_ADV_BASLKPDFL.Value = %This.FilterUser.AdvancedBasicLookupDefault;
   
   If None(GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_BUTON_OPT.Value) Then
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_BUTON_OPT.Value = %This.FilterUser.FilterDefn.FilterButtonOption;
   End-If;
   
   If None(GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_COLLAPSED.Value) Then
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_COLLAPSED.Value = %This.FilterUser.FilterDefn.FilterCollapsedOption;
      
   End-If;
   
   If None(GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_FILL_OPT.Value) Then
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_FILL_OPT.Value = %This.FilterUser.FilterDefn.FillOption;
   End-If;
   
   If None(GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_ADV_BASLKPDFL.Value) Then
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_ADV_BASLKPDFL.Value = %This.FilterUser.FilterDefn.AdvancedBasicLookupDefault;
   End-If;
   
   <*-----------------------------------------------------------------+
   | Only show default filter if that option is already selected      |
   +------------------------------------------------------------------*>
   If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Or
         (%This.FilterUser.FilterDefn.IsUserConfigOption And
            %This.FilterUser.FillOption = &strFillOption_DEFAULT) Then
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FILTER_NAME.Value = %This.FilterUser.DefaultSavedFilter;
   Else
      GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FILTER_NAME.Value = "";
   End-If;
   
   REM +------------------------------------------------------------------+;
   REM | Modal transfer to Personalization page                           |;
   REM +------------------------------------------------------------------+;
   If DoModal(Page.EOCF_FILTER_PERS, "", - 1, - 1) = 1 Then
      
      REM +------------------------------------------------------------------+;
      REM | Only change the fill option if allowed                           |;
      REM +------------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.IsUserConfigOption Then
         %This.FilterUser.FillOption = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_FILL_OPT.Value;
         
         REM +-------------------------------------------------------------------------------+;
         REM | If Show All Rows or Show No Rows is selected, then blank out Default filter   |;
         REM +-------------------------------------------------------------------------------+;
         If %This.FilterUser.FillOption = &strFillOption_NOFILL Then
            %This.FilterUser.DefaultSavedFilter = "";
         End-If;
      End-If;
      
      REM +------------------------------------------------------------------+;
      REM | Only allow manual change of default filter if it's appropriate   |;
      REM +------------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Or
            (%This.FilterUser.FilterDefn.IsUserConfigOption And
               %This.FilterUser.FillOption = &strFillOption_DEFAULT) Then
         %This.FilterUser.DefaultSavedFilter = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FILTER_NAME.Value;
      End-If;
      
      REM +------------------------------------------------------------------+;
      REM | If user chooses "last-used" then save as default the current     |;
      REM |    filter if there is one                                        |;
      REM +------------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.IsUserConfigOption And
            %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA And
            All(GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value) Then
         %This.FilterUser.DefaultSavedFilter = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value;
      End-If;
      
      REM +------------------------------------------------------------------+;
      REM | Only make changes to fields if allowed                           |;
      REM +------------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.FieldsOption = "Y" And
            %This.FilterUser.FilterDefn.NonRequiredFieldCount > 0 Then
         %This.FilterUser.FilterFieldList = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_CRITERIA.Value;
      End-If;
      
      REM +------------------------------------------------------------------+;
      REM | Set the Filter Button Option                                     |;
      REM +------------------------------------------------------------------+;
      %This.FilterUser.FilterButtonOption = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_FLT_BUTON_OPT.Value;
      
      REM +------------------------------------------------------------------+;
      REM | Set the Collapsed Option                                         |;
      REM +------------------------------------------------------------------+;
      %This.FilterUser.FilterCollapsedOption = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_COLLAPSED.Value;
      
      REM +------------------------------------------------------------------+;
      REM | Set the Advanced/Basic Lookup Default                            |;
      REM +------------------------------------------------------------------+;
      %This.FilterUser.AdvancedBasicLookupDefault = GetLevel0()(1).EOCF_FLTUSR_WRK.EOCF_ADV_BASLKPDFL.Value;
      
      REM +------------------------------------------------------------------+;
      REM | Save the user preferences                                        |;
      REM +------------------------------------------------------------------+;
      If %This.FilterUser.Save() = False Then
         Error MsgGet(18112, 5045, "Error saving user preferences.");
      End-If;
      
   End-If;
   
   %This.ShowFilterButton();
   %This.ShowHideFilterFields();
   
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method PageActivate_FilterPersonalize                                      |;
REM +-----------------------------------------------------------------------------------+;
method PageActivate_FilterPersonalize
   
   Local EOCF_LIST_UTILS:ROWSET:RARowset &rsFilterFields;
   Local Row &rowFilterField;
   Local Record &recFilterUserWrkLocal, &recFilterDefnWrkLocal;
   Local array of string &arHideFilterFields;
   Local integer &i;
   Local array of EOCF_FILTER:SavedFilter &arSavedFilters;
   
   &rsFilterFields = create EOCF_LIST_UTILS:ROWSET:RARowset(GetRowset(Scroll.EOCF_FLTFLD_DVW));
   &recFilterUserWrkLocal = GetRecord(Record.EOCF_FLTUSR_WRK);
   &recFilterDefnWrkLocal = GetRecord(Record.EOCF_FLTDFN_WRK);
   
   &arSavedFilters = %This.FilterUser.SavedFilters;
   &recFilterUserWrkLocal.EOCF_FILTER_NAME.ClearDropDownList();
   For &i = 1 To &arSavedFilters.Len
      &recFilterUserWrkLocal.EOCF_FILTER_NAME.AddDropDownItem(&arSavedFilters [&i].FilterName, &arSavedFilters [&i].FilterName);
   End-For;
   
   
   &recFilterDefnWrkLocal.EOCF_FLT_FILL_OPT.Value = &recFilterUserWrkLocal.EOCF_FLT_FILL_OPT.Value;
   
   &recFilterDefnWrkLocal.EOCF_FLT_BUTON_OPT.Value = &recFilterUserWrkLocal.EOCF_FLT_BUTON_OPT.Value;
   
   &recFilterDefnWrkLocal.EOCF_COLLAPSED.Value = &recFilterUserWrkLocal.EOCF_COLLAPSED.Value;
   
   &recFilterDefnWrkLocal.EOCF_ADV_BAS_LKUP.Value = %This.FilterUser.FilterDefn.AdvancedBasicLookupOption;
   
   &recFilterDefnWrkLocal.EOCF_ADV_BASLKPDFL.Value = &recFilterUserWrkLocal.EOCF_ADV_BASLKPDFL.Value;
   
   If &recFilterDefnWrkLocal.EOCF_ADV_BAS_LKUP.Value <> &stradvBasicLookup_BOTH Then
      &recFilterUserWrkLocal.EOCF_ADV_BASLKPDFL.Visible = False;
   End-If;
   
   
   REM +------------------------------------------------------------------+;
   REM | Hide the Fill options if not allowed to make changes             |;
   REM +------------------------------------------------------------------+;
   If Not %This.FilterUser.FilterDefn.IsUserConfigOption Then
      &recFilterUserWrkLocal.EOCF_FLT_FILL_OPT.Visible = False;
   Else
      &recFilterUserWrkLocal.EOCF_FLT_FILL_OPT.Label = MsgGetText(18112, 5014, "Message Not Found");
      
      REM +--------------------------------------------------------------------+;
      REM | Hide the Default Saved Filter Fill option if saves are not allowed |;
      REM +--------------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.SaveOption = "N" Then
         &recFilterUserWrkLocal.EOCF_FILTER_NAME.Visible = False;
      End-If;
      
   End-If;
   
   REM +------------------------------------------------------------------+;
   REM | Hide the Fields if not allowed to make changes                   |;
   REM +------------------------------------------------------------------+;
   If %This.FilterUser.FilterDefn.FieldsOption = "N" Or
         %This.FilterUser.FilterDefn.NonRequiredFieldCount = 0 Then
      &recFilterUserWrkLocal.EOCF_FLT_FLDS_OPT.Visible = False;
   Else
      
      &recFilterUserWrkLocal.EOCF_FLT_FLDS_OPT.Label = MsgGetText(18112, 5022, "Message Not Found");
      
      REM +----------------------------------------------------------------------+;
      REM | Field changes are allowed, so show all fields and set checkboxes     |;
      REM +----------------------------------------------------------------------+;
      &arHideFilterFields = Split(&recFilterUserWrkLocal.EOCF_FLT_CRITERIA.Value, &strFieldDelimiter);
      
      &rsFilterFields.Flush();
      For &i = 1 To %This.FilterUser.FilterDefn.FilterFields.Len
         If %This.FilterUser.FilterDefn.FilterFields [&i].IsRequired = False And
               %This.FilterUser.FilterDefn.FilterFields [&i].IsFilterField = True And
               Not %This.FilterUser.FilterDefn.FilterFields [&i].IsHiddenField Then
            &rowFilterField = &rsFilterFields.GetNewRow( False);
            &rowFilterField.EOCF_FLTFLD_DVW.FIELDNAME.Value = %This.FilterUser.FilterDefn.FilterFields [&i].FieldName;
            &rowFilterField.EOCF_FLTFLD_WRK.FIELDLABEL.Value = %This.FilterUser.FilterDefn.FilterFields [&i].Label;
            &rowFilterField.EOCF_FLTFLD_WRK.FIELDNUM.Value = %This.FilterUser.FilterDefn.FilterFields [&i].FieldNumber;
            &rowFilterField.Selected = (&arHideFilterFields.Find(%This.FilterUser.FilterDefn.FilterFields [&i].FieldName) = 0);
         End-If;
      End-For;
      &rsFilterFields.Sort(EOCF_FLTFLD_WRK.FIELDNUM, "A");
      
   End-If;
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterPersonalizeSave                                   |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterPersonalizeSave
   
   Local Rowset &rsFilterFields;
   Local Record &recFilterField, &recFilterUserWrkLocal, &recFilterDefnWrkLocal;
   Local integer &i;
   Local array of string &arHideFilterFields;
   Local boolean &bAtLeastOne;
   
   &recFilterUserWrkLocal = GetRecord(Record.EOCF_FLTUSR_WRK);
   &recFilterDefnWrkLocal = GetRecord(Record.EOCF_FLTDFN_WRK);
   
   If &recFilterDefnWrkLocal.EOCF_FLT_FILL_OPT.Value = "D" And
         None(&recFilterUserWrkLocal.EOCF_FILTER_NAME.Value) Then
      Error MsgGet(18112, 5048, "Default Search name is required.");
   End-If;
   
   &recFilterUserWrkLocal.EOCF_FLT_FILL_OPT.Value = &recFilterDefnWrkLocal.EOCF_FLT_FILL_OPT.Value;
   
   &recFilterUserWrkLocal.EOCF_FLT_BUTON_OPT.Value = &recFilterDefnWrkLocal.EOCF_FLT_BUTON_OPT.Value;
   
   &recFilterUserWrkLocal.EOCF_COLLAPSED.Value = &recFilterDefnWrkLocal.EOCF_COLLAPSED.Value;
   
   &recFilterUserWrkLocal.EOCF_ADV_BASLKPDFL.Value = &recFilterDefnWrkLocal.EOCF_ADV_BASLKPDFL.Value;
   
   REM +----------------------------------------------------------------------+;
   REM | If Field changes were allowed, serialize the checkbox settings       |;
   REM +----------------------------------------------------------------------+;
   If %This.FilterUser.FilterDefn.FieldsOption = "Y" Then
      &bAtLeastOne = False;
      &arHideFilterFields = CreateArrayRept("", 0);
      &rsFilterFields = GetRowset(Scroll.EOCF_FLTFLD_DVW);
      
      REM +--------------------------------------------------------------+;
      REM | If there are any hidden rows, then there are required fields |;
      REM | and its ok if the user decides to hide all fields            |;
      REM +--------------------------------------------------------------+;
      If %This.FilterUser.FilterDefn.FieldCount > %This.FilterUser.FilterDefn.NonRequiredFieldCount Then
         &bAtLeastOne = True;
      End-If;
      
      For &i = 1 To &rsFilterFields.ActiveRowCount
         &recFilterField = &rsFilterFields.GetRow(&i).GetRecord(Record.EOCF_FLTFLD_DVW);
         If &rsFilterFields.GetRow(&i).Selected = False Then
            &arHideFilterFields.Push(&recFilterField.FIELDNAME.Value);
         Else
            &bAtLeastOne = True;
         End-If;
      End-For;
      If Not &bAtLeastOne Then
         Error MsgGet(18112, 5039, "You must select at least one filter field to display.");
      End-If;
      &recFilterUserWrkLocal.EOCF_FLT_CRITERIA.Value = &arHideFilterFields.Join(&strFieldDelimiter, "", "");
   End-If;
   
   EndModal(1);
   
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterPersonalizeCancel                                 |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterPersonalizeCancel
   EndModal(0);
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterClear                                             |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterClear
   %This.ClearFilter();
   GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
   %This.FilterUser.DefaultSavedFilter = "";
   If Not %This.FilterUser.Save() Then
      REM Show error;
   End-If;
   REM %This.AudienceAdapter.UpdateLinkDisplay();
   /*** Clear the results grid **/
   GetLevel0()(1).GetRowset(@("Scroll." | &m_strDefinitionRecordName)).Flush();
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterExecute                                           |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterExecute
   %This.ExecuteFilter();
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | public method FieldChange_FilterLoad                                              |;
REM +-----------------------------------------------------------------------------------+;
method FieldChange_FilterLoad
   
   Local boolean &bResult;
   Local string &sSavedLookupType;
   
   If All(GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value) Then
      
      &sSavedLookupType = %This.FilterUser.GetSavedFilter(GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value).FilterLookupType;
      
      If All(&sSavedLookupType) And
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_ADV_BAS_LKUP.Value = &stradvBasicLookup_BOTH Then
         GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value = &sSavedLookupType;
      End-If;
      
      If %This.LoadFilter(GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value) = True Then
         %This.ExecuteFilter();
         
         <*--------------------------------------------------------------------------+
         | If the fill option calls for Last-used then save this filter as default   |
         +---------------------------------------------------------------------------*>
         If %CompIntfcName = "" Then
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Or
                  (%This.FilterUser.FilterDefn.IsUserConfigOption And
                     %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA) Then
               %This.FilterUser.DefaultSavedFilter = GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value;
               If %This.FilterUser.Save() = False Then
                  Error MsgGet(18112, 5046, "Error saving user search definition as default.");
               End-If;
            End-If;
         End-If;
      Else
         
         REM +---------------------------------------------------------------------+;
         REM | The load failed, so delete the saved filter if it actually exists,  |;
         REM | and reset the Saved Filters dropdown list and current value.        |;
         REM +---------------------------------------------------------------------+;
         If %CompIntfcName = "" Then
            &bResult = %This.DeleteFilter(GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value);
            %This.SetSavedFiltersDropDownValues();
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
            Error MsgGet(18112, 5047, "Error loading search criteria");
         End-If;
         
      End-If;
   Else
      REM %This.ClearFilter();
   End-If;
   
end-method;


REM -------------------------------------------------------------;
REM  Private method GetSetID                                     ;
REM -------------------------------------------------------------;
method GetSetID
   /+ &recFilterCritWrk as Record +/
   /+ Returns String +/
   
   Local array of Field &arFilterInputFields;
   Local string &sSetid, &sSetControlField, &sSetControlRecord;
   Local EOCF_FILTER:FilterField &objFilterField;
   
   &objFilterField = %This.FilterUser.FilterDefn.GetFilterField("SETID");
   
   If Not &objFilterField = Null Then
      &arFilterInputFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&objFilterField.FieldNumber));
      If All(&arFilterInputFields [1].Value) Then
         Return &arFilterInputFields [1].Value;
      End-If;
   End-If;
   
   If None(&recFilterCritWrk.SETCNTRLFLD.Value) Then
      &sSetControlField = "BUSINESS_UNIT";
   Else
      &sSetControlField = &recFilterCritWrk.SETCNTRLFLD.Value;
   End-If;
   
   /* &sSetControlRecord = &recFilterCritWrk.EOCF_RECNAME_ALT.Value; */
   &sSetControlRecord = "BC";
   
   &sSetid = %This.GetSetControlSetID(&sSetControlField, &sSetControlRecord);
   
   If None(&sSetid) Then
      <******************************************************************
      * If not found with Fields record name, try again with            *
      *   the scrolls record name                                       *
      *******************************************************************>
      &sSetControlRecord = &m_strDefinitionRecordName;
      If &sSetControlRecord <> &recFilterCritWrk.EOCF_RECNAME_ALT.Value Then
         &sSetid = %This.GetSetControlSetID(&sSetControlField, &sSetControlRecord);
      End-If;
   End-If;
   
   Return &sSetid
end-method;


REM +-----------------------------------------------------------------------------------+;
REM | UpdateData                                                                        |;
REM +-----------------------------------------------------------------------------------+;
method UpdateData
   Local string &sCIName;
   Local Rowset &rsPSBCITEM;
   Local ApiObject &CI;
   Local string &sRecname, &sCIErrorOption, &sFirstEnabledFieldName, &sFirstVisibleFieldName, &RecFieldName, &sUpdateDataBatchErrors, &ReturnText, &nRowsInErrorText, &sFieldNameAndValue, &sFieldNameForGet;
   Local any &FieldValueForGet, &FirstFieldValue;
   Local Rowset &rsData;
   Local Record &rData;
   Local number &num1, &num2, &UpdateDataErrorCount, &nFirstErrorRowNumber;
   Local boolean &bStop;
   
   &UpdateDataErrorCount = 0;
   &sRecname = &m_strDefinitionRecordName;
   &sUpdateDataBatchErrors = "";
   
   If %This.FilterUser.FilterDefn.UpdateOption = "Y" Then
      &sCIName = %This.FilterUser.FilterDefn.ComponentInterfaceName;
      &sCIErrorOption = %This.FilterUser.FilterDefn.CIErrorOption;
      
      /* Select the GetKeys of the CI **/
      &rsPSBCITEM = CreateRowset(Record.PSBCITEM);
      
      &rsPSBCITEM.Fill(" Where BCNAME = :1 and BCTYPE = 1 ", &sCIName);
      
      &rsData = GetRowset(@("Scroll." | &sRecname));
      
      For &num1 = 1 To &rsData.ActiveRowCount
         
         If &rsData.GetRow(&num1).IsChanged Then
            
            StartWork();
            &CI = Null;
            &CI = %Session.GetCompIntfc(@("CompIntfc." | &sCIName));
            
            If &CI <> Null Then
               &CI.InteractiveMode = True;
            Else
               Error MsgGet(18112, 5056, "Unable to Initiate the %1 Component Interface. Please contact System Administrator for the help.", &sCIName);
            End-If;
            
            &rData = &rsData.GetRow(&num1).GetRecord(@("Record." | &sRecname));
            
            &sFieldNameAndValue = "";
            
            For &num2 = 1 To &rsPSBCITEM.ActiveRowCount
               
               &sFieldNameForGet = &rsPSBCITEM.GetRow(&num2).GetRecord(Record.PSBCITEM).FIELDNAME.Value;
               
               &FieldValueForGet = &rData.GetField(@("Field." | &sFieldNameForGet)).Value;
               
               &CI.SetPropertyByName(&sFieldNameForGet, &FieldValueForGet);
               
               /** Concatenate FieldName and Fieldvalue. This will be used to show **/
               /** error message if the CI get fails                               **/
               
               If All(&sFieldNameAndValue) Then
                  &sFieldNameAndValue = &sFieldNameAndValue | ", " | &sFieldNameForGet | " " | &FieldValueForGet;
               Else
                  &sFieldNameAndValue = &sFieldNameForGet | " " | &FieldValueForGet;
               End-If;
               
            End-For;
            
            If Not &CI.Get() Then
               Error MsgGet(18112, 5057, " Unable to do a Get on %1 Component Interface for KeyFields %2 ", &sCIName, &sFieldNameAndValue);
               
            Else
               
               /************************************************************************/
               /** Update Data Thru CI                                                **/
               /************************************************************************/
               
               For &num2 = 1 To &rData.FieldCount
                  If &rData.GetField(&num2).IsChanged Then
                     
                     try
                        &CI.SetPropertyByName(&rData.GetField(&num2).Name, &rData.GetField(&num2).Value);
                     catch Exception &badStmt
                     end-try;
                     
                     If &UpdateDataErrorCount = 0 Then
                        &nFirstErrorRowNumber = &num1;
                        If None(&sFirstEnabledFieldName) Then
                           If &rData.GetField(&num2).Enabled Then
                              &sFirstEnabledFieldName = &rData.GetField(&num2).Name;
                           Else
                              If None(&sFirstVisibleFieldName) And
                                    &rData.GetField(&num2).Visible Then
                                 &sFirstVisibleFieldName = &rData.GetField(&num2).Name;
                              End-If;
                           End-If;
                        End-If;
                     End-If;
                     
                  End-If;
               End-For;
            End-If;
            
            If Not &CI.Save() Then
               &UpdateDataErrorCount = &UpdateDataErrorCount + 1;
               Evaluate &sCIErrorOption
               When = "A"
                  %This.CIErrorHandling(&rsData, &num1);
                  Break;
               When = "P"
                  &bStop = False;
                  &ReturnText = %This.DisplayCIError(&sCIName, %Session, &bStop);
                  &sUpdateDataBatchErrors = &sUpdateDataBatchErrors | MsgGetText(18112, 5058, "Row Number: %1", &num1) | " " | &ReturnText | Char(10) | Char(13) | Char(10) | Char(13);
                  Break;
               When = "S"
                  &bStop = True;
                  &ReturnText = %This.DisplayCIError(&sCIName, %Session, &bStop);
                  Break;
               When = "N"
                  Break;
               End-Evaluate;
               &CI.Cancel();
            Else
               /*               CommitWork(); */
               &CI.Cancel();
            End-If;
            
         End-If;
      End-For;
      If &UpdateDataErrorCount > 0 Then
         If All(&sFirstEnabledFieldName) Then
            
            &RecFieldName = &sRecname | "." | &sFirstEnabledFieldName;
            SetCursorPos(%Page, @&RecFieldName, &nFirstErrorRowNumber);
            
         Else
            If All(&sFirstVisibleFieldName) Then
               
               &RecFieldName = &sRecname | "." | &sFirstVisibleFieldName;
               SetCursorPos(%Page, @&RecFieldName, 1);
               
            End-If;
         End-If;
         If All(&sUpdateDataBatchErrors) Then
            &nRowsInErrorText = MsgGetText(18112, 5059, " Number of Rows in Error : %1 ", &UpdateDataErrorCount) | Char(10) | Char(13);
            
            WinMessage(&nRowsInErrorText | &sUpdateDataBatchErrors, %MsgStyle_OK);
         End-If;
         
      End-If;
      
   End-If;
end-method;

REM +---(JNP 6/20)--------------------------------------------+;
REM | public method InitialzeGridRow(&rowGridRow as row)      |;
REM +---------------------------------------------------------+;
REM |     This is a stub method which can be overriden        |;
REM |     by any sub-class to perform initialization          |;
REM |     on rows that are loaded into the grid.              |;
REM |     The overriding method must return True.             |;
REM +---------------------------------------------------------+;
method InitializeGridRow
   /+ &rowGridRow as Row +/
   /+ Returns Boolean +/
   Return False;
end-method;

/************************************************************/
/* Method Name : StopFetchAfterNRows                        */
/* Parameter   : none                                       */
/* Returns     : none                                       */
/* Stops fetching rows in the grid once the limit specified */
/* on the filter definition has reached. This method needs  */
/* to be called on the RowSelect peoplecode event of the    */
/* scroll                                                   */
/************************************************************/

method StopFetchAfterNRows
   /+ Returns String +/
   
   Local string &MsgHelpText, &sReturnValue;
   
   %This.NumberOfRowsInGrid = %This.NumberOfRowsInGrid + 1;
   
   &sComponentMoreRowsMessageText = "";
   If %This.MaxRows > 0 Then
      If %This.NumberOfRowsInGrid > %This.MaxRows Then
         DiscardRow();
         StopFetching();
         
         If &sShowMoreDataHelpText = "Y" And
               &sMsgTextorExplain <> "" And
               &nMessageSetNumber <> 0 And
               &nMessageNumber <> 0 And
               &sRecnameHelpText <> "" And
               &sFieldnameHelptext <> "" Then
            
            If &sMsgTextorExplain = "E" Then
               &MsgHelpText = MsgGetExplainText(&nMessageSetNumber, &nMessageNumber, " Message Not Found ", %This.MaxRows);
            Else
               &MsgHelpText = MsgGetText(&nMessageSetNumber, &nMessageNumber, " Message Not Found ", %This.MaxRows);
            End-If;
            &sReturnValue = &MsgHelpText;
         End-If;
         
         
      End-If;
      
   End-If;
   &sComponentMoreRowsMessageText = &sReturnValue;
   Return &sReturnValue;
end-method;

REM +----------------------------------------------------------------------------------+;
REM | Public Method GetSearchField                                                     |;
REM +----------------------------------------------------------------------------------+;
method GetSearchField
   /+ &sSearchRecName as String, +/
   /+ &sSearchField as String +/
   /+ Returns String +/
   Local integer &i;
   Local string &strReturnValue;
   Local array of Field &aryFieldValue;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount
      If GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.FIELDNAME.Value = &sSearchField Then
         &aryFieldValue = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         &strReturnValue = &aryFieldValue [1].Value;
         Return &strReturnValue;
      End-If;
   End-For;
   
   Return "";
   
end-method;

REM +----------------------------------------------------------------------------------+;
REM | Public Method SetSearchField                                                     |;
REM +----------------------------------------------------------------------------------+;
method SetSearchField
   /+ &sSearchRecName as String, +/
   /+ &sSearchField as String, +/
   /+ &sSearchValue as String +/
   
   Local integer &i;
   Local array of Field &arFields;
   
   REM +----------------------------------------------------------------------------------+;
   REM | If we are restoring previous criteria, don't overlay with the default values     |;
   REM +----------------------------------------------------------------------------------+;
   
   If %This.IsCriteria Then
      Return;
   End-If;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      If LTrim(RTrim(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.FIELDNAME.Value)) = LTrim(RTrim(&sSearchField)) And
            (GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.EOCF_ADV_BAS_LKUP.Value = GetLevel0().GetRow(1).EOCF_FLTFRM_WRK.EOCF_ADV_BASLKPOPT.Value Or
               GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.EOCF_ADV_BAS_LKUP.Value = &stradvBasicLookup_BOTH) And
            GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.EOCF_CB_USE_SEARCH.Value = "Y" Then
         &arFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         If None(&arFields [1].Value) Then
            &arFields [1].Value = &sSearchValue;
         End-If;
         
         %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         Break;
      End-If;
   End-For;
   
end-method;


REM +----------------------------------------------------------------------------------+;
REM | Public Method SetSearchFieldForce                                                |;
REM +----------------------------------------------------------------------------------+;
method SetSearchFieldForce
   /+ &sSearchRecName as String, +/
   /+ &sSearchField as String, +/
   /+ &sSearchValue as String +/
   
   Local integer &i;
   Local array of Field &arFields;
   
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      
      If LTrim(RTrim(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.FIELDNAME.Value)) = LTrim(RTrim(&sSearchField)) Then
         
         &arFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         
         &arFields [1].Value = &sSearchValue;
         
         %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         Break;
      End-If;
   End-For;
   
end-method;


REM +----------------------------------------------------------------------------------+;
REM | Public Method SetSearchFieldAndOper                                              |;
REM +----------------------------------------------------------------------------------+;
method SetSearchFieldAndOper
   /+ &sSearchField as String, +/
   /+ &sSearchValue as String, +/
   /+ &sSearchOper as String +/
   
   Local integer &i;
   Local array of Field &arFields;
   
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).ActiveRowCount
      
      If LTrim(RTrim(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.FIELDNAME.Value)) = LTrim(RTrim(&sSearchField)) Then
         
         GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK.EOCF_FILTER_OPER.Value = &sSearchOper;
         
         &arFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         
         &arFields [1].Value = &sSearchValue;
         
         %This.ShowHideFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         
         %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         Break;
      End-If;
   End-For;
   
end-method;

<** COMMENTED BY SUJAY **

REM +----------------------------------------------------------------------------------+;
REM | Public Method SetDistributionRule                                                |;
REM +----------------------------------------------------------------------------------+;
method SetDistributionRule
   /+ &strRuleName as String, +/
   /+ &bUseRule as Boolean +/
   
   Local Record &recFilterDistCritWrk;
   Local integer &i;
   
   For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).RowCount
      &recFilterDistCritWrk = GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).GetRow(&i).GetRecord(Record.EOEC_DS_RULE_VW);
      
      If &recFilterDistCritWrk.EOEC_RULENAME.Value = &strRuleName Then
         If &bUseRule Then
            &recFilterDistCritWrk.EOEC_SELECT_RULE.Value = "Y";
         Else
            &recFilterDistCritWrk.EOEC_SELECT_RULE.Value = "N";
         End-If;
         Break;
      End-If;
   End-For;
   
end-method;

** COMMENT END BY SUJAY ***>

REM +----------------------------------------------------------------------------------+;
REM | Public Stub Method SetFieldDefaults                                              |;
REM | Used by sub-classes to set default values into any filter field.                 |;
REM +----------------------------------------------------------------------------------+;
method SetFieldDefaults
end-method;

REM +----------------------------------------------------------------------------------+;
REM | Public Method CIErrorHandling                                                    |;
REM +----------------------------------------------------------------------------------+;

method CIErrorHandling
   /+ &rsData as Rowset, +/
   /+ &rowNumber as Number +/
end-method;

REM +----------------------------------------------------------------------------------+;
REM | Public Method DisplayCIError                                                     |;
REM +----------------------------------------------------------------------------------+;

method DisplayCIError
   /+ &strCIName as String, +/
   /+ &Session as ApiObject, +/
   /+ &bStop as Boolean +/
   /+ Returns String +/
   
   Local string &ErrorText, &ErrorType;
   Local number &Counter;
   If All(&Session) Then
      /*      &PSMessages = &Session.PSMessages;
      &ErrorCount = &PSMessages.Count; */
      &ErrorText = "";
      For &Counter = 1 To &Session.PSMessages.Count
         &ErrorText = &ErrorText | " " | &Session.PSMessages.Item(&Counter).Text;
         If &Counter = 1 Then
            &ErrorType = &Session.PSMessages.Item(&Counter).Type;
         End-If;
      End-For;
      &Session.PSMessages.DeleteAll();
      If &bStop Then
         Error MsgGet(18112, 5060, "%1 Component Interface returned Error. Error Type -> %2, Error Text  -> %3 ", &strCIName, &ErrorType, &ErrorText);
      Else
         Return MsgGetText(18112, 5060, "%1 Component Interface returned Error. Error Type -> %2, Error Text  -> %3 ", &strCIName, &ErrorType, &ErrorText);
      End-If;
   End-If;
   
end-method;


REM **********************************************************;
REM * Public Method InitCached                                ;
REM **********************************************************;
method InitCached
   /+ Returns Boolean +/
   
   <*********************************************************************
   * Restore cached component buffer                                    *
   **********************************************************************>
   If &gobjFilterFormCache <> Null Then
      
      If %This.LoadComponentFromCache() Then;
         
         &IsInit = False;
         Return True;
      End-If;
      
   End-If;
   
   <*********************************************************************
   * Otherwise run normal init which loads from DB instead of cache     * 
   **********************************************************************>
   
   
   Return False;
   
end-method;


<**********************************************************
* private method LoadComponentFromCache                   *
***********************************************************>
method LoadComponentFromCache
   /+ Returns Boolean +/;
   
   Local integer &i;
   Local Record &recFilterCritWrk;
   Local Rowset &rsFilterCriteria, &rsFilterDistRule;
   Local Rowset &rsCached, &rsWork, &rsSource, &rsDistSource, &rsNull;
   Local boolean &bLoadFilter, &bRunFilter, &bNoFill, &bCollapse;
   Local EOCF_FILTER:FilterField &objFilterField;
   
   try
      <*********************************
      * Get Level 0 Row from cache     *
      **********************************>
      &gobjFilterFormCache.ComponentName = %This.FilterUser.FilterDefn.ComponentName;
      &gobjFilterFormCache.Market = %This.FilterUser.FilterDefn.Market;
      &gobjFilterFormCache.PageName = %This.FilterUser.FilterDefn.PageName;
      &gobjFilterFormCache.RecordName = &m_strDefinitionRecordName;
      
      &rsCached = &gobjFilterFormCache.GetComponentBuffer;
      
      If &rsCached = Null Then
         /* %This.FilterUser.FilterDefn.FlushFilterFields();
         If %UserId = "jbrice" Then
            MessageBox(0, "", 0, 0, "1 ");
         End-If;
         %This.FilterUser.FilterDefn.LoadFields(); */
         Return False;
      End-If;
      
      &rsWork = CreateRowset(&rsCached);
      &rsCached.CopyTo(&rsWork);
      
      &rsWork(1).CopyTo(GetLevel0()(1));
      
      <**********************************************************
      * Get Filter Criteria and Distribution Rules from Cache   *
      ***********************************************************>
      For &i = 1 To &rsWork(1).ChildCount
         If &rsWork(1).GetRowset(&i).DBRecordName = Record.EOCF_FLTCRT_DVW Then
            &rsSource = CreateRowset(&rsWork(1).GetRowset(&i));
            &rsWork(1).GetRowset(&i).CopyTo(&rsSource);
         End-If;
         
         <** COMMENTED BY SUJAY **
         If &rsWork(1).GetRowset(&i).DBRecordName = Record.EOEC_DS_RULE_VW Then
            &rsDistSource = CreateRowset(&rsWork(1).GetRowset(&i));
            &rsWork(1).GetRowset(&i).CopyTo(&rsDistSource);
         End-If;

**>
      End-For;
      
      &rsFilterCriteria = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW);
      REM /* SUJAY */      &rsFilterDistRule = GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW);
      GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).Flush();
      GetLevel0()(1).GetRowset(Scroll.EOEC_DS_RULE_VW).Flush();
      
      If &rsSource.DBRecordName <> Record.EOCF_FLTCRT_DVW Then
         Return False;
      End-If;
      
      If &rsDistSource.DBRecordName <> Record.EOEC_DS_RULE_VW Then
         Return False;
      End-If;
      
      
      <*********************************************************
      * Cached Criteria to Component Buffer                    *
      **********************************************************>
      If &rsSource.RowCount = 1 And
            None(&rsSource(1).EOCF_FLTCRT_WRK.FIELDNAME.Value) Then
      Else
         For &i = 1 To &rsSource.RowCount
            If &i > 1 Then
               GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).InsertRow(&i - 1);
            End-If;
            &rsSource(&i).CopyTo(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         End-For;
      End-If;
      
      <** COMMENTED BY SUJAY **
      
      <**********************************************************
      * Cached Data Distribution Rules to Component Buffer      *
      ***********************************************************>
      If %This.FilterUser.FilterDefn.SecureOption = "Y" Then
         If &rsDistSource.RowCount = 1 And
               None(&rsDistSource(1).EOEC_DS_RULE_VW.EOEC_RULENAME.Value) Then
         Else
            &rsDistSource.CopyTo(&rsFilterDistRule);
         End-If;
      End-If;
 
**>
      
      <** COMMENTED BY SUJAY **   
      
      <*---------------------------------------------------------+
      |  If return to Search is occuring, set Instance variable  |
      +----------------------------------------------------------*>
      Local RB_TOOLBAR:ToolbarSearchAdapter &objToolbar = CreateObject("RB_TOOLBAR:ToolbarSearchAdapter");
      
      If &objToolbar.CheckAndClearResults() Then
         &IsReturnToSearch = True;
      Else
         &IsReturnToSearch = False;
      End-If;

** COMMENT ENDED BY SUJAY **>
      
      If %This.FilterUser.FilterDefn.MoreRowsRecName <> "" And
            %This.FilterUser.FilterDefn.MoreRowsFieldName <> "" Then
         GetRecord(@("Record." | %This.FilterUser.FilterDefn.MoreRowsRecName)).GetField(@("Field." | %This.FilterUser.FilterDefn.MoreRowsFieldName)).Value = MsgGetText(18112, 5038, "Use Search Criteria to Narrow the Search Results");
      End-If;
      
      %This.ShowAdvancedBasic();
      
      <******************************************************************
      * Tidy up the things that are not saved with the cached buffer    *
      *  (such as Visible Flags and Field Labels)                       *
      *******************************************************************>
      For &i = 1 To GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW).RowCount;
         &recFilterCritWrk = GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i).EOCF_FLTCRT_WRK;
         &objFilterField = %This.FilterUser.FilterDefn.GetFilterField(&recFilterCritWrk.FIELDNAME.Value);
         
         If All(&recFilterCritWrk.TEXT254.Value) Then
            &recFilterCritWrk.TEXT254.Visible = True;
         Else
            &recFilterCritWrk.TEXT254.Visible = False;
         End-If;
         
         &objFilterField.PromptWhereClause = "";
         &objFilterField.PromptSet = False;
         %This.ShowHideFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         
         %This.FillOperatorList(&recFilterCritWrk);
         &recFilterCritWrk.EOCF_FILTER_OPER.Label = &recFilterCritWrk.FIELDLABEL.Value;
         
         
         If %This.FilterUser.FilterDefn.IsUserConfigOption Then
            If %This.FilterUser.FillOption = "" Then
               %This.FilterUser.FillOption = %This.FilterUser.FilterDefn.FillOption;
            End-If;
            
            If %This.FilterUser.FillOption = &strFillOption_NOFILL Then
               &bNoFill = True;
            End-If;
         Else
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_NOFILL Then
               &bNoFill = True;
            End-If;
         End-If;
         
         If &bNoFill Then
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = "";
         End-If;
         
         Local array of Field &arFilterInputFields = %This.GetFilterInputFields(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
         
         <*************************************************************************
         * If first (or second for BETWEEN operator) fields have a value          *
         *   then do AcceptCriteria to format the SQL expression for that field   *
         **************************************************************************>
         If &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_IS_BLANK And
               &recFilterCritWrk.EOCF_FILTER_OPER.Value <> &strOper_NOT_BLANK Then
            If None(&arFilterInputFields [1].Value) Then
               If &arFilterInputFields.Len > 1 Then
                  If &arFilterInputFields [2] <> Null Then
                     If None(&arFilterInputFields [2].Value) Then
                     Else
                        If &bNoFill And
                              Not %This.IsReturnToSearch Then
                           &arFilterInputFields [2].Value = "";
                        End-If;
                        %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
                     End-If;
                  End-If;
               End-If;
            Else
               If &bNoFill And
                     Not %This.IsReturnToSearch Then
                  &arFilterInputFields [1].Value = "";
               End-If;
               %This.AcceptCriteria(GetLevel0()(1).GetRowset(Scroll.EOCF_FLTCRT_DVW)(&i));
            End-If;
         End-If;
         
         %This.SetAndLabels(&recFilterCritWrk);
         
      End-For;
      
      
      REM %This.ShowHideFilterFields();
      %This.ShowHideSaveOption(%This.FilterUser.FilterDefn.SaveOption);
      %This.ShowHideDebugArea();
      %This.ShowFilterButton();
      %This.EnableDisableDeleteFilter();
      %This.SetFieldDefaults();
      %This.ShowHideDataDistributionRules();
      %This.ShowHidePersonalizeLink();
      %This.SetSavedFiltersDropDownValues();
      
      If %This.FilterUser.FilterCollapsedOption = "Y" Then
         &bCollapse = True;
      Else
         If %This.FilterUser.FilterCollapsedOption = "" Then
            If %This.FilterUser.FilterDefn.FilterCollapsedOption = "Y" Then
               &bCollapse = True;
            End-If;
         End-If;
      End-If;
      
      If &bCollapse Then
         GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = True;
      Else
         GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_GB_FILTR_MAIN.DataAreaCollapsed = False;
      End-If;
      
      <*********************************************************
      * Execute the SQL to load the results grid               * 
      **********************************************************>
      If %CompIntfcName = "" Then
         
         If %This.FilterUser.FilterDefn.IsUserConfigOption Then
            
            If %This.FilterUser.FillOption = "" Then
               %This.FilterUser.FillOption = %This.FilterUser.FilterDefn.FillOption;
            End-If;
            
            If %This.FilterUser.FillOption = &strFillOption_DEFAULT Then
               &bLoadFilter = True;
               &bRunFilter = True;
            End-If;
            If %This.FilterUser.FillOption = &strFillOption_LASTCRITERIA Then
               /* If %This.FilterUser.LastUsedCriteria <> "" Then  */
               &bRunFilter = True;
               /* End-If; */
            End-If;
         Else
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_DEFAULT Then
               &bLoadFilter = True;
               &bRunFilter = True;
            End-If;
            If %This.FilterUser.FilterDefn.FillOption = &strFillOption_LASTCRITERIA Then
               /* If %This.FilterUser.LastUsedCriteria <> "" Then */
               &bRunFilter = True;
               /* End-If; */
            End-If;
         End-If;
         
         If %This.IsReturnToSearch Then
            &bRunFilter = True;
         End-If;
         
         
         Local string &strParmFilterName = %Request.GetParameter("SEARCH");
         If All(&strParmFilterName) Then
            If %This.IsSavedFilter(&strParmFilterName) Then
               &IsReturnToSearch = False;
               %This.FilterUser.DefaultSavedFilter = &strParmFilterName;
               &bLoadFilter = True;
               &bRunFilter = True;
            End-If;
         End-If;
         
      End-If;
      
      /** CHANGED BY SUJAY **   /
<*
      If &bLoadFilter And
            %Component <> Component.RC_CASE_SW And
            %Component <> Component.RC_CASE_HD Then
         If %This.LoadFilter(%This.FilterUser.DefaultSavedFilter) Then
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = %This.FilterUser.DefaultSavedFilter;
            %This.SetFieldDefaults();
         End-If;
      End-If;
*>
      If &bLoadFilter Then
         If %This.LoadFilter(%This.FilterUser.DefaultSavedFilter) Then
            GetLevel0()(1).EOCF_FLTFRM_WRK.EOCF_FILTER_NAME.Value = %This.FilterUser.DefaultSavedFilter;
            %This.SetFieldDefaults();
         End-If;
      End-If;
    /** CHANGE COMPLETE BY SUJAY **/
      
      /** CHANGED BY SUJAY **   /
<*
      If &bRunFilter And
            %Component <> Component.RC_CASE_SW And
            %Component <> Component.RC_CASE_HD Then
         %This.ExecuteFilter();
      End-If;
*>
      If &bRunFilter Then
         %This.ExecuteFilter();
      End-If;

/** CHANGE COMPLETE BY SUJAY **/
      
      REM     %This.AudienceAdapter.UpdateLinkDisplay();
      
   catch Exception &anyError;
      <*-----------------------------------------------------------------------------+
      | If loading from cache fails for any reason, return false which will run the  |
      | normal Init() method which loads everything from the DB instead of buffers   | 
      +------------------------------------------------------------------------------*>
      %This.FilterUser.FilterDefn.FlushFilterFields();
      %This.FilterUser.FilterDefn.LoadFields();
      Return False;
   end-try;
   
   Return True;
   
end-method;

